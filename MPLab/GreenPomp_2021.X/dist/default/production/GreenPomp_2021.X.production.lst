

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Aug 17 19:41:05 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	16F18323
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	intentry,global,class=CODE,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    56                           	dabs	1,0x7E,2
    57  0000                     
    58                           ; Version 2.30
    59                           ; Generated 15/09/2020 GMT
    60                           ; 
    61                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution. Publication is not required when
    75                           ;        this file is used in an embedded application.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16F18323 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000E                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  0019                     	;# 
   120  001A                     	;# 
   121  001B                     	;# 
   122  001C                     	;# 
   123  001D                     	;# 
   124  001E                     	;# 
   125  001F                     	;# 
   126  008C                     	;# 
   127  008E                     	;# 
   128  0090                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0094                     	;# 
   133  0097                     	;# 
   134  009B                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  010C                     	;# 
   141  010E                     	;# 
   142  0111                     	;# 
   143  0112                     	;# 
   144  0113                     	;# 
   145  0114                     	;# 
   146  0115                     	;# 
   147  0116                     	;# 
   148  0117                     	;# 
   149  0118                     	;# 
   150  0119                     	;# 
   151  018C                     	;# 
   152  018E                     	;# 
   153  0197                     	;# 
   154  0199                     	;# 
   155  0199                     	;# 
   156  0199                     	;# 
   157  019A                     	;# 
   158  019A                     	;# 
   159  019A                     	;# 
   160  019B                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019C                     	;# 
   166  019C                     	;# 
   167  019C                     	;# 
   168  019D                     	;# 
   169  019D                     	;# 
   170  019D                     	;# 
   171  019E                     	;# 
   172  019E                     	;# 
   173  019E                     	;# 
   174  019F                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  019F                     	;# 
   179  020C                     	;# 
   180  020E                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0215                     	;# 
   193  0216                     	;# 
   194  0216                     	;# 
   195  0217                     	;# 
   196  0217                     	;# 
   197  028C                     	;# 
   198  028E                     	;# 
   199  0291                     	;# 
   200  0291                     	;# 
   201  0292                     	;# 
   202  0293                     	;# 
   203  0294                     	;# 
   204  0295                     	;# 
   205  0295                     	;# 
   206  0296                     	;# 
   207  0297                     	;# 
   208  0298                     	;# 
   209  030C                     	;# 
   210  030E                     	;# 
   211  038C                     	;# 
   212  038E                     	;# 
   213  0391                     	;# 
   214  0392                     	;# 
   215  0393                     	;# 
   216  0397                     	;# 
   217  0398                     	;# 
   218  0399                     	;# 
   219  039A                     	;# 
   220  039C                     	;# 
   221  039D                     	;# 
   222  039E                     	;# 
   223  039F                     	;# 
   224  0498                     	;# 
   225  0498                     	;# 
   226  0499                     	;# 
   227  049A                     	;# 
   228  049B                     	;# 
   229  049B                     	;# 
   230  049C                     	;# 
   231  049D                     	;# 
   232  049E                     	;# 
   233  049F                     	;# 
   234  0617                     	;# 
   235  0618                     	;# 
   236  0619                     	;# 
   237  0619                     	;# 
   238  061A                     	;# 
   239  061B                     	;# 
   240  061C                     	;# 
   241  061C                     	;# 
   242  0691                     	;# 
   243  0692                     	;# 
   244  0693                     	;# 
   245  0694                     	;# 
   246  0695                     	;# 
   247  0696                     	;# 
   248  0697                     	;# 
   249  0698                     	;# 
   250  0699                     	;# 
   251  0891                     	;# 
   252  0891                     	;# 
   253  0891                     	;# 
   254  0891                     	;# 
   255  0891                     	;# 
   256  0891                     	;# 
   257  0892                     	;# 
   258  0892                     	;# 
   259  0892                     	;# 
   260  0893                     	;# 
   261  0893                     	;# 
   262  0893                     	;# 
   263  0893                     	;# 
   264  0893                     	;# 
   265  0893                     	;# 
   266  0894                     	;# 
   267  0894                     	;# 
   268  0894                     	;# 
   269  0895                     	;# 
   270  0895                     	;# 
   271  0895                     	;# 
   272  0896                     	;# 
   273  0896                     	;# 
   274  0896                     	;# 
   275  089B                     	;# 
   276  0911                     	;# 
   277  0912                     	;# 
   278  0913                     	;# 
   279  0914                     	;# 
   280  0915                     	;# 
   281  0916                     	;# 
   282  0918                     	;# 
   283  0919                     	;# 
   284  091A                     	;# 
   285  091B                     	;# 
   286  091C                     	;# 
   287  091D                     	;# 
   288  091E                     	;# 
   289  091F                     	;# 
   290  0E0F                     	;# 
   291  0E10                     	;# 
   292  0E11                     	;# 
   293  0E12                     	;# 
   294  0E13                     	;# 
   295  0E14                     	;# 
   296  0E15                     	;# 
   297  0E18                     	;# 
   298  0E1A                     	;# 
   299  0E1B                     	;# 
   300  0E1C                     	;# 
   301  0E20                     	;# 
   302  0E21                     	;# 
   303  0E22                     	;# 
   304  0E24                     	;# 
   305  0E25                     	;# 
   306  0E28                     	;# 
   307  0E29                     	;# 
   308  0E2A                     	;# 
   309  0E2B                     	;# 
   310  0E90                     	;# 
   311  0E91                     	;# 
   312  0E92                     	;# 
   313  0E94                     	;# 
   314  0E95                     	;# 
   315  0EA0                     	;# 
   316  0EA1                     	;# 
   317  0EA2                     	;# 
   318  0EA3                     	;# 
   319  0EA4                     	;# 
   320  0EA5                     	;# 
   321  0F0F                     	;# 
   322  0F10                     	;# 
   323  0F11                     	;# 
   324  0F12                     	;# 
   325  0F13                     	;# 
   326  0F14                     	;# 
   327  0F15                     	;# 
   328  0F16                     	;# 
   329  0F17                     	;# 
   330  0F18                     	;# 
   331  0F19                     	;# 
   332  0F1A                     	;# 
   333  0F1B                     	;# 
   334  0F1C                     	;# 
   335  0F1D                     	;# 
   336  0F1E                     	;# 
   337  0F1F                     	;# 
   338  0F20                     	;# 
   339  0F21                     	;# 
   340  0F22                     	;# 
   341  0F23                     	;# 
   342  0FE4                     	;# 
   343  0FE5                     	;# 
   344  0FE6                     	;# 
   345  0FE7                     	;# 
   346  0FE8                     	;# 
   347  0FE9                     	;# 
   348  0FEA                     	;# 
   349  0FEB                     	;# 
   350  0FED                     	;# 
   351  0FEE                     	;# 
   352  0FEF                     	;# 
   353  0000                     	;# 
   354  0001                     	;# 
   355  0002                     	;# 
   356  0003                     	;# 
   357  0004                     	;# 
   358  0005                     	;# 
   359  0006                     	;# 
   360  0007                     	;# 
   361  0008                     	;# 
   362  0009                     	;# 
   363  000A                     	;# 
   364  000B                     	;# 
   365  000C                     	;# 
   366  000E                     	;# 
   367  0010                     	;# 
   368  0011                     	;# 
   369  0012                     	;# 
   370  0013                     	;# 
   371  0014                     	;# 
   372  0015                     	;# 
   373  0015                     	;# 
   374  0016                     	;# 
   375  0016                     	;# 
   376  0017                     	;# 
   377  0018                     	;# 
   378  0019                     	;# 
   379  0019                     	;# 
   380  001A                     	;# 
   381  001B                     	;# 
   382  001C                     	;# 
   383  001D                     	;# 
   384  001E                     	;# 
   385  001F                     	;# 
   386  008C                     	;# 
   387  008E                     	;# 
   388  0090                     	;# 
   389  0091                     	;# 
   390  0092                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0097                     	;# 
   394  009B                     	;# 
   395  009B                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  010C                     	;# 
   401  010E                     	;# 
   402  0111                     	;# 
   403  0112                     	;# 
   404  0113                     	;# 
   405  0114                     	;# 
   406  0115                     	;# 
   407  0116                     	;# 
   408  0117                     	;# 
   409  0118                     	;# 
   410  0119                     	;# 
   411  018C                     	;# 
   412  018E                     	;# 
   413  0197                     	;# 
   414  0199                     	;# 
   415  0199                     	;# 
   416  0199                     	;# 
   417  019A                     	;# 
   418  019A                     	;# 
   419  019A                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019C                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019D                     	;# 
   430  019D                     	;# 
   431  019E                     	;# 
   432  019E                     	;# 
   433  019E                     	;# 
   434  019F                     	;# 
   435  019F                     	;# 
   436  019F                     	;# 
   437  019F                     	;# 
   438  019F                     	;# 
   439  020C                     	;# 
   440  020E                     	;# 
   441  0211                     	;# 
   442  0211                     	;# 
   443  0212                     	;# 
   444  0212                     	;# 
   445  0213                     	;# 
   446  0213                     	;# 
   447  0214                     	;# 
   448  0214                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0215                     	;# 
   452  0215                     	;# 
   453  0216                     	;# 
   454  0216                     	;# 
   455  0217                     	;# 
   456  0217                     	;# 
   457  028C                     	;# 
   458  028E                     	;# 
   459  0291                     	;# 
   460  0291                     	;# 
   461  0292                     	;# 
   462  0293                     	;# 
   463  0294                     	;# 
   464  0295                     	;# 
   465  0295                     	;# 
   466  0296                     	;# 
   467  0297                     	;# 
   468  0298                     	;# 
   469  030C                     	;# 
   470  030E                     	;# 
   471  038C                     	;# 
   472  038E                     	;# 
   473  0391                     	;# 
   474  0392                     	;# 
   475  0393                     	;# 
   476  0397                     	;# 
   477  0398                     	;# 
   478  0399                     	;# 
   479  039A                     	;# 
   480  039C                     	;# 
   481  039D                     	;# 
   482  039E                     	;# 
   483  039F                     	;# 
   484  0498                     	;# 
   485  0498                     	;# 
   486  0499                     	;# 
   487  049A                     	;# 
   488  049B                     	;# 
   489  049B                     	;# 
   490  049C                     	;# 
   491  049D                     	;# 
   492  049E                     	;# 
   493  049F                     	;# 
   494  0617                     	;# 
   495  0618                     	;# 
   496  0619                     	;# 
   497  0619                     	;# 
   498  061A                     	;# 
   499  061B                     	;# 
   500  061C                     	;# 
   501  061C                     	;# 
   502  0691                     	;# 
   503  0692                     	;# 
   504  0693                     	;# 
   505  0694                     	;# 
   506  0695                     	;# 
   507  0696                     	;# 
   508  0697                     	;# 
   509  0698                     	;# 
   510  0699                     	;# 
   511  0891                     	;# 
   512  0891                     	;# 
   513  0891                     	;# 
   514  0891                     	;# 
   515  0891                     	;# 
   516  0891                     	;# 
   517  0892                     	;# 
   518  0892                     	;# 
   519  0892                     	;# 
   520  0893                     	;# 
   521  0893                     	;# 
   522  0893                     	;# 
   523  0893                     	;# 
   524  0893                     	;# 
   525  0893                     	;# 
   526  0894                     	;# 
   527  0894                     	;# 
   528  0894                     	;# 
   529  0895                     	;# 
   530  0895                     	;# 
   531  0895                     	;# 
   532  0896                     	;# 
   533  0896                     	;# 
   534  0896                     	;# 
   535  089B                     	;# 
   536  0911                     	;# 
   537  0912                     	;# 
   538  0913                     	;# 
   539  0914                     	;# 
   540  0915                     	;# 
   541  0916                     	;# 
   542  0918                     	;# 
   543  0919                     	;# 
   544  091A                     	;# 
   545  091B                     	;# 
   546  091C                     	;# 
   547  091D                     	;# 
   548  091E                     	;# 
   549  091F                     	;# 
   550  0E0F                     	;# 
   551  0E10                     	;# 
   552  0E11                     	;# 
   553  0E12                     	;# 
   554  0E13                     	;# 
   555  0E14                     	;# 
   556  0E15                     	;# 
   557  0E18                     	;# 
   558  0E1A                     	;# 
   559  0E1B                     	;# 
   560  0E1C                     	;# 
   561  0E20                     	;# 
   562  0E21                     	;# 
   563  0E22                     	;# 
   564  0E24                     	;# 
   565  0E25                     	;# 
   566  0E28                     	;# 
   567  0E29                     	;# 
   568  0E2A                     	;# 
   569  0E2B                     	;# 
   570  0E90                     	;# 
   571  0E91                     	;# 
   572  0E92                     	;# 
   573  0E94                     	;# 
   574  0E95                     	;# 
   575  0EA0                     	;# 
   576  0EA1                     	;# 
   577  0EA2                     	;# 
   578  0EA3                     	;# 
   579  0EA4                     	;# 
   580  0EA5                     	;# 
   581  0F0F                     	;# 
   582  0F10                     	;# 
   583  0F11                     	;# 
   584  0F12                     	;# 
   585  0F13                     	;# 
   586  0F14                     	;# 
   587  0F15                     	;# 
   588  0F16                     	;# 
   589  0F17                     	;# 
   590  0F18                     	;# 
   591  0F19                     	;# 
   592  0F1A                     	;# 
   593  0F1B                     	;# 
   594  0F1C                     	;# 
   595  0F1D                     	;# 
   596  0F1E                     	;# 
   597  0F1F                     	;# 
   598  0F20                     	;# 
   599  0F21                     	;# 
   600  0F22                     	;# 
   601  0F23                     	;# 
   602  0FE4                     	;# 
   603  0FE5                     	;# 
   604  0FE6                     	;# 
   605  0FE7                     	;# 
   606  0FE8                     	;# 
   607  0FE9                     	;# 
   608  0FEA                     	;# 
   609  0FEB                     	;# 
   610  0FED                     	;# 
   611  0FEE                     	;# 
   612  0FEF                     	;# 
   613  0000                     	;# 
   614  0001                     	;# 
   615  0002                     	;# 
   616  0003                     	;# 
   617  0004                     	;# 
   618  0005                     	;# 
   619  0006                     	;# 
   620  0007                     	;# 
   621  0008                     	;# 
   622  0009                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0013                     	;# 
   631  0014                     	;# 
   632  0015                     	;# 
   633  0015                     	;# 
   634  0016                     	;# 
   635  0016                     	;# 
   636  0017                     	;# 
   637  0018                     	;# 
   638  0019                     	;# 
   639  0019                     	;# 
   640  001A                     	;# 
   641  001B                     	;# 
   642  001C                     	;# 
   643  001D                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  008C                     	;# 
   647  008E                     	;# 
   648  0090                     	;# 
   649  0091                     	;# 
   650  0092                     	;# 
   651  0093                     	;# 
   652  0094                     	;# 
   653  0097                     	;# 
   654  009B                     	;# 
   655  009B                     	;# 
   656  009C                     	;# 
   657  009D                     	;# 
   658  009E                     	;# 
   659  009F                     	;# 
   660  010C                     	;# 
   661  010E                     	;# 
   662  0111                     	;# 
   663  0112                     	;# 
   664  0113                     	;# 
   665  0114                     	;# 
   666  0115                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  0118                     	;# 
   670  0119                     	;# 
   671  018C                     	;# 
   672  018E                     	;# 
   673  0197                     	;# 
   674  0199                     	;# 
   675  0199                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019A                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019C                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019D                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019E                     	;# 
   693  019E                     	;# 
   694  019F                     	;# 
   695  019F                     	;# 
   696  019F                     	;# 
   697  019F                     	;# 
   698  019F                     	;# 
   699  020C                     	;# 
   700  020E                     	;# 
   701  0211                     	;# 
   702  0211                     	;# 
   703  0212                     	;# 
   704  0212                     	;# 
   705  0213                     	;# 
   706  0213                     	;# 
   707  0214                     	;# 
   708  0214                     	;# 
   709  0215                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0216                     	;# 
   714  0216                     	;# 
   715  0217                     	;# 
   716  0217                     	;# 
   717  028C                     	;# 
   718  028E                     	;# 
   719  0291                     	;# 
   720  0291                     	;# 
   721  0292                     	;# 
   722  0293                     	;# 
   723  0294                     	;# 
   724  0295                     	;# 
   725  0295                     	;# 
   726  0296                     	;# 
   727  0297                     	;# 
   728  0298                     	;# 
   729  030C                     	;# 
   730  030E                     	;# 
   731  038C                     	;# 
   732  038E                     	;# 
   733  0391                     	;# 
   734  0392                     	;# 
   735  0393                     	;# 
   736  0397                     	;# 
   737  0398                     	;# 
   738  0399                     	;# 
   739  039A                     	;# 
   740  039C                     	;# 
   741  039D                     	;# 
   742  039E                     	;# 
   743  039F                     	;# 
   744  0498                     	;# 
   745  0498                     	;# 
   746  0499                     	;# 
   747  049A                     	;# 
   748  049B                     	;# 
   749  049B                     	;# 
   750  049C                     	;# 
   751  049D                     	;# 
   752  049E                     	;# 
   753  049F                     	;# 
   754  0617                     	;# 
   755  0618                     	;# 
   756  0619                     	;# 
   757  0619                     	;# 
   758  061A                     	;# 
   759  061B                     	;# 
   760  061C                     	;# 
   761  061C                     	;# 
   762  0691                     	;# 
   763  0692                     	;# 
   764  0693                     	;# 
   765  0694                     	;# 
   766  0695                     	;# 
   767  0696                     	;# 
   768  0697                     	;# 
   769  0698                     	;# 
   770  0699                     	;# 
   771  0891                     	;# 
   772  0891                     	;# 
   773  0891                     	;# 
   774  0891                     	;# 
   775  0891                     	;# 
   776  0891                     	;# 
   777  0892                     	;# 
   778  0892                     	;# 
   779  0892                     	;# 
   780  0893                     	;# 
   781  0893                     	;# 
   782  0893                     	;# 
   783  0893                     	;# 
   784  0893                     	;# 
   785  0893                     	;# 
   786  0894                     	;# 
   787  0894                     	;# 
   788  0894                     	;# 
   789  0895                     	;# 
   790  0895                     	;# 
   791  0895                     	;# 
   792  0896                     	;# 
   793  0896                     	;# 
   794  0896                     	;# 
   795  089B                     	;# 
   796  0911                     	;# 
   797  0912                     	;# 
   798  0913                     	;# 
   799  0914                     	;# 
   800  0915                     	;# 
   801  0916                     	;# 
   802  0918                     	;# 
   803  0919                     	;# 
   804  091A                     	;# 
   805  091B                     	;# 
   806  091C                     	;# 
   807  091D                     	;# 
   808  091E                     	;# 
   809  091F                     	;# 
   810  0E0F                     	;# 
   811  0E10                     	;# 
   812  0E11                     	;# 
   813  0E12                     	;# 
   814  0E13                     	;# 
   815  0E14                     	;# 
   816  0E15                     	;# 
   817  0E18                     	;# 
   818  0E1A                     	;# 
   819  0E1B                     	;# 
   820  0E1C                     	;# 
   821  0E20                     	;# 
   822  0E21                     	;# 
   823  0E22                     	;# 
   824  0E24                     	;# 
   825  0E25                     	;# 
   826  0E28                     	;# 
   827  0E29                     	;# 
   828  0E2A                     	;# 
   829  0E2B                     	;# 
   830  0E90                     	;# 
   831  0E91                     	;# 
   832  0E92                     	;# 
   833  0E94                     	;# 
   834  0E95                     	;# 
   835  0EA0                     	;# 
   836  0EA1                     	;# 
   837  0EA2                     	;# 
   838  0EA3                     	;# 
   839  0EA4                     	;# 
   840  0EA5                     	;# 
   841  0F0F                     	;# 
   842  0F10                     	;# 
   843  0F11                     	;# 
   844  0F12                     	;# 
   845  0F13                     	;# 
   846  0F14                     	;# 
   847  0F15                     	;# 
   848  0F16                     	;# 
   849  0F17                     	;# 
   850  0F18                     	;# 
   851  0F19                     	;# 
   852  0F1A                     	;# 
   853  0F1B                     	;# 
   854  0F1C                     	;# 
   855  0F1D                     	;# 
   856  0F1E                     	;# 
   857  0F1F                     	;# 
   858  0F20                     	;# 
   859  0F21                     	;# 
   860  0F22                     	;# 
   861  0F23                     	;# 
   862  0FE4                     	;# 
   863  0FE5                     	;# 
   864  0FE6                     	;# 
   865  0FE7                     	;# 
   866  0FE8                     	;# 
   867  0FE9                     	;# 
   868  0FEA                     	;# 
   869  0FEB                     	;# 
   870  0FED                     	;# 
   871  0FEE                     	;# 
   872  0FEF                     	;# 
   873  0000                     	;# 
   874  0001                     	;# 
   875  0002                     	;# 
   876  0003                     	;# 
   877  0004                     	;# 
   878  0005                     	;# 
   879  0006                     	;# 
   880  0007                     	;# 
   881  0008                     	;# 
   882  0009                     	;# 
   883  000A                     	;# 
   884  000B                     	;# 
   885  000C                     	;# 
   886  000E                     	;# 
   887  0010                     	;# 
   888  0011                     	;# 
   889  0012                     	;# 
   890  0013                     	;# 
   891  0014                     	;# 
   892  0015                     	;# 
   893  0015                     	;# 
   894  0016                     	;# 
   895  0016                     	;# 
   896  0017                     	;# 
   897  0018                     	;# 
   898  0019                     	;# 
   899  0019                     	;# 
   900  001A                     	;# 
   901  001B                     	;# 
   902  001C                     	;# 
   903  001D                     	;# 
   904  001E                     	;# 
   905  001F                     	;# 
   906  008C                     	;# 
   907  008E                     	;# 
   908  0090                     	;# 
   909  0091                     	;# 
   910  0092                     	;# 
   911  0093                     	;# 
   912  0094                     	;# 
   913  0097                     	;# 
   914  009B                     	;# 
   915  009B                     	;# 
   916  009C                     	;# 
   917  009D                     	;# 
   918  009E                     	;# 
   919  009F                     	;# 
   920  010C                     	;# 
   921  010E                     	;# 
   922  0111                     	;# 
   923  0112                     	;# 
   924  0113                     	;# 
   925  0114                     	;# 
   926  0115                     	;# 
   927  0116                     	;# 
   928  0117                     	;# 
   929  0118                     	;# 
   930  0119                     	;# 
   931  018C                     	;# 
   932  018E                     	;# 
   933  0197                     	;# 
   934  0199                     	;# 
   935  0199                     	;# 
   936  0199                     	;# 
   937  019A                     	;# 
   938  019A                     	;# 
   939  019A                     	;# 
   940  019B                     	;# 
   941  019B                     	;# 
   942  019B                     	;# 
   943  019B                     	;# 
   944  019B                     	;# 
   945  019C                     	;# 
   946  019C                     	;# 
   947  019C                     	;# 
   948  019D                     	;# 
   949  019D                     	;# 
   950  019D                     	;# 
   951  019E                     	;# 
   952  019E                     	;# 
   953  019E                     	;# 
   954  019F                     	;# 
   955  019F                     	;# 
   956  019F                     	;# 
   957  019F                     	;# 
   958  019F                     	;# 
   959  020C                     	;# 
   960  020E                     	;# 
   961  0211                     	;# 
   962  0211                     	;# 
   963  0212                     	;# 
   964  0212                     	;# 
   965  0213                     	;# 
   966  0213                     	;# 
   967  0214                     	;# 
   968  0214                     	;# 
   969  0215                     	;# 
   970  0215                     	;# 
   971  0215                     	;# 
   972  0215                     	;# 
   973  0216                     	;# 
   974  0216                     	;# 
   975  0217                     	;# 
   976  0217                     	;# 
   977  028C                     	;# 
   978  028E                     	;# 
   979  0291                     	;# 
   980  0291                     	;# 
   981  0292                     	;# 
   982  0293                     	;# 
   983  0294                     	;# 
   984  0295                     	;# 
   985  0295                     	;# 
   986  0296                     	;# 
   987  0297                     	;# 
   988  0298                     	;# 
   989  030C                     	;# 
   990  030E                     	;# 
   991  038C                     	;# 
   992  038E                     	;# 
   993  0391                     	;# 
   994  0392                     	;# 
   995  0393                     	;# 
   996  0397                     	;# 
   997  0398                     	;# 
   998  0399                     	;# 
   999  039A                     	;# 
  1000  039C                     	;# 
  1001  039D                     	;# 
  1002  039E                     	;# 
  1003  039F                     	;# 
  1004  0498                     	;# 
  1005  0498                     	;# 
  1006  0499                     	;# 
  1007  049A                     	;# 
  1008  049B                     	;# 
  1009  049B                     	;# 
  1010  049C                     	;# 
  1011  049D                     	;# 
  1012  049E                     	;# 
  1013  049F                     	;# 
  1014  0617                     	;# 
  1015  0618                     	;# 
  1016  0619                     	;# 
  1017  0619                     	;# 
  1018  061A                     	;# 
  1019  061B                     	;# 
  1020  061C                     	;# 
  1021  061C                     	;# 
  1022  0691                     	;# 
  1023  0692                     	;# 
  1024  0693                     	;# 
  1025  0694                     	;# 
  1026  0695                     	;# 
  1027  0696                     	;# 
  1028  0697                     	;# 
  1029  0698                     	;# 
  1030  0699                     	;# 
  1031  0891                     	;# 
  1032  0891                     	;# 
  1033  0891                     	;# 
  1034  0891                     	;# 
  1035  0891                     	;# 
  1036  0891                     	;# 
  1037  0892                     	;# 
  1038  0892                     	;# 
  1039  0892                     	;# 
  1040  0893                     	;# 
  1041  0893                     	;# 
  1042  0893                     	;# 
  1043  0893                     	;# 
  1044  0893                     	;# 
  1045  0893                     	;# 
  1046  0894                     	;# 
  1047  0894                     	;# 
  1048  0894                     	;# 
  1049  0895                     	;# 
  1050  0895                     	;# 
  1051  0895                     	;# 
  1052  0896                     	;# 
  1053  0896                     	;# 
  1054  0896                     	;# 
  1055  089B                     	;# 
  1056  0911                     	;# 
  1057  0912                     	;# 
  1058  0913                     	;# 
  1059  0914                     	;# 
  1060  0915                     	;# 
  1061  0916                     	;# 
  1062  0918                     	;# 
  1063  0919                     	;# 
  1064  091A                     	;# 
  1065  091B                     	;# 
  1066  091C                     	;# 
  1067  091D                     	;# 
  1068  091E                     	;# 
  1069  091F                     	;# 
  1070  0E0F                     	;# 
  1071  0E10                     	;# 
  1072  0E11                     	;# 
  1073  0E12                     	;# 
  1074  0E13                     	;# 
  1075  0E14                     	;# 
  1076  0E15                     	;# 
  1077  0E18                     	;# 
  1078  0E1A                     	;# 
  1079  0E1B                     	;# 
  1080  0E1C                     	;# 
  1081  0E20                     	;# 
  1082  0E21                     	;# 
  1083  0E22                     	;# 
  1084  0E24                     	;# 
  1085  0E25                     	;# 
  1086  0E28                     	;# 
  1087  0E29                     	;# 
  1088  0E2A                     	;# 
  1089  0E2B                     	;# 
  1090  0E90                     	;# 
  1091  0E91                     	;# 
  1092  0E92                     	;# 
  1093  0E94                     	;# 
  1094  0E95                     	;# 
  1095  0EA0                     	;# 
  1096  0EA1                     	;# 
  1097  0EA2                     	;# 
  1098  0EA3                     	;# 
  1099  0EA4                     	;# 
  1100  0EA5                     	;# 
  1101  0F0F                     	;# 
  1102  0F10                     	;# 
  1103  0F11                     	;# 
  1104  0F12                     	;# 
  1105  0F13                     	;# 
  1106  0F14                     	;# 
  1107  0F15                     	;# 
  1108  0F16                     	;# 
  1109  0F17                     	;# 
  1110  0F18                     	;# 
  1111  0F19                     	;# 
  1112  0F1A                     	;# 
  1113  0F1B                     	;# 
  1114  0F1C                     	;# 
  1115  0F1D                     	;# 
  1116  0F1E                     	;# 
  1117  0F1F                     	;# 
  1118  0F20                     	;# 
  1119  0F21                     	;# 
  1120  0F22                     	;# 
  1121  0F23                     	;# 
  1122  0FE4                     	;# 
  1123  0FE5                     	;# 
  1124  0FE6                     	;# 
  1125  0FE7                     	;# 
  1126  0FE8                     	;# 
  1127  0FE9                     	;# 
  1128  0FEA                     	;# 
  1129  0FEB                     	;# 
  1130  0FED                     	;# 
  1131  0FEE                     	;# 
  1132  0FEF                     	;# 
  1133  0000                     	;# 
  1134  0001                     	;# 
  1135  0002                     	;# 
  1136  0003                     	;# 
  1137  0004                     	;# 
  1138  0005                     	;# 
  1139  0006                     	;# 
  1140  0007                     	;# 
  1141  0008                     	;# 
  1142  0009                     	;# 
  1143  000A                     	;# 
  1144  000B                     	;# 
  1145  000C                     	;# 
  1146  000E                     	;# 
  1147  0010                     	;# 
  1148  0011                     	;# 
  1149  0012                     	;# 
  1150  0013                     	;# 
  1151  0014                     	;# 
  1152  0015                     	;# 
  1153  0015                     	;# 
  1154  0016                     	;# 
  1155  0016                     	;# 
  1156  0017                     	;# 
  1157  0018                     	;# 
  1158  0019                     	;# 
  1159  0019                     	;# 
  1160  001A                     	;# 
  1161  001B                     	;# 
  1162  001C                     	;# 
  1163  001D                     	;# 
  1164  001E                     	;# 
  1165  001F                     	;# 
  1166  008C                     	;# 
  1167  008E                     	;# 
  1168  0090                     	;# 
  1169  0091                     	;# 
  1170  0092                     	;# 
  1171  0093                     	;# 
  1172  0094                     	;# 
  1173  0097                     	;# 
  1174  009B                     	;# 
  1175  009B                     	;# 
  1176  009C                     	;# 
  1177  009D                     	;# 
  1178  009E                     	;# 
  1179  009F                     	;# 
  1180  010C                     	;# 
  1181  010E                     	;# 
  1182  0111                     	;# 
  1183  0112                     	;# 
  1184  0113                     	;# 
  1185  0114                     	;# 
  1186  0115                     	;# 
  1187  0116                     	;# 
  1188  0117                     	;# 
  1189  0118                     	;# 
  1190  0119                     	;# 
  1191  018C                     	;# 
  1192  018E                     	;# 
  1193  0197                     	;# 
  1194  0199                     	;# 
  1195  0199                     	;# 
  1196  0199                     	;# 
  1197  019A                     	;# 
  1198  019A                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019C                     	;# 
  1206  019C                     	;# 
  1207  019C                     	;# 
  1208  019D                     	;# 
  1209  019D                     	;# 
  1210  019D                     	;# 
  1211  019E                     	;# 
  1212  019E                     	;# 
  1213  019E                     	;# 
  1214  019F                     	;# 
  1215  019F                     	;# 
  1216  019F                     	;# 
  1217  019F                     	;# 
  1218  019F                     	;# 
  1219  020C                     	;# 
  1220  020E                     	;# 
  1221  0211                     	;# 
  1222  0211                     	;# 
  1223  0212                     	;# 
  1224  0212                     	;# 
  1225  0213                     	;# 
  1226  0213                     	;# 
  1227  0214                     	;# 
  1228  0214                     	;# 
  1229  0215                     	;# 
  1230  0215                     	;# 
  1231  0215                     	;# 
  1232  0215                     	;# 
  1233  0216                     	;# 
  1234  0216                     	;# 
  1235  0217                     	;# 
  1236  0217                     	;# 
  1237  028C                     	;# 
  1238  028E                     	;# 
  1239  0291                     	;# 
  1240  0291                     	;# 
  1241  0292                     	;# 
  1242  0293                     	;# 
  1243  0294                     	;# 
  1244  0295                     	;# 
  1245  0295                     	;# 
  1246  0296                     	;# 
  1247  0297                     	;# 
  1248  0298                     	;# 
  1249  030C                     	;# 
  1250  030E                     	;# 
  1251  038C                     	;# 
  1252  038E                     	;# 
  1253  0391                     	;# 
  1254  0392                     	;# 
  1255  0393                     	;# 
  1256  0397                     	;# 
  1257  0398                     	;# 
  1258  0399                     	;# 
  1259  039A                     	;# 
  1260  039C                     	;# 
  1261  039D                     	;# 
  1262  039E                     	;# 
  1263  039F                     	;# 
  1264  0498                     	;# 
  1265  0498                     	;# 
  1266  0499                     	;# 
  1267  049A                     	;# 
  1268  049B                     	;# 
  1269  049B                     	;# 
  1270  049C                     	;# 
  1271  049D                     	;# 
  1272  049E                     	;# 
  1273  049F                     	;# 
  1274  0617                     	;# 
  1275  0618                     	;# 
  1276  0619                     	;# 
  1277  0619                     	;# 
  1278  061A                     	;# 
  1279  061B                     	;# 
  1280  061C                     	;# 
  1281  061C                     	;# 
  1282  0691                     	;# 
  1283  0692                     	;# 
  1284  0693                     	;# 
  1285  0694                     	;# 
  1286  0695                     	;# 
  1287  0696                     	;# 
  1288  0697                     	;# 
  1289  0698                     	;# 
  1290  0699                     	;# 
  1291  0891                     	;# 
  1292  0891                     	;# 
  1293  0891                     	;# 
  1294  0891                     	;# 
  1295  0891                     	;# 
  1296  0891                     	;# 
  1297  0892                     	;# 
  1298  0892                     	;# 
  1299  0892                     	;# 
  1300  0893                     	;# 
  1301  0893                     	;# 
  1302  0893                     	;# 
  1303  0893                     	;# 
  1304  0893                     	;# 
  1305  0893                     	;# 
  1306  0894                     	;# 
  1307  0894                     	;# 
  1308  0894                     	;# 
  1309  0895                     	;# 
  1310  0895                     	;# 
  1311  0895                     	;# 
  1312  0896                     	;# 
  1313  0896                     	;# 
  1314  0896                     	;# 
  1315  089B                     	;# 
  1316  0911                     	;# 
  1317  0912                     	;# 
  1318  0913                     	;# 
  1319  0914                     	;# 
  1320  0915                     	;# 
  1321  0916                     	;# 
  1322  0918                     	;# 
  1323  0919                     	;# 
  1324  091A                     	;# 
  1325  091B                     	;# 
  1326  091C                     	;# 
  1327  091D                     	;# 
  1328  091E                     	;# 
  1329  091F                     	;# 
  1330  0E0F                     	;# 
  1331  0E10                     	;# 
  1332  0E11                     	;# 
  1333  0E12                     	;# 
  1334  0E13                     	;# 
  1335  0E14                     	;# 
  1336  0E15                     	;# 
  1337  0E18                     	;# 
  1338  0E1A                     	;# 
  1339  0E1B                     	;# 
  1340  0E1C                     	;# 
  1341  0E20                     	;# 
  1342  0E21                     	;# 
  1343  0E22                     	;# 
  1344  0E24                     	;# 
  1345  0E25                     	;# 
  1346  0E28                     	;# 
  1347  0E29                     	;# 
  1348  0E2A                     	;# 
  1349  0E2B                     	;# 
  1350  0E90                     	;# 
  1351  0E91                     	;# 
  1352  0E92                     	;# 
  1353  0E94                     	;# 
  1354  0E95                     	;# 
  1355  0EA0                     	;# 
  1356  0EA1                     	;# 
  1357  0EA2                     	;# 
  1358  0EA3                     	;# 
  1359  0EA4                     	;# 
  1360  0EA5                     	;# 
  1361  0F0F                     	;# 
  1362  0F10                     	;# 
  1363  0F11                     	;# 
  1364  0F12                     	;# 
  1365  0F13                     	;# 
  1366  0F14                     	;# 
  1367  0F15                     	;# 
  1368  0F16                     	;# 
  1369  0F17                     	;# 
  1370  0F18                     	;# 
  1371  0F19                     	;# 
  1372  0F1A                     	;# 
  1373  0F1B                     	;# 
  1374  0F1C                     	;# 
  1375  0F1D                     	;# 
  1376  0F1E                     	;# 
  1377  0F1F                     	;# 
  1378  0F20                     	;# 
  1379  0F21                     	;# 
  1380  0F22                     	;# 
  1381  0F23                     	;# 
  1382  0FE4                     	;# 
  1383  0FE5                     	;# 
  1384  0FE6                     	;# 
  1385  0FE7                     	;# 
  1386  0FE8                     	;# 
  1387  0FE9                     	;# 
  1388  0FEA                     	;# 
  1389  0FEB                     	;# 
  1390  0FED                     	;# 
  1391  0FEE                     	;# 
  1392  0FEF                     	;# 
  1393  0000                     	;# 
  1394  0001                     	;# 
  1395  0002                     	;# 
  1396  0003                     	;# 
  1397  0004                     	;# 
  1398  0005                     	;# 
  1399  0006                     	;# 
  1400  0007                     	;# 
  1401  0008                     	;# 
  1402  0009                     	;# 
  1403  000A                     	;# 
  1404  000B                     	;# 
  1405  000C                     	;# 
  1406  000E                     	;# 
  1407  0010                     	;# 
  1408  0011                     	;# 
  1409  0012                     	;# 
  1410  0013                     	;# 
  1411  0014                     	;# 
  1412  0015                     	;# 
  1413  0015                     	;# 
  1414  0016                     	;# 
  1415  0016                     	;# 
  1416  0017                     	;# 
  1417  0018                     	;# 
  1418  0019                     	;# 
  1419  0019                     	;# 
  1420  001A                     	;# 
  1421  001B                     	;# 
  1422  001C                     	;# 
  1423  001D                     	;# 
  1424  001E                     	;# 
  1425  001F                     	;# 
  1426  008C                     	;# 
  1427  008E                     	;# 
  1428  0090                     	;# 
  1429  0091                     	;# 
  1430  0092                     	;# 
  1431  0093                     	;# 
  1432  0094                     	;# 
  1433  0097                     	;# 
  1434  009B                     	;# 
  1435  009B                     	;# 
  1436  009C                     	;# 
  1437  009D                     	;# 
  1438  009E                     	;# 
  1439  009F                     	;# 
  1440  010C                     	;# 
  1441  010E                     	;# 
  1442  0111                     	;# 
  1443  0112                     	;# 
  1444  0113                     	;# 
  1445  0114                     	;# 
  1446  0115                     	;# 
  1447  0116                     	;# 
  1448  0117                     	;# 
  1449  0118                     	;# 
  1450  0119                     	;# 
  1451  018C                     	;# 
  1452  018E                     	;# 
  1453  0197                     	;# 
  1454  0199                     	;# 
  1455  0199                     	;# 
  1456  0199                     	;# 
  1457  019A                     	;# 
  1458  019A                     	;# 
  1459  019A                     	;# 
  1460  019B                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019B                     	;# 
  1465  019C                     	;# 
  1466  019C                     	;# 
  1467  019C                     	;# 
  1468  019D                     	;# 
  1469  019D                     	;# 
  1470  019D                     	;# 
  1471  019E                     	;# 
  1472  019E                     	;# 
  1473  019E                     	;# 
  1474  019F                     	;# 
  1475  019F                     	;# 
  1476  019F                     	;# 
  1477  019F                     	;# 
  1478  019F                     	;# 
  1479  020C                     	;# 
  1480  020E                     	;# 
  1481  0211                     	;# 
  1482  0211                     	;# 
  1483  0212                     	;# 
  1484  0212                     	;# 
  1485  0213                     	;# 
  1486  0213                     	;# 
  1487  0214                     	;# 
  1488  0214                     	;# 
  1489  0215                     	;# 
  1490  0215                     	;# 
  1491  0215                     	;# 
  1492  0215                     	;# 
  1493  0216                     	;# 
  1494  0216                     	;# 
  1495  0217                     	;# 
  1496  0217                     	;# 
  1497  028C                     	;# 
  1498  028E                     	;# 
  1499  0291                     	;# 
  1500  0291                     	;# 
  1501  0292                     	;# 
  1502  0293                     	;# 
  1503  0294                     	;# 
  1504  0295                     	;# 
  1505  0295                     	;# 
  1506  0296                     	;# 
  1507  0297                     	;# 
  1508  0298                     	;# 
  1509  030C                     	;# 
  1510  030E                     	;# 
  1511  038C                     	;# 
  1512  038E                     	;# 
  1513  0391                     	;# 
  1514  0392                     	;# 
  1515  0393                     	;# 
  1516  0397                     	;# 
  1517  0398                     	;# 
  1518  0399                     	;# 
  1519  039A                     	;# 
  1520  039C                     	;# 
  1521  039D                     	;# 
  1522  039E                     	;# 
  1523  039F                     	;# 
  1524  0498                     	;# 
  1525  0498                     	;# 
  1526  0499                     	;# 
  1527  049A                     	;# 
  1528  049B                     	;# 
  1529  049B                     	;# 
  1530  049C                     	;# 
  1531  049D                     	;# 
  1532  049E                     	;# 
  1533  049F                     	;# 
  1534  0617                     	;# 
  1535  0618                     	;# 
  1536  0619                     	;# 
  1537  0619                     	;# 
  1538  061A                     	;# 
  1539  061B                     	;# 
  1540  061C                     	;# 
  1541  061C                     	;# 
  1542  0691                     	;# 
  1543  0692                     	;# 
  1544  0693                     	;# 
  1545  0694                     	;# 
  1546  0695                     	;# 
  1547  0696                     	;# 
  1548  0697                     	;# 
  1549  0698                     	;# 
  1550  0699                     	;# 
  1551  0891                     	;# 
  1552  0891                     	;# 
  1553  0891                     	;# 
  1554  0891                     	;# 
  1555  0891                     	;# 
  1556  0891                     	;# 
  1557  0892                     	;# 
  1558  0892                     	;# 
  1559  0892                     	;# 
  1560  0893                     	;# 
  1561  0893                     	;# 
  1562  0893                     	;# 
  1563  0893                     	;# 
  1564  0893                     	;# 
  1565  0893                     	;# 
  1566  0894                     	;# 
  1567  0894                     	;# 
  1568  0894                     	;# 
  1569  0895                     	;# 
  1570  0895                     	;# 
  1571  0895                     	;# 
  1572  0896                     	;# 
  1573  0896                     	;# 
  1574  0896                     	;# 
  1575  089B                     	;# 
  1576  0911                     	;# 
  1577  0912                     	;# 
  1578  0913                     	;# 
  1579  0914                     	;# 
  1580  0915                     	;# 
  1581  0916                     	;# 
  1582  0918                     	;# 
  1583  0919                     	;# 
  1584  091A                     	;# 
  1585  091B                     	;# 
  1586  091C                     	;# 
  1587  091D                     	;# 
  1588  091E                     	;# 
  1589  091F                     	;# 
  1590  0E0F                     	;# 
  1591  0E10                     	;# 
  1592  0E11                     	;# 
  1593  0E12                     	;# 
  1594  0E13                     	;# 
  1595  0E14                     	;# 
  1596  0E15                     	;# 
  1597  0E18                     	;# 
  1598  0E1A                     	;# 
  1599  0E1B                     	;# 
  1600  0E1C                     	;# 
  1601  0E20                     	;# 
  1602  0E21                     	;# 
  1603  0E22                     	;# 
  1604  0E24                     	;# 
  1605  0E25                     	;# 
  1606  0E28                     	;# 
  1607  0E29                     	;# 
  1608  0E2A                     	;# 
  1609  0E2B                     	;# 
  1610  0E90                     	;# 
  1611  0E91                     	;# 
  1612  0E92                     	;# 
  1613  0E94                     	;# 
  1614  0E95                     	;# 
  1615  0EA0                     	;# 
  1616  0EA1                     	;# 
  1617  0EA2                     	;# 
  1618  0EA3                     	;# 
  1619  0EA4                     	;# 
  1620  0EA5                     	;# 
  1621  0F0F                     	;# 
  1622  0F10                     	;# 
  1623  0F11                     	;# 
  1624  0F12                     	;# 
  1625  0F13                     	;# 
  1626  0F14                     	;# 
  1627  0F15                     	;# 
  1628  0F16                     	;# 
  1629  0F17                     	;# 
  1630  0F18                     	;# 
  1631  0F19                     	;# 
  1632  0F1A                     	;# 
  1633  0F1B                     	;# 
  1634  0F1C                     	;# 
  1635  0F1D                     	;# 
  1636  0F1E                     	;# 
  1637  0F1F                     	;# 
  1638  0F20                     	;# 
  1639  0F21                     	;# 
  1640  0F22                     	;# 
  1641  0F23                     	;# 
  1642  0FE4                     	;# 
  1643  0FE5                     	;# 
  1644  0FE6                     	;# 
  1645  0FE7                     	;# 
  1646  0FE8                     	;# 
  1647  0FE9                     	;# 
  1648  0FEA                     	;# 
  1649  0FEB                     	;# 
  1650  0FED                     	;# 
  1651  0FEE                     	;# 
  1652  0FEF                     	;# 
  1653  0000                     	;# 
  1654  0001                     	;# 
  1655  0002                     	;# 
  1656  0003                     	;# 
  1657  0004                     	;# 
  1658  0005                     	;# 
  1659  0006                     	;# 
  1660  0007                     	;# 
  1661  0008                     	;# 
  1662  0009                     	;# 
  1663  000A                     	;# 
  1664  000B                     	;# 
  1665  000C                     	;# 
  1666  000E                     	;# 
  1667  0010                     	;# 
  1668  0011                     	;# 
  1669  0012                     	;# 
  1670  0013                     	;# 
  1671  0014                     	;# 
  1672  0015                     	;# 
  1673  0015                     	;# 
  1674  0016                     	;# 
  1675  0016                     	;# 
  1676  0017                     	;# 
  1677  0018                     	;# 
  1678  0019                     	;# 
  1679  0019                     	;# 
  1680  001A                     	;# 
  1681  001B                     	;# 
  1682  001C                     	;# 
  1683  001D                     	;# 
  1684  001E                     	;# 
  1685  001F                     	;# 
  1686  008C                     	;# 
  1687  008E                     	;# 
  1688  0090                     	;# 
  1689  0091                     	;# 
  1690  0092                     	;# 
  1691  0093                     	;# 
  1692  0094                     	;# 
  1693  0097                     	;# 
  1694  009B                     	;# 
  1695  009B                     	;# 
  1696  009C                     	;# 
  1697  009D                     	;# 
  1698  009E                     	;# 
  1699  009F                     	;# 
  1700  010C                     	;# 
  1701  010E                     	;# 
  1702  0111                     	;# 
  1703  0112                     	;# 
  1704  0113                     	;# 
  1705  0114                     	;# 
  1706  0115                     	;# 
  1707  0116                     	;# 
  1708  0117                     	;# 
  1709  0118                     	;# 
  1710  0119                     	;# 
  1711  018C                     	;# 
  1712  018E                     	;# 
  1713  0197                     	;# 
  1714  0199                     	;# 
  1715  0199                     	;# 
  1716  0199                     	;# 
  1717  019A                     	;# 
  1718  019A                     	;# 
  1719  019A                     	;# 
  1720  019B                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019C                     	;# 
  1726  019C                     	;# 
  1727  019C                     	;# 
  1728  019D                     	;# 
  1729  019D                     	;# 
  1730  019D                     	;# 
  1731  019E                     	;# 
  1732  019E                     	;# 
  1733  019E                     	;# 
  1734  019F                     	;# 
  1735  019F                     	;# 
  1736  019F                     	;# 
  1737  019F                     	;# 
  1738  019F                     	;# 
  1739  020C                     	;# 
  1740  020E                     	;# 
  1741  0211                     	;# 
  1742  0211                     	;# 
  1743  0212                     	;# 
  1744  0212                     	;# 
  1745  0213                     	;# 
  1746  0213                     	;# 
  1747  0214                     	;# 
  1748  0214                     	;# 
  1749  0215                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  028C                     	;# 
  1758  028E                     	;# 
  1759  0291                     	;# 
  1760  0291                     	;# 
  1761  0292                     	;# 
  1762  0293                     	;# 
  1763  0294                     	;# 
  1764  0295                     	;# 
  1765  0295                     	;# 
  1766  0296                     	;# 
  1767  0297                     	;# 
  1768  0298                     	;# 
  1769  030C                     	;# 
  1770  030E                     	;# 
  1771  038C                     	;# 
  1772  038E                     	;# 
  1773  0391                     	;# 
  1774  0392                     	;# 
  1775  0393                     	;# 
  1776  0397                     	;# 
  1777  0398                     	;# 
  1778  0399                     	;# 
  1779  039A                     	;# 
  1780  039C                     	;# 
  1781  039D                     	;# 
  1782  039E                     	;# 
  1783  039F                     	;# 
  1784  0498                     	;# 
  1785  0498                     	;# 
  1786  0499                     	;# 
  1787  049A                     	;# 
  1788  049B                     	;# 
  1789  049B                     	;# 
  1790  049C                     	;# 
  1791  049D                     	;# 
  1792  049E                     	;# 
  1793  049F                     	;# 
  1794  0617                     	;# 
  1795  0618                     	;# 
  1796  0619                     	;# 
  1797  0619                     	;# 
  1798  061A                     	;# 
  1799  061B                     	;# 
  1800  061C                     	;# 
  1801  061C                     	;# 
  1802  0691                     	;# 
  1803  0692                     	;# 
  1804  0693                     	;# 
  1805  0694                     	;# 
  1806  0695                     	;# 
  1807  0696                     	;# 
  1808  0697                     	;# 
  1809  0698                     	;# 
  1810  0699                     	;# 
  1811  0891                     	;# 
  1812  0891                     	;# 
  1813  0891                     	;# 
  1814  0891                     	;# 
  1815  0891                     	;# 
  1816  0891                     	;# 
  1817  0892                     	;# 
  1818  0892                     	;# 
  1819  0892                     	;# 
  1820  0893                     	;# 
  1821  0893                     	;# 
  1822  0893                     	;# 
  1823  0893                     	;# 
  1824  0893                     	;# 
  1825  0893                     	;# 
  1826  0894                     	;# 
  1827  0894                     	;# 
  1828  0894                     	;# 
  1829  0895                     	;# 
  1830  0895                     	;# 
  1831  0895                     	;# 
  1832  0896                     	;# 
  1833  0896                     	;# 
  1834  0896                     	;# 
  1835  089B                     	;# 
  1836  0911                     	;# 
  1837  0912                     	;# 
  1838  0913                     	;# 
  1839  0914                     	;# 
  1840  0915                     	;# 
  1841  0916                     	;# 
  1842  0918                     	;# 
  1843  0919                     	;# 
  1844  091A                     	;# 
  1845  091B                     	;# 
  1846  091C                     	;# 
  1847  091D                     	;# 
  1848  091E                     	;# 
  1849  091F                     	;# 
  1850  0E0F                     	;# 
  1851  0E10                     	;# 
  1852  0E11                     	;# 
  1853  0E12                     	;# 
  1854  0E13                     	;# 
  1855  0E14                     	;# 
  1856  0E15                     	;# 
  1857  0E18                     	;# 
  1858  0E1A                     	;# 
  1859  0E1B                     	;# 
  1860  0E1C                     	;# 
  1861  0E20                     	;# 
  1862  0E21                     	;# 
  1863  0E22                     	;# 
  1864  0E24                     	;# 
  1865  0E25                     	;# 
  1866  0E28                     	;# 
  1867  0E29                     	;# 
  1868  0E2A                     	;# 
  1869  0E2B                     	;# 
  1870  0E90                     	;# 
  1871  0E91                     	;# 
  1872  0E92                     	;# 
  1873  0E94                     	;# 
  1874  0E95                     	;# 
  1875  0EA0                     	;# 
  1876  0EA1                     	;# 
  1877  0EA2                     	;# 
  1878  0EA3                     	;# 
  1879  0EA4                     	;# 
  1880  0EA5                     	;# 
  1881  0F0F                     	;# 
  1882  0F10                     	;# 
  1883  0F11                     	;# 
  1884  0F12                     	;# 
  1885  0F13                     	;# 
  1886  0F14                     	;# 
  1887  0F15                     	;# 
  1888  0F16                     	;# 
  1889  0F17                     	;# 
  1890  0F18                     	;# 
  1891  0F19                     	;# 
  1892  0F1A                     	;# 
  1893  0F1B                     	;# 
  1894  0F1C                     	;# 
  1895  0F1D                     	;# 
  1896  0F1E                     	;# 
  1897  0F1F                     	;# 
  1898  0F20                     	;# 
  1899  0F21                     	;# 
  1900  0F22                     	;# 
  1901  0F23                     	;# 
  1902  0FE4                     	;# 
  1903  0FE5                     	;# 
  1904  0FE6                     	;# 
  1905  0FE7                     	;# 
  1906  0FE8                     	;# 
  1907  0FE9                     	;# 
  1908  0FEA                     	;# 
  1909  0FEB                     	;# 
  1910  0FED                     	;# 
  1911  0FEE                     	;# 
  1912  0FEF                     	;# 
  1913  0000                     	;# 
  1914  0001                     	;# 
  1915  0002                     	;# 
  1916  0003                     	;# 
  1917  0004                     	;# 
  1918  0005                     	;# 
  1919  0006                     	;# 
  1920  0007                     	;# 
  1921  0008                     	;# 
  1922  0009                     	;# 
  1923  000A                     	;# 
  1924  000B                     	;# 
  1925  000C                     	;# 
  1926  000E                     	;# 
  1927  0010                     	;# 
  1928  0011                     	;# 
  1929  0012                     	;# 
  1930  0013                     	;# 
  1931  0014                     	;# 
  1932  0015                     	;# 
  1933  0015                     	;# 
  1934  0016                     	;# 
  1935  0016                     	;# 
  1936  0017                     	;# 
  1937  0018                     	;# 
  1938  0019                     	;# 
  1939  0019                     	;# 
  1940  001A                     	;# 
  1941  001B                     	;# 
  1942  001C                     	;# 
  1943  001D                     	;# 
  1944  001E                     	;# 
  1945  001F                     	;# 
  1946  008C                     	;# 
  1947  008E                     	;# 
  1948  0090                     	;# 
  1949  0091                     	;# 
  1950  0092                     	;# 
  1951  0093                     	;# 
  1952  0094                     	;# 
  1953  0097                     	;# 
  1954  009B                     	;# 
  1955  009B                     	;# 
  1956  009C                     	;# 
  1957  009D                     	;# 
  1958  009E                     	;# 
  1959  009F                     	;# 
  1960  010C                     	;# 
  1961  010E                     	;# 
  1962  0111                     	;# 
  1963  0112                     	;# 
  1964  0113                     	;# 
  1965  0114                     	;# 
  1966  0115                     	;# 
  1967  0116                     	;# 
  1968  0117                     	;# 
  1969  0118                     	;# 
  1970  0119                     	;# 
  1971  018C                     	;# 
  1972  018E                     	;# 
  1973  0197                     	;# 
  1974  0199                     	;# 
  1975  0199                     	;# 
  1976  0199                     	;# 
  1977  019A                     	;# 
  1978  019A                     	;# 
  1979  019A                     	;# 
  1980  019B                     	;# 
  1981  019B                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019B                     	;# 
  1985  019C                     	;# 
  1986  019C                     	;# 
  1987  019C                     	;# 
  1988  019D                     	;# 
  1989  019D                     	;# 
  1990  019D                     	;# 
  1991  019E                     	;# 
  1992  019E                     	;# 
  1993  019E                     	;# 
  1994  019F                     	;# 
  1995  019F                     	;# 
  1996  019F                     	;# 
  1997  019F                     	;# 
  1998  019F                     	;# 
  1999  020C                     	;# 
  2000  020E                     	;# 
  2001  0211                     	;# 
  2002  0211                     	;# 
  2003  0212                     	;# 
  2004  0212                     	;# 
  2005  0213                     	;# 
  2006  0213                     	;# 
  2007  0214                     	;# 
  2008  0214                     	;# 
  2009  0215                     	;# 
  2010  0215                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0216                     	;# 
  2014  0216                     	;# 
  2015  0217                     	;# 
  2016  0217                     	;# 
  2017  028C                     	;# 
  2018  028E                     	;# 
  2019  0291                     	;# 
  2020  0291                     	;# 
  2021  0292                     	;# 
  2022  0293                     	;# 
  2023  0294                     	;# 
  2024  0295                     	;# 
  2025  0295                     	;# 
  2026  0296                     	;# 
  2027  0297                     	;# 
  2028  0298                     	;# 
  2029  030C                     	;# 
  2030  030E                     	;# 
  2031  038C                     	;# 
  2032  038E                     	;# 
  2033  0391                     	;# 
  2034  0392                     	;# 
  2035  0393                     	;# 
  2036  0397                     	;# 
  2037  0398                     	;# 
  2038  0399                     	;# 
  2039  039A                     	;# 
  2040  039C                     	;# 
  2041  039D                     	;# 
  2042  039E                     	;# 
  2043  039F                     	;# 
  2044  0498                     	;# 
  2045  0498                     	;# 
  2046  0499                     	;# 
  2047  049A                     	;# 
  2048  049B                     	;# 
  2049  049B                     	;# 
  2050  049C                     	;# 
  2051  049D                     	;# 
  2052  049E                     	;# 
  2053  049F                     	;# 
  2054  0617                     	;# 
  2055  0618                     	;# 
  2056  0619                     	;# 
  2057  0619                     	;# 
  2058  061A                     	;# 
  2059  061B                     	;# 
  2060  061C                     	;# 
  2061  061C                     	;# 
  2062  0691                     	;# 
  2063  0692                     	;# 
  2064  0693                     	;# 
  2065  0694                     	;# 
  2066  0695                     	;# 
  2067  0696                     	;# 
  2068  0697                     	;# 
  2069  0698                     	;# 
  2070  0699                     	;# 
  2071  0891                     	;# 
  2072  0891                     	;# 
  2073  0891                     	;# 
  2074  0891                     	;# 
  2075  0891                     	;# 
  2076  0891                     	;# 
  2077  0892                     	;# 
  2078  0892                     	;# 
  2079  0892                     	;# 
  2080  0893                     	;# 
  2081  0893                     	;# 
  2082  0893                     	;# 
  2083  0893                     	;# 
  2084  0893                     	;# 
  2085  0893                     	;# 
  2086  0894                     	;# 
  2087  0894                     	;# 
  2088  0894                     	;# 
  2089  0895                     	;# 
  2090  0895                     	;# 
  2091  0895                     	;# 
  2092  0896                     	;# 
  2093  0896                     	;# 
  2094  0896                     	;# 
  2095  089B                     	;# 
  2096  0911                     	;# 
  2097  0912                     	;# 
  2098  0913                     	;# 
  2099  0914                     	;# 
  2100  0915                     	;# 
  2101  0916                     	;# 
  2102  0918                     	;# 
  2103  0919                     	;# 
  2104  091A                     	;# 
  2105  091B                     	;# 
  2106  091C                     	;# 
  2107  091D                     	;# 
  2108  091E                     	;# 
  2109  091F                     	;# 
  2110  0E0F                     	;# 
  2111  0E10                     	;# 
  2112  0E11                     	;# 
  2113  0E12                     	;# 
  2114  0E13                     	;# 
  2115  0E14                     	;# 
  2116  0E15                     	;# 
  2117  0E18                     	;# 
  2118  0E1A                     	;# 
  2119  0E1B                     	;# 
  2120  0E1C                     	;# 
  2121  0E20                     	;# 
  2122  0E21                     	;# 
  2123  0E22                     	;# 
  2124  0E24                     	;# 
  2125  0E25                     	;# 
  2126  0E28                     	;# 
  2127  0E29                     	;# 
  2128  0E2A                     	;# 
  2129  0E2B                     	;# 
  2130  0E90                     	;# 
  2131  0E91                     	;# 
  2132  0E92                     	;# 
  2133  0E94                     	;# 
  2134  0E95                     	;# 
  2135  0EA0                     	;# 
  2136  0EA1                     	;# 
  2137  0EA2                     	;# 
  2138  0EA3                     	;# 
  2139  0EA4                     	;# 
  2140  0EA5                     	;# 
  2141  0F0F                     	;# 
  2142  0F10                     	;# 
  2143  0F11                     	;# 
  2144  0F12                     	;# 
  2145  0F13                     	;# 
  2146  0F14                     	;# 
  2147  0F15                     	;# 
  2148  0F16                     	;# 
  2149  0F17                     	;# 
  2150  0F18                     	;# 
  2151  0F19                     	;# 
  2152  0F1A                     	;# 
  2153  0F1B                     	;# 
  2154  0F1C                     	;# 
  2155  0F1D                     	;# 
  2156  0F1E                     	;# 
  2157  0F1F                     	;# 
  2158  0F20                     	;# 
  2159  0F21                     	;# 
  2160  0F22                     	;# 
  2161  0F23                     	;# 
  2162  0FE4                     	;# 
  2163  0FE5                     	;# 
  2164  0FE6                     	;# 
  2165  0FE7                     	;# 
  2166  0FE8                     	;# 
  2167  0FE9                     	;# 
  2168  0FEA                     	;# 
  2169  0FEB                     	;# 
  2170  0FED                     	;# 
  2171  0FEE                     	;# 
  2172  0FEF                     	;# 
  2173  0000                     	;# 
  2174  0001                     	;# 
  2175  0002                     	;# 
  2176  0003                     	;# 
  2177  0004                     	;# 
  2178  0005                     	;# 
  2179  0006                     	;# 
  2180  0007                     	;# 
  2181  0008                     	;# 
  2182  0009                     	;# 
  2183  000A                     	;# 
  2184  000B                     	;# 
  2185  000C                     	;# 
  2186  000E                     	;# 
  2187  0010                     	;# 
  2188  0011                     	;# 
  2189  0012                     	;# 
  2190  0013                     	;# 
  2191  0014                     	;# 
  2192  0015                     	;# 
  2193  0015                     	;# 
  2194  0016                     	;# 
  2195  0016                     	;# 
  2196  0017                     	;# 
  2197  0018                     	;# 
  2198  0019                     	;# 
  2199  0019                     	;# 
  2200  001A                     	;# 
  2201  001B                     	;# 
  2202  001C                     	;# 
  2203  001D                     	;# 
  2204  001E                     	;# 
  2205  001F                     	;# 
  2206  008C                     	;# 
  2207  008E                     	;# 
  2208  0090                     	;# 
  2209  0091                     	;# 
  2210  0092                     	;# 
  2211  0093                     	;# 
  2212  0094                     	;# 
  2213  0097                     	;# 
  2214  009B                     	;# 
  2215  009B                     	;# 
  2216  009C                     	;# 
  2217  009D                     	;# 
  2218  009E                     	;# 
  2219  009F                     	;# 
  2220  010C                     	;# 
  2221  010E                     	;# 
  2222  0111                     	;# 
  2223  0112                     	;# 
  2224  0113                     	;# 
  2225  0114                     	;# 
  2226  0115                     	;# 
  2227  0116                     	;# 
  2228  0117                     	;# 
  2229  0118                     	;# 
  2230  0119                     	;# 
  2231  018C                     	;# 
  2232  018E                     	;# 
  2233  0197                     	;# 
  2234  0199                     	;# 
  2235  0199                     	;# 
  2236  0199                     	;# 
  2237  019A                     	;# 
  2238  019A                     	;# 
  2239  019A                     	;# 
  2240  019B                     	;# 
  2241  019B                     	;# 
  2242  019B                     	;# 
  2243  019B                     	;# 
  2244  019B                     	;# 
  2245  019C                     	;# 
  2246  019C                     	;# 
  2247  019C                     	;# 
  2248  019D                     	;# 
  2249  019D                     	;# 
  2250  019D                     	;# 
  2251  019E                     	;# 
  2252  019E                     	;# 
  2253  019E                     	;# 
  2254  019F                     	;# 
  2255  019F                     	;# 
  2256  019F                     	;# 
  2257  019F                     	;# 
  2258  019F                     	;# 
  2259  020C                     	;# 
  2260  020E                     	;# 
  2261  0211                     	;# 
  2262  0211                     	;# 
  2263  0212                     	;# 
  2264  0212                     	;# 
  2265  0213                     	;# 
  2266  0213                     	;# 
  2267  0214                     	;# 
  2268  0214                     	;# 
  2269  0215                     	;# 
  2270  0215                     	;# 
  2271  0215                     	;# 
  2272  0215                     	;# 
  2273  0216                     	;# 
  2274  0216                     	;# 
  2275  0217                     	;# 
  2276  0217                     	;# 
  2277  028C                     	;# 
  2278  028E                     	;# 
  2279  0291                     	;# 
  2280  0291                     	;# 
  2281  0292                     	;# 
  2282  0293                     	;# 
  2283  0294                     	;# 
  2284  0295                     	;# 
  2285  0295                     	;# 
  2286  0296                     	;# 
  2287  0297                     	;# 
  2288  0298                     	;# 
  2289  030C                     	;# 
  2290  030E                     	;# 
  2291  038C                     	;# 
  2292  038E                     	;# 
  2293  0391                     	;# 
  2294  0392                     	;# 
  2295  0393                     	;# 
  2296  0397                     	;# 
  2297  0398                     	;# 
  2298  0399                     	;# 
  2299  039A                     	;# 
  2300  039C                     	;# 
  2301  039D                     	;# 
  2302  039E                     	;# 
  2303  039F                     	;# 
  2304  0498                     	;# 
  2305  0498                     	;# 
  2306  0499                     	;# 
  2307  049A                     	;# 
  2308  049B                     	;# 
  2309  049B                     	;# 
  2310  049C                     	;# 
  2311  049D                     	;# 
  2312  049E                     	;# 
  2313  049F                     	;# 
  2314  0617                     	;# 
  2315  0618                     	;# 
  2316  0619                     	;# 
  2317  0619                     	;# 
  2318  061A                     	;# 
  2319  061B                     	;# 
  2320  061C                     	;# 
  2321  061C                     	;# 
  2322  0691                     	;# 
  2323  0692                     	;# 
  2324  0693                     	;# 
  2325  0694                     	;# 
  2326  0695                     	;# 
  2327  0696                     	;# 
  2328  0697                     	;# 
  2329  0698                     	;# 
  2330  0699                     	;# 
  2331  0891                     	;# 
  2332  0891                     	;# 
  2333  0891                     	;# 
  2334  0891                     	;# 
  2335  0891                     	;# 
  2336  0891                     	;# 
  2337  0892                     	;# 
  2338  0892                     	;# 
  2339  0892                     	;# 
  2340  0893                     	;# 
  2341  0893                     	;# 
  2342  0893                     	;# 
  2343  0893                     	;# 
  2344  0893                     	;# 
  2345  0893                     	;# 
  2346  0894                     	;# 
  2347  0894                     	;# 
  2348  0894                     	;# 
  2349  0895                     	;# 
  2350  0895                     	;# 
  2351  0895                     	;# 
  2352  0896                     	;# 
  2353  0896                     	;# 
  2354  0896                     	;# 
  2355  089B                     	;# 
  2356  0911                     	;# 
  2357  0912                     	;# 
  2358  0913                     	;# 
  2359  0914                     	;# 
  2360  0915                     	;# 
  2361  0916                     	;# 
  2362  0918                     	;# 
  2363  0919                     	;# 
  2364  091A                     	;# 
  2365  091B                     	;# 
  2366  091C                     	;# 
  2367  091D                     	;# 
  2368  091E                     	;# 
  2369  091F                     	;# 
  2370  0E0F                     	;# 
  2371  0E10                     	;# 
  2372  0E11                     	;# 
  2373  0E12                     	;# 
  2374  0E13                     	;# 
  2375  0E14                     	;# 
  2376  0E15                     	;# 
  2377  0E18                     	;# 
  2378  0E1A                     	;# 
  2379  0E1B                     	;# 
  2380  0E1C                     	;# 
  2381  0E20                     	;# 
  2382  0E21                     	;# 
  2383  0E22                     	;# 
  2384  0E24                     	;# 
  2385  0E25                     	;# 
  2386  0E28                     	;# 
  2387  0E29                     	;# 
  2388  0E2A                     	;# 
  2389  0E2B                     	;# 
  2390  0E90                     	;# 
  2391  0E91                     	;# 
  2392  0E92                     	;# 
  2393  0E94                     	;# 
  2394  0E95                     	;# 
  2395  0EA0                     	;# 
  2396  0EA1                     	;# 
  2397  0EA2                     	;# 
  2398  0EA3                     	;# 
  2399  0EA4                     	;# 
  2400  0EA5                     	;# 
  2401  0F0F                     	;# 
  2402  0F10                     	;# 
  2403  0F11                     	;# 
  2404  0F12                     	;# 
  2405  0F13                     	;# 
  2406  0F14                     	;# 
  2407  0F15                     	;# 
  2408  0F16                     	;# 
  2409  0F17                     	;# 
  2410  0F18                     	;# 
  2411  0F19                     	;# 
  2412  0F1A                     	;# 
  2413  0F1B                     	;# 
  2414  0F1C                     	;# 
  2415  0F1D                     	;# 
  2416  0F1E                     	;# 
  2417  0F1F                     	;# 
  2418  0F20                     	;# 
  2419  0F21                     	;# 
  2420  0F22                     	;# 
  2421  0F23                     	;# 
  2422  0FE4                     	;# 
  2423  0FE5                     	;# 
  2424  0FE6                     	;# 
  2425  0FE7                     	;# 
  2426  0FE8                     	;# 
  2427  0FE9                     	;# 
  2428  0FEA                     	;# 
  2429  0FEB                     	;# 
  2430  0FED                     	;# 
  2431  0FEE                     	;# 
  2432  0FEF                     	;# 
  2433                           
  2434                           	psect	stringtext1
  2435  0644                     __pstringtext1:
  2436  0644                     main@interval:
  2437  0644  340C               	retlw	12
  2438  0645  3400               	retlw	0
  2439  0646  3400               	retlw	0
  2440  0647  3405               	retlw	5
  2441  0648  3401               	retlw	1
  2442  0649  3418               	retlw	24
  2443  064A  3400               	retlw	0
  2444  064B  3400               	retlw	0
  2445  064C  3401               	retlw	1
  2446  064D  3400               	retlw	0
  2447  064E  3430               	retlw	48
  2448  064F  3400               	retlw	0
  2449  0650  3400               	retlw	0
  2450  0651  3402               	retlw	2
  2451  0652  3400               	retlw	0
  2452  0653  3424               	retlw	36
  2453  0654  3400               	retlw	0
  2454  0655  3400               	retlw	0
  2455  0656  3403               	retlw	3
  2456  0657  3400               	retlw	0
  2457  0658  34A8               	retlw	168
  2458  0659  3400               	retlw	0
  2459  065A  3400               	retlw	0
  2460  065B  3407               	retlw	7
  2461  065C  3400               	retlw	0
  2462  065D  3450               	retlw	80
  2463  065E  3401               	retlw	1
  2464  065F  3401               	retlw	1
  2465  0660  3404               	retlw	4
  2466  0661  3400               	retlw	0
  2467  0662                     __end_ofmain@interval:
  2468                           
  2469                           	psect	stringtext2
  2470  0779                     __pstringtext2:
  2471  0779                     _NUMBER_FONT:
  2472  0779  343F               	retlw	63
  2473  077A  3406               	retlw	6
  2474  077B  345B               	retlw	91
  2475  077C  344F               	retlw	79
  2476  077D  3466               	retlw	102
  2477  077E  346D               	retlw	109
  2478  077F  347D               	retlw	125
  2479  0780  3407               	retlw	7
  2480  0781  347F               	retlw	127
  2481  0782  346F               	retlw	111
  2482  0783  3400               	retlw	0
  2483  0784                     __end_of_NUMBER_FONT:
  2484                           
  2485                           	psect	stringtext3
  2486  07A4                     __pstringtext3:
  2487  07A4                     _LED_PATTERN:
  2488  07A4  3400               	retlw	0
  2489  07A5  3420               	retlw	32
  2490  07A6  3401               	retlw	1
  2491  07A7  3402               	retlw	2
  2492  07A8  3440               	retlw	64
  2493  07A9  3480               	retlw	128
  2494  07AA                     __end_of_LED_PATTERN:
  2495                           
  2496                           	psect	stringtext4
  2497  07C0                     __pstringtext4:
  2498  07C0                     main@timeUnitH:
  2499  07C0  3410               	retlw	16
  2500  07C1  340E               	retlw	14
  2501  07C2  3400               	retlw	0
  2502  07C3  3400               	retlw	0
  2503  07C4                     __end_ofmain@timeUnitH:
  2504                           
  2505                           	psect	stringtext5
  2506  07CC                     __pstringtext5:
  2507  07CC                     _LO_BAT:
  2508  07CC  3438               	retlw	56
  2509  07CD  343F               	retlw	63
  2510  07CE  3400               	retlw	0
  2511  07CF                     __end_of_LO_BAT:
  2512                           
  2513                           	psect	stringtext6
  2514  07D7                     __pstringtext6:
  2515  07D7                     _DOT:
  2516  07D7  3480               	retlw	128
  2517  07D8                     __end_of_DOT:
  2518                           
  2519                           	psect	nvCOMMON
  2520  007A                     __pnvCOMMON:
  2521  007A                     _timer0ReloadVal16bit:
  2522  007A                     	ds	2
  2523                           
  2524                           	psect	nvBANK0
  2525  005D                     __pnvBANK0:
  2526  005D                     _TMR1_InterruptHandler:
  2527  005D                     	ds	2
  2528  005F                     _timer1ReloadVal:
  2529  005F                     	ds	2
  2530  000C                     _PORTAbits	set	12
  2531  001B                     _T1CONbits	set	27
  2532  001B                     _T1CON	set	27
  2533  0019                     _TMR1L	set	25
  2534  001A                     _TMR1H	set	26
  2535  001C                     _T1GCON	set	28
  2536  0017                     _T0CON0bits	set	23
  2537  0017                     _T0CON0	set	23
  2538  0010                     _PIR0bits	set	16
  2539  0015                     _TMR0L	set	21
  2540  0016                     _TMR0H	set	22
  2541  0018                     _T0CON1	set	24
  2542  0011                     _PIR1bits	set	17
  2543  000B                     _INTCONbits	set	11
  2544  009D                     _ADCON0bits	set	157
  2545  009C                     _ADRESH	set	156
  2546  009B                     _ADRESL	set	155
  2547  009F                     _ADACT	set	159
  2548  009E                     _ADCON1	set	158
  2549  009D                     _ADCON0	set	157
  2550  0091                     _PIE1bits	set	145
  2551  0097                     _WDTCON	set	151
  2552  008E                     _TRISC	set	142
  2553  008C                     _TRISA	set	140
  2554  010E                     _LATCbits	set	270
  2555  010E                     _LATC	set	270
  2556  010C                     _LATA	set	268
  2557  018C                     _ANSELA	set	396
  2558  018E                     _ANSELC	set	398
  2559  020E                     _WPUC	set	526
  2560  020C                     _WPUA	set	524
  2561  028E                     _ODCONC	set	654
  2562  028C                     _ODCONA	set	652
  2563  0916                     _PMD5	set	2326
  2564  0915                     _PMD4	set	2325
  2565  0914                     _PMD3	set	2324
  2566  0913                     _PMD2	set	2323
  2567  0912                     _PMD1	set	2322
  2568  0911                     _PMD0	set	2321
  2569  091E                     _OSCTUNE	set	2334
  2570  091F                     _OSCFRQ	set	2335
  2571  091D                     _OSCEN	set	2333
  2572  091B                     _OSCCON3	set	2331
  2573  0919                     _OSCCON1	set	2329
  2574  0E12                     _T1CKIPPSbits	set	3602
  2575                           
  2576                           	psect	cinit
  2577  0012                     start_initialization:	
  2578                           ; #config settings
  2579                           
  2580  0012                     __initialization:
  2581                           
  2582                           ; Clear objects allocated to BANK0
  2583  0012  0020               	movlb	0	; select bank0
  2584  0013  01D4               	clrf	__pbssBANK0& (0+127)
  2585  0014  01D5               	clrf	(__pbssBANK0+1)& (0+127)
  2586  0015  01D6               	clrf	(__pbssBANK0+2)& (0+127)
  2587  0016  01D7               	clrf	(__pbssBANK0+3)& (0+127)
  2588  0017  01D8               	clrf	(__pbssBANK0+4)& (0+127)
  2589  0018  01D9               	clrf	(__pbssBANK0+5)& (0+127)
  2590  0019  01DA               	clrf	(__pbssBANK0+6)& (0+127)
  2591  001A  01DB               	clrf	(__pbssBANK0+7)& (0+127)
  2592  001B  01DC               	clrf	(__pbssBANK0+8)& (0+127)
  2593  001C                     end_of_initialization:	
  2594                           ;End of C runtime variable initialization code
  2595                           
  2596  001C                     __end_of__initialization:
  2597  001C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2598  001D  0020               	movlb	0
  2599  001E  281F               	ljmp	_main	;jump to C main() function
  2600                           
  2601                           	psect	bssBANK0
  2602  0054                     __pbssBANK0:
  2603  0054                     _target_count:
  2604  0054                     	ds	4
  2605  0058                     _waitTimeCounter:
  2606  0058                     	ds	4
  2607  005C                     _fireFlg:
  2608  005C                     	ds	1
  2609                           
  2610                           	psect	cstackCOMMON
  2611  0070                     __pcstackCOMMON:
  2612  0070                     ?_PMD_Initialize:
  2613  0070                     ?_OSCILLATOR_Initialize:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_WDT_Initialize:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?_ADC_Initialize:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_TMR1_Initialize:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ?_TMR0_Initialize:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?_TMR1_ISR:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_TMR1_DefaultInterruptHandler:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ??_TMR1_DefaultInterruptHandler:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_TM1640_init:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ?_TM1640_diplayOFF:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_TM1640_LEDarrayOFF:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ?_TM1640_LEDarray:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_TM1640_dispLowBat:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ?_PIN_MANAGER_Initialize:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ?_SYSTEM_Initialize:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ?_INTERRUPT_InterruptManager:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_TMR0_StartTimer:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ?_TMR0_StopTimer:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_TMR0_Reload:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ?_TMR1_StartTimer:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_TMR1_Reload:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_voltage_index:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ?_TimeCheck_ISR:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ??_TimeCheck_ISR:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?_main:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?_TM1640_sendByte:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_TM1640_sendCommand:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?i1_TMR1_WriteTimer:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     i1TMR1_WriteTimer@timerVal:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700                           
  2701                           ; 2 bytes @ 0x0
  2702  0070                     	ds	2
  2703  0072                     ??_PMD_Initialize:
  2704  0072                     ??_OSCILLATOR_Initialize:	
  2705                           ; 1 bytes @ 0x2
  2706                           
  2707  0072                     ??_WDT_Initialize:	
  2708                           ; 1 bytes @ 0x2
  2709                           
  2710  0072                     ??_ADC_Initialize:	
  2711                           ; 1 bytes @ 0x2
  2712                           
  2713  0072                     ??_TMR0_Initialize:	
  2714                           ; 1 bytes @ 0x2
  2715                           
  2716  0072                     ??_TMR1_ISR:	
  2717                           ; 1 bytes @ 0x2
  2718                           
  2719  0072                     ?_TMR1_SetInterruptHandler:	
  2720                           ; 1 bytes @ 0x2
  2721                           
  2722  0072                     ??_TM1640_init:	
  2723                           ; 1 bytes @ 0x2
  2724                           
  2725  0072                     ??_PIN_MANAGER_Initialize:	
  2726                           ; 1 bytes @ 0x2
  2727                           
  2728  0072                     ??_INTERRUPT_InterruptManager:	
  2729                           ; 1 bytes @ 0x2
  2730                           
  2731  0072                     ??_TMR0_StartTimer:	
  2732                           ; 1 bytes @ 0x2
  2733                           
  2734  0072                     ??_TMR0_StopTimer:	
  2735                           ; 1 bytes @ 0x2
  2736                           
  2737  0072                     ?_TMR0_WriteTimer:	
  2738                           ; 1 bytes @ 0x2
  2739                           
  2740  0072                     ??_TMR0_Reload:	
  2741                           ; 1 bytes @ 0x2
  2742                           
  2743  0072                     ??_TMR1_StartTimer:	
  2744                           ; 1 bytes @ 0x2
  2745                           
  2746  0072                     ?_TMR1_WriteTimer:	
  2747                           ; 1 bytes @ 0x2
  2748                           
  2749  0072                     ??_TM1640_sendByte:	
  2750                           ; 1 bytes @ 0x2
  2751                           
  2752  0072                     ??i1_TMR1_WriteTimer:	
  2753                           ; 1 bytes @ 0x2
  2754                           
  2755  0072                     ?_ADC_GetConversion:	
  2756                           ; 1 bytes @ 0x2
  2757                           
  2758  0072                     ?___lwdiv:	
  2759                           ; 2 bytes @ 0x2
  2760                           
  2761  0072                     ?___lwmod:	
  2762                           ; 2 bytes @ 0x2
  2763                           
  2764  0072                     TMR0_WriteTimer@timerVal:	
  2765                           ; 2 bytes @ 0x2
  2766                           
  2767  0072                     TMR1_WriteTimer@timerVal:	
  2768                           ; 2 bytes @ 0x2
  2769                           
  2770  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  2771                           ; 2 bytes @ 0x2
  2772                           
  2773  0072                     ___lwdiv@divisor:	
  2774                           ; 2 bytes @ 0x2
  2775                           
  2776  0072                     ___lwmod@divisor:	
  2777                           ; 2 bytes @ 0x2
  2778                           
  2779                           
  2780                           ; 2 bytes @ 0x2
  2781  0072                     	ds	1
  2782  0073                     TM1640_sendByte@data:
  2783                           
  2784                           ; 1 bytes @ 0x3
  2785  0073                     	ds	1
  2786  0074                     ??_TMR1_Initialize:
  2787  0074                     ??_TMR1_SetInterruptHandler:	
  2788                           ; 1 bytes @ 0x4
  2789                           
  2790  0074                     ??_SYSTEM_Initialize:	
  2791                           ; 1 bytes @ 0x4
  2792                           
  2793  0074                     ??_TMR0_WriteTimer:	
  2794                           ; 1 bytes @ 0x4
  2795                           
  2796  0074                     ??_ADC_GetConversion:	
  2797                           ; 1 bytes @ 0x4
  2798                           
  2799  0074                     ??_TMR1_WriteTimer:	
  2800                           ; 1 bytes @ 0x4
  2801                           
  2802  0074                     ??_TMR1_Reload:	
  2803                           ; 1 bytes @ 0x4
  2804                           
  2805  0074                     TM1640_sendByte@i:	
  2806                           ; 1 bytes @ 0x4
  2807                           
  2808  0074                     ___lwdiv@dividend:	
  2809                           ; 1 bytes @ 0x4
  2810                           
  2811  0074                     ___lwmod@dividend:	
  2812                           ; 2 bytes @ 0x4
  2813                           
  2814                           
  2815                           ; 2 bytes @ 0x4
  2816  0074                     	ds	1
  2817  0075                     ??_TM1640_sendCommand:
  2818  0075                     ?_TM1640_sendAddress_and_Data:	
  2819                           ; 1 bytes @ 0x5
  2820                           
  2821  0075                     ADC_GetConversion@channel:	
  2822                           ; 1 bytes @ 0x5
  2823                           
  2824  0075                     TM1640_sendCommand@command:	
  2825                           ; 1 bytes @ 0x5
  2826                           
  2827  0075                     TM1640_sendAddress_and_Data@data:	
  2828                           ; 1 bytes @ 0x5
  2829                           
  2830                           
  2831                           ; 1 bytes @ 0x5
  2832  0075                     	ds	1
  2833  0076                     ??_TM1640_sendAddress_and_Data:
  2834  0076                     ??___lwdiv:	
  2835                           ; 1 bytes @ 0x6
  2836                           
  2837  0076                     ??___lwmod:	
  2838                           ; 1 bytes @ 0x6
  2839                           
  2840  0076                     ?___wmul:	
  2841                           ; 1 bytes @ 0x6
  2842                           
  2843  0076                     TM1640_sendAddress_and_Data@adress:	
  2844                           ; 2 bytes @ 0x6
  2845                           
  2846  0076                     ___wmul@multiplier:	
  2847                           ; 1 bytes @ 0x6
  2848                           
  2849                           
  2850                           ; 2 bytes @ 0x6
  2851  0076                     	ds	1
  2852  0077                     ??_TM1640_diplayOFF:
  2853  0077                     ??_TM1640_LEDarrayOFF:	
  2854                           ; 1 bytes @ 0x7
  2855                           
  2856  0077                     ??_TM1640_LEDarray:	
  2857                           ; 1 bytes @ 0x7
  2858                           
  2859  0077                     ??_TM1640_dispLowBat:	
  2860                           ; 1 bytes @ 0x7
  2861                           
  2862  0077                     ___lwmod@counter:	
  2863                           ; 1 bytes @ 0x7
  2864                           
  2865  0077                     ___lwdiv@quotient:	
  2866                           ; 1 bytes @ 0x7
  2867                           
  2868                           
  2869                           ; 2 bytes @ 0x7
  2870  0077                     	ds	1
  2871  0078                     TM1640_diplayOFF@digit:
  2872  0078                     TM1640_LEDarray@value:	
  2873                           ; 1 bytes @ 0x8
  2874                           
  2875  0078                     TM1640_LEDarrayOFF@pattern:	
  2876                           ; 1 bytes @ 0x8
  2877                           
  2878  0078                     ___wmul@multiplicand:	
  2879                           ; 1 bytes @ 0x8
  2880                           
  2881                           
  2882                           ; 2 bytes @ 0x8
  2883  0078                     	ds	1
  2884  0079                     TM1640_LEDarray@pattern:
  2885  0079                     ___lwdiv@counter:	
  2886                           ; 1 bytes @ 0x9
  2887                           
  2888                           
  2889                           ; 1 bytes @ 0x9
  2890  0079                     	ds	1
  2891  007A                     ??___wmul:
  2892  007A                     ??___lmul:	
  2893                           ; 1 bytes @ 0xA
  2894                           
  2895                           
  2896                           	psect	cstackBANK0
  2897  0020                     __pcstackBANK0:	
  2898                           ; 1 bytes @ 0xA
  2899                           
  2900  0020                     ?_TM1640_dispINT:
  2901  0020                     TM1640_dispINT@value:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0020                     ___wmul@product:	
  2905                           ; 2 bytes @ 0x0
  2906                           
  2907                           
  2908                           ; 2 bytes @ 0x0
  2909  0020                     	ds	2
  2910  0022                     ?_TM1640_dispVoltage:
  2911  0022                     ??_TM1640_dispINT:	
  2912                           ; 1 bytes @ 0x2
  2913                           
  2914  0022                     ?_TM1640_dispDEC:	
  2915                           ; 1 bytes @ 0x2
  2916                           
  2917  0022                     ??_voltage_index:	
  2918                           ; 1 bytes @ 0x2
  2919                           
  2920  0022                     ?___lmul:	
  2921                           ; 1 bytes @ 0x2
  2922                           
  2923  0022                     TM1640_dispDEC@digit_low:	
  2924                           ; 4 bytes @ 0x2
  2925                           
  2926  0022                     TM1640_dispVoltage@value:	
  2927                           ; 1 bytes @ 0x2
  2928                           
  2929  0022                     ___lmul@multiplier:	
  2930                           ; 2 bytes @ 0x2
  2931                           
  2932                           
  2933                           ; 4 bytes @ 0x2
  2934  0022                     	ds	1
  2935  0023                     TM1640_dispINT@digit_low:
  2936  0023                     TM1640_dispDEC@dot:	
  2937                           ; 1 bytes @ 0x3
  2938                           
  2939                           
  2940                           ; 1 bytes @ 0x3
  2941  0023                     	ds	1
  2942  0024                     ??_TM1640_dispVoltage:
  2943  0024                     ??_TM1640_dispDEC:	
  2944                           ; 1 bytes @ 0x4
  2945                           
  2946  0024                     TM1640_dispINT@digit_high:	
  2947                           ; 1 bytes @ 0x4
  2948                           
  2949  0024                     voltage_index@voltage:	
  2950                           ; 1 bytes @ 0x4
  2951                           
  2952                           
  2953                           ; 2 bytes @ 0x4
  2954  0024                     	ds	1
  2955  0025                     TM1640_dispDEC@digit_high:
  2956                           
  2957                           ; 1 bytes @ 0x5
  2958  0025                     	ds	1
  2959  0026                     TM1640_dispVoltage@digit_low:
  2960  0026                     ___lmul@multiplicand:	
  2961                           ; 1 bytes @ 0x6
  2962                           
  2963                           
  2964                           ; 4 bytes @ 0x6
  2965  0026                     	ds	1
  2966  0027                     TM1640_dispVoltage@digit_high:
  2967                           
  2968                           ; 1 bytes @ 0x7
  2969  0027                     	ds	1
  2970  0028                     TM1640_dispVoltage@data:
  2971                           
  2972                           ; 1 bytes @ 0x8
  2973  0028                     	ds	1
  2974  0029                     TM1640_dispVoltage@voltage:
  2975                           
  2976                           ; 2 bytes @ 0x9
  2977  0029                     	ds	1
  2978  002A                     ___lmul@product:
  2979                           
  2980                           ; 4 bytes @ 0xA
  2981  002A                     	ds	4
  2982  002E                     ??_main:
  2983                           
  2984                           ; 1 bytes @ 0xE
  2985  002E                     	ds	8
  2986  0036                     main@vol_counts:
  2987                           
  2988                           ; 2 bytes @ 0x16
  2989  0036                     	ds	2
  2990  0038                     main@timer0ReloadVal16bit2:
  2991                           
  2992                           ; 2 bytes @ 0x18
  2993  0038                     	ds	2
  2994  003A                     main@target_integration:
  2995                           
  2996                           ; 4 bytes @ 0x1A
  2997  003A                     	ds	4
  2998  003E                     main@parity:
  2999                           
  3000                           ; 1 bytes @ 0x1E
  3001  003E                     	ds	1
  3002  003F                     main@batLowFlg:
  3003                           
  3004                           ; 1 bytes @ 0x1F
  3005  003F                     	ds	1
  3006  0040                     main@delta:
  3007                           
  3008                           ; 2 bytes @ 0x20
  3009  0040                     	ds	2
  3010  0042                     main@sec:
  3011                           
  3012                           ; 1 bytes @ 0x22
  3013  0042                     	ds	1
  3014  0043                     main@waterCounts:
  3015                           
  3016                           ; 1 bytes @ 0x23
  3017  0043                     	ds	1
  3018  0044                     main@level:
  3019                           
  3020                           ; 1 bytes @ 0x24
  3021  0044                     	ds	1
  3022  0045                     main@T0ReloadVal1:
  3023                           
  3024                           ; 2 bytes @ 0x25
  3025  0045                     	ds	2
  3026  0047                     main@vt:
  3027                           
  3028                           ; 2 bytes @ 0x27
  3029  0047                     	ds	2
  3030  0049                     main@adc_integration:
  3031                           
  3032                           ; 4 bytes @ 0x29
  3033  0049                     	ds	4
  3034  004D                     main@adcCounts:
  3035                           
  3036                           ; 2 bytes @ 0x2D
  3037  004D                     	ds	2
  3038  004F                     main@timer0ReloadVal16bit3:
  3039                           
  3040                           ; 2 bytes @ 0x2F
  3041  004F                     	ds	2
  3042  0051                     main@delay_counts:
  3043                           
  3044                           ; 2 bytes @ 0x31
  3045  0051                     	ds	2
  3046  0053                     main@index:
  3047                           
  3048                           ; 1 bytes @ 0x33
  3049  0053                     	ds	1
  3050                           
  3051                           	psect	maintext
  3052  001F                     __pmaintext:	
  3053 ;;
  3054 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  3055 ;;
  3056 ;; *************** function _main *****************
  3057 ;; Defined at:
  3058 ;;		line 88 in file "main.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;		None
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  adc_integrat    4   41[BANK0 ] unsigned long 
  3063 ;;  target_integ    4   26[BANK0 ] unsigned long 
  3064 ;;  delay_counts    2   49[BANK0 ] unsigned int 
  3065 ;;  timer0Reload    2   47[BANK0 ] unsigned int 
  3066 ;;  adcCounts       2   45[BANK0 ] unsigned int 
  3067 ;;  vt              2   39[BANK0 ] unsigned int 
  3068 ;;  T0ReloadVal1    2   37[BANK0 ] unsigned int 
  3069 ;;  delta           2   32[BANK0 ] unsigned int 
  3070 ;;  timer0Reload    2   24[BANK0 ] unsigned int 
  3071 ;;  vol_counts      2   22[BANK0 ] unsigned int 
  3072 ;;  index           1   51[BANK0 ] unsigned char 
  3073 ;;  level           1   36[BANK0 ] unsigned char 
  3074 ;;  waterCounts     1   35[BANK0 ] unsigned char 
  3075 ;;  sec             1   34[BANK0 ] unsigned char 
  3076 ;;  batLowFlg       1   31[BANK0 ] unsigned char 
  3077 ;;  parity          1   30[BANK0 ] unsigned char 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;                  1    wreg      void 
  3080 ;; Registers used:
  3081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : B1F/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3087 ;;      Params:         0       0       0       0
  3088 ;;      Locals:         0      30       0       0
  3089 ;;      Temps:          0       8       0       0
  3090 ;;      Totals:         0      38       0       0
  3091 ;;Total ram usage:       38 bytes
  3092 ;; Hardware stack levels required when called:    6
  3093 ;; This function calls:
  3094 ;;		_ADC_GetConversion
  3095 ;;		_SYSTEM_Initialize
  3096 ;;		_TM1640_LEDarray
  3097 ;;		_TM1640_LEDarrayOFF
  3098 ;;		_TM1640_diplayOFF
  3099 ;;		_TM1640_dispDEC
  3100 ;;		_TM1640_dispINT
  3101 ;;		_TM1640_dispLowBat
  3102 ;;		_TM1640_dispVoltage
  3103 ;;		_TM1640_init
  3104 ;;		_TMR0_Reload
  3105 ;;		_TMR0_StartTimer
  3106 ;;		_TMR0_StopTimer
  3107 ;;		_TMR0_WriteTimer
  3108 ;;		_TMR1_Reload
  3109 ;;		_TMR1_SetInterruptHandler
  3110 ;;		_TMR1_StartTimer
  3111 ;;		___lmul
  3112 ;;		___wmul
  3113 ;;		_voltage_index
  3114 ;; This function is called by:
  3115 ;;		Startup code after reset
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           
  3120                           ;psect for function _main
  3121  001F                     _main:
  3122                           
  3123                           ;main.c: 90: unsigned uint16_t T0ReloadVal1 = (unsigned int)(TMR0H << 8U) | TMR0L;
  3124                           
  3125                           ;incstack = 0
  3126                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3127  001F  0816               	movf	22,w	;volatile
  3128  0020  00C6               	movwf	main@T0ReloadVal1+1
  3129  0021  0815               	movf	21,w	;volatile
  3130  0022  00C5               	movwf	main@T0ReloadVal1
  3131                           
  3132                           ;main.c: 91: unsigned uint16_t delta = (0xFFFF-T0ReloadVal1) >> 3 ;
  3133  0023  0846               	movf	main@T0ReloadVal1+1,w
  3134  0024  00AF               	movwf	??_main+1
  3135  0025  0845               	movf	main@T0ReloadVal1,w
  3136  0026  00AE               	movwf	??_main
  3137  0027  09AE               	comf	??_main,f
  3138  0028  09AF               	comf	??_main+1,f
  3139  0029  36AF               	lsrf	??_main+1,f
  3140  002A  0CAE               	rrf	??_main,f
  3141  002B  36AF               	lsrf	??_main+1,f
  3142  002C  0CAE               	rrf	??_main,f
  3143  002D  36AF               	lsrf	??_main+1,f
  3144  002E  0CAE               	rrf	??_main,f
  3145  002F  082E               	movf	??_main,w
  3146  0030  00C0               	movwf	main@delta
  3147  0031  082F               	movf	??_main+1,w
  3148  0032  00C1               	movwf	main@delta+1
  3149                           
  3150                           ;main.c: 92: unsigned uint16_t timer0ReloadVal16bit2 = 2 * delta + T0ReloadVal1;
  3151  0033  0841               	movf	main@delta+1,w
  3152  0034  00AF               	movwf	??_main+1
  3153  0035  0840               	movf	main@delta,w
  3154  0036  00AE               	movwf	??_main
  3155  0037  35AE               	lslf	??_main,f
  3156  0038  0DAF               	rlf	??_main+1,f
  3157  0039  0845               	movf	main@T0ReloadVal1,w
  3158  003A  072E               	addwf	??_main,w
  3159  003B  00B8               	movwf	main@timer0ReloadVal16bit2
  3160  003C  0846               	movf	main@T0ReloadVal1+1,w
  3161  003D  3D2F               	addwfc	??_main+1,w
  3162  003E  00B9               	movwf	main@timer0ReloadVal16bit2+1
  3163                           
  3164                           ;main.c: 93: unsigned uint16_t timer0ReloadVal16bit3 = 3 * delta + T0ReloadVal1;
  3165  003F  0841               	movf	main@delta+1,w
  3166  0040  00F7               	movwf	___wmul@multiplier+1
  3167  0041  0840               	movf	main@delta,w
  3168  0042  00F6               	movwf	___wmul@multiplier
  3169  0043  3003               	movlw	3
  3170  0044  00F8               	movwf	___wmul@multiplicand
  3171  0045  3000               	movlw	0
  3172  0046  00F9               	movwf	___wmul@multiplicand+1
  3173  0047  2662               	fcall	___wmul
  3174  0048  0845               	movf	main@T0ReloadVal1,w
  3175  0049  0776               	addwf	?___wmul,w
  3176  004A  00CF               	movwf	main@timer0ReloadVal16bit3
  3177  004B  0846               	movf	main@T0ReloadVal1+1,w
  3178  004C  3D77               	addwfc	?___wmul+1,w
  3179  004D  00D0               	movwf	main@timer0ReloadVal16bit3+1
  3180                           
  3181                           ;main.c: 95: unsigned char batLowFlg=0;
  3182  004E  01BF               	clrf	main@batLowFlg
  3183                           
  3184                           ;main.c: 98: adc_result_t adcCounts;;main.c: 99: unsigned int vol_counts=0;
  3185  004F  01B6               	clrf	main@vol_counts
  3186  0050  01B7               	clrf	main@vol_counts+1
  3187                           
  3188                           ;main.c: 100: unsigned int delay_counts=0;
  3189  0051  01D1               	clrf	main@delay_counts
  3190  0052  01D2               	clrf	main@delay_counts+1
  3191                           
  3192                           ;main.c: 102: const unsigned long timeUnitH=3600;;main.c: 104: SYSTEM_Initialize();
  3193  0053  2784               	fcall	_SYSTEM_Initialize
  3194                           
  3195                           ;main.c: 105: TM1640_init();
  3196  0054  27C4               	fcall	_TM1640_init
  3197                           
  3198                           ;main.c: 106: TM1640_diplayOFF();
  3199  0055  26D0               	fcall	_TM1640_diplayOFF
  3200                           
  3201                           ;main.c: 107: TM1640_LEDarrayOFF();
  3202  0056  272C               	fcall	_TM1640_LEDarrayOFF
  3203                           
  3204                           ;main.c: 110: TMR1_SetInterruptHandler(TimeCheck_ISR);
  3205  0057  30FF               	movlw	low _TimeCheck_ISR
  3206  0058  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3207  0059  3005               	movlw	high _TimeCheck_ISR
  3208  005A  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3209  005B  27B0               	fcall	_TMR1_SetInterruptHandler
  3210                           
  3211                           ;main.c: 120: TM1640_LEDarray(1);
  3212  005C  3001               	movlw	1
  3213  005D  26E9               	fcall	_TM1640_LEDarray
  3214                           
  3215                           ;main.c: 121: adcCounts = ADC_GetConversion(ADC);
  3216  005E  3014               	movlw	20
  3217  005F  2702               	fcall	_ADC_GetConversion
  3218  0060  0873               	movf	?_ADC_GetConversion+1,w
  3219  0061  0020               	movlb	0	; select bank0
  3220  0062  00CE               	movwf	main@adcCounts+1
  3221  0063  0872               	movf	?_ADC_GetConversion,w
  3222  0064  00CD               	movwf	main@adcCounts
  3223                           
  3224                           ;main.c: 122: TM1640_dispVoltage(adcCounts);
  3225  0065  084E               	movf	main@adcCounts+1,w
  3226  0066  00A3               	movwf	TM1640_dispVoltage@value+1
  3227  0067  084D               	movf	main@adcCounts,w
  3228  0068  00A2               	movwf	TM1640_dispVoltage@value
  3229  0069  241E               	fcall	_TM1640_dispVoltage
  3230                           
  3231                           ;main.c: 123: if(adcCounts<613L) {
  3232  006A  3002               	movlw	2
  3233  006B  0020               	movlb	0	; select bank0
  3234  006C  024E               	subwf	main@adcCounts+1,w
  3235  006D  3065               	movlw	101
  3236  006E  1903               	skipnz
  3237  006F  024D               	subwf	main@adcCounts,w
  3238  0070  1803               	skipnc
  3239  0071  2874               	goto	l2604
  3240  0072                     l2602:
  3241                           
  3242                           ;main.c: 125: TM1640_dispLowBat();
  3243  0072  26B7               	fcall	_TM1640_dispLowBat
  3244  0073  2872               	goto	l2602
  3245  0074                     l2604:
  3246                           
  3247                           ;main.c: 126: };main.c: 127: };main.c: 128: _delay((unsigned long)((2000)*(1000000/4000.
      +                          0)));
  3248  0074  3003               	movlw	3
  3249  0075  0020               	movlb	0	; select bank0
  3250  0076  00AF               	movwf	??_main+1
  3251  0077  308A               	movlw	138
  3252  0078  00AE               	movwf	??_main
  3253  0079  3055               	movlw	85
  3254  007A                     u1827:
  3255  007A  0B89               	decfsz	9,f
  3256  007B  287A               	goto	u1827
  3257  007C  0BAE               	decfsz	??_main,f
  3258  007D  287A               	goto	u1827
  3259  007E  0BAF               	decfsz	??_main+1,f
  3260  007F  287A               	goto	u1827
  3261  0080  3200               	nop2
  3262                           
  3263                           ;main.c: 129: TM1640_diplayOFF();
  3264  0081  26D0               	fcall	_TM1640_diplayOFF
  3265                           
  3266                           ;main.c: 130: TM1640_LEDarray(0);
  3267  0082  3000               	movlw	0
  3268  0083  26E9               	fcall	_TM1640_LEDarray
  3269                           
  3270                           ;main.c: 135: unsigned char sec=0;
  3271  0084  0020               	movlb	0	; select bank0
  3272  0085  01C2               	clrf	main@sec
  3273                           
  3274                           ;main.c: 136: unsigned char waterCounts=0;
  3275  0086  01C3               	clrf	main@waterCounts
  3276                           
  3277                           ;main.c: 137: TM1640_LEDarray(2);
  3278  0087  3002               	movlw	2
  3279  0088  26E9               	fcall	_TM1640_LEDarray
  3280                           
  3281                           ;main.c: 138: PIR0bits.TMR0IF=0;
  3282  0089  0020               	movlb	0	; select bank0
  3283  008A  1290               	bcf	16,5	;volatile
  3284                           
  3285                           ;main.c: 139: TM1640_dispINT(0);
  3286  008B  3000               	movlw	0
  3287  008C  00A0               	movwf	TM1640_dispINT@value
  3288  008D  00A1               	movwf	TM1640_dispINT@value+1
  3289  008E  24BD               	fcall	_TM1640_dispINT
  3290                           
  3291                           ;main.c: 140: adc_integration = 0;
  3292  008F  3000               	movlw	0
  3293  0090  0020               	movlb	0	; select bank0
  3294  0091  00CC               	movwf	main@adc_integration+3
  3295  0092  3000               	movlw	0
  3296  0093  00CB               	movwf	main@adc_integration+2
  3297  0094  3000               	movlw	0
  3298  0095  00CA               	movwf	main@adc_integration+1
  3299  0096  3000               	movlw	0
  3300  0097  00C9               	movwf	main@adc_integration
  3301                           
  3302                           ;main.c: 141: waterCounts = 0;
  3303  0098  01C3               	clrf	main@waterCounts
  3304  0099                     l2622:
  3305                           
  3306                           ;main.c: 144: if (PORTAbits.RA1==0) {
  3307  0099  188C               	btfsc	12,1	;volatile
  3308  009A  28FF               	goto	l2652
  3309                           
  3310                           ;main.c: 145: do { LATCbits.LATC5 = 1; } while(0);
  3311  009B  0022               	movlb	2	; select bank2
  3312  009C  168E               	bsf	14,5	;volatile
  3313                           
  3314                           ;main.c: 146: TMR0_WriteTimer(timer0ReloadVal16bit3);
  3315  009D  0020               	movlb	0	; select bank0
  3316  009E  0850               	movf	main@timer0ReloadVal16bit3+1,w
  3317  009F  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  3318  00A0  084F               	movf	main@timer0ReloadVal16bit3,w
  3319  00A1  00F2               	movwf	TMR0_WriteTimer@timerVal
  3320  00A2  27B6               	fcall	_TMR0_WriteTimer
  3321                           
  3322                           ;main.c: 147: TMR0_StartTimer();
  3323  00A3  27D5               	fcall	_TMR0_StartTimer
  3324                           
  3325                           ;main.c: 148: TM1640_dispINT(sec);
  3326  00A4  0842               	movf	main@sec,w
  3327  00A5  00AE               	movwf	??_main
  3328  00A6  01AF               	clrf	??_main+1
  3329  00A7  082E               	movf	??_main,w
  3330  00A8  00A0               	movwf	TM1640_dispINT@value
  3331  00A9  082F               	movf	??_main+1,w
  3332  00AA  00A1               	movwf	TM1640_dispINT@value+1
  3333  00AB  24BD               	fcall	_TM1640_dispINT
  3334  00AC                     l2644:	
  3335                           ;main.c: 149: while(PORTAbits.RA1==0){
  3336                           
  3337  00AC  0020               	movlb	0	; select bank0
  3338  00AD  188C               	btfsc	12,1	;volatile
  3339  00AE  28F5               	goto	l326
  3340                           
  3341                           ;main.c: 150: if (PIR0bits.TMR0IF){
  3342  00AF  1E90               	btfss	16,5	;volatile
  3343  00B0  28AC               	goto	l2644
  3344                           
  3345                           ;main.c: 151: adcCounts = ADC_GetConversion(ADC);
  3346  00B1  3014               	movlw	20
  3347  00B2  2702               	fcall	_ADC_GetConversion
  3348  00B3  0873               	movf	?_ADC_GetConversion+1,w
  3349  00B4  0020               	movlb	0	; select bank0
  3350  00B5  00CE               	movwf	main@adcCounts+1
  3351  00B6  0872               	movf	?_ADC_GetConversion,w
  3352  00B7  00CD               	movwf	main@adcCounts
  3353                           
  3354                           ;main.c: 152: adc_integration = adc_integration + adcCounts;
  3355  00B8  0849               	movf	main@adc_integration,w
  3356  00B9  00AE               	movwf	??_main
  3357  00BA  084A               	movf	main@adc_integration+1,w
  3358  00BB  00AF               	movwf	??_main+1
  3359  00BC  084B               	movf	main@adc_integration+2,w
  3360  00BD  00B0               	movwf	??_main+2
  3361  00BE  084C               	movf	main@adc_integration+3,w
  3362  00BF  00B1               	movwf	??_main+3
  3363  00C0  084D               	movf	main@adcCounts,w
  3364  00C1  00B2               	movwf	??_main+4
  3365  00C2  084E               	movf	main@adcCounts+1,w
  3366  00C3  00B3               	movwf	??_main+5
  3367  00C4  01B4               	clrf	??_main+6
  3368  00C5  01B5               	clrf	??_main+7
  3369  00C6  0832               	movf	??_main+4,w
  3370  00C7  07AE               	addwf	??_main,f
  3371  00C8  0833               	movf	??_main+5,w
  3372  00C9  3DAF               	addwfc	??_main+1,f
  3373  00CA  0834               	movf	??_main+6,w
  3374  00CB  3DB0               	addwfc	??_main+2,f
  3375  00CC  0835               	movf	??_main+7,w
  3376  00CD  3DB1               	addwfc	??_main+3,f
  3377  00CE  0831               	movf	??_main+3,w
  3378  00CF  00CC               	movwf	main@adc_integration+3
  3379  00D0  0830               	movf	??_main+2,w
  3380  00D1  00CB               	movwf	main@adc_integration+2
  3381  00D2  082F               	movf	??_main+1,w
  3382  00D3  00CA               	movwf	main@adc_integration+1
  3383  00D4  082E               	movf	??_main,w
  3384  00D5  00C9               	movwf	main@adc_integration
  3385                           
  3386                           ;main.c: 153: waterCounts=waterCounts+1;
  3387  00D6  0843               	movf	main@waterCounts,w
  3388  00D7  3E01               	addlw	1
  3389  00D8  00AE               	movwf	??_main
  3390  00D9  082E               	movf	??_main,w
  3391  00DA  00C3               	movwf	main@waterCounts
  3392                           
  3393                           ;main.c: 154: sec=waterCounts/4;
  3394  00DB  0843               	movf	main@waterCounts,w
  3395  00DC  00AE               	movwf	??_main
  3396  00DD  3002               	movlw	2
  3397  00DE                     u1565:
  3398  00DE  36AE               	lsrf	??_main,f
  3399  00DF  0B89               	decfsz	9,f
  3400  00E0  28DE               	goto	u1565
  3401  00E1  082E               	movf	??_main,w
  3402  00E2  00AF               	movwf	??_main+1
  3403  00E3  082F               	movf	??_main+1,w
  3404  00E4  00C2               	movwf	main@sec
  3405                           
  3406                           ;main.c: 155: TM1640_dispINT(sec);
  3407  00E5  0842               	movf	main@sec,w
  3408  00E6  00AE               	movwf	??_main
  3409  00E7  01AF               	clrf	??_main+1
  3410  00E8  082E               	movf	??_main,w
  3411  00E9  00A0               	movwf	TM1640_dispINT@value
  3412  00EA  082F               	movf	??_main+1,w
  3413  00EB  00A1               	movwf	TM1640_dispINT@value+1
  3414  00EC  24BD               	fcall	_TM1640_dispINT
  3415                           
  3416                           ;main.c: 156: PIR0bits.TMR0IF=0;
  3417  00ED  0020               	movlb	0	; select bank0
  3418  00EE  1290               	bcf	16,5	;volatile
  3419                           
  3420                           ;main.c: 157: TMR0_WriteTimer(timer0ReloadVal16bit3);
  3421  00EF  0850               	movf	main@timer0ReloadVal16bit3+1,w
  3422  00F0  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  3423  00F1  084F               	movf	main@timer0ReloadVal16bit3,w
  3424  00F2  00F2               	movwf	TMR0_WriteTimer@timerVal
  3425  00F3  27B6               	fcall	_TMR0_WriteTimer
  3426  00F4  28AC               	goto	l2644
  3427  00F5                     l326:	
  3428                           ;main.c: 158: };main.c: 159: };main.c: 160: do { LATCbits.LATC5 = 0; } while(0);
  3429                           
  3430  00F5  0022               	movlb	2	; select bank2
  3431  00F6  128E               	bcf	14,5	;volatile
  3432                           
  3433                           ;main.c: 161: TMR0_WriteTimer(timer0ReloadVal16bit3);
  3434  00F7  0020               	movlb	0	; select bank0
  3435  00F8  0850               	movf	main@timer0ReloadVal16bit3+1,w
  3436  00F9  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  3437  00FA  084F               	movf	main@timer0ReloadVal16bit3,w
  3438  00FB  00F2               	movwf	TMR0_WriteTimer@timerVal
  3439  00FC  27B6               	fcall	_TMR0_WriteTimer
  3440                           
  3441                           ;main.c: 162: PIR0bits.TMR0IF=0;
  3442  00FD  1290               	bcf	16,5	;volatile
  3443                           
  3444                           ;main.c: 163: TMR0_StopTimer();
  3445  00FE  27D2               	fcall	_TMR0_StopTimer
  3446  00FF                     l2652:
  3447                           
  3448                           ;main.c: 164: };main.c: 166: if (PORTAbits.RA2 + PORTAbits.RA2 + PORTAbits.RA2==0) {
  3449  00FF  0C0C               	rrf	12,w	;volatile
  3450  0100  0C89               	rrf	9,f
  3451  0101  3901               	andlw	1
  3452  0102  00AE               	movwf	??_main
  3453  0103  01AF               	clrf	??_main+1
  3454  0104  0C0C               	rrf	12,w	;volatile
  3455  0105  0C89               	rrf	9,f
  3456  0106  3901               	andlw	1
  3457  0107  00B0               	movwf	??_main+2
  3458  0108  0C0C               	rrf	12,w	;volatile
  3459  0109  0C89               	rrf	9,f
  3460  010A  3901               	andlw	1
  3461  010B  0730               	addwf	??_main+2,w
  3462  010C  00B1               	movwf	??_main+3
  3463  010D  01B2               	clrf	??_main+4
  3464  010E  0DB2               	rlf	??_main+4,f
  3465  010F  082E               	movf	??_main,w
  3466  0110  0731               	addwf	??_main+3,w
  3467  0111  00B3               	movwf	??_main+5
  3468  0112  082F               	movf	??_main+1,w
  3469  0113  3D32               	addwfc	??_main+4,w
  3470  0114  00B4               	movwf	??_main+6
  3471  0115  0833               	movf	??_main+5,w
  3472  0116  0434               	iorwf	??_main+6,w
  3473  0117  1D03               	btfss	3,2
  3474  0118  2899               	goto	l2622
  3475                           
  3476                           ;main.c: 167: _delay((unsigned long)((300)*(1000000/4000.0)));
  3477  0119  3062               	movlw	98
  3478  011A  0020               	movlb	0	; select bank0
  3479  011B  00AE               	movwf	??_main
  3480  011C  3065               	movlw	101
  3481  011D                     u1837:
  3482  011D  0B89               	decfsz	9,f
  3483  011E  291D               	goto	u1837
  3484  011F  0BAE               	decfsz	??_main,f
  3485  0120  291D               	goto	u1837
  3486  0121  3200               	nop2
  3487                           
  3488                           ;main.c: 169: };main.c: 170: };main.c: 171: target_integration = adc_integration;
  3489                           
  3490                           ;main.c: 168: break;
  3491  0122  0020               	movlb	0	; select bank0
  3492  0123  084C               	movf	main@adc_integration+3,w
  3493  0124  00BD               	movwf	main@target_integration+3
  3494  0125  084B               	movf	main@adc_integration+2,w
  3495  0126  00BC               	movwf	main@target_integration+2
  3496  0127  084A               	movf	main@adc_integration+1,w
  3497  0128  00BB               	movwf	main@target_integration+1
  3498  0129  0849               	movf	main@adc_integration,w
  3499  012A  00BA               	movwf	main@target_integration
  3500                           
  3501                           ;main.c: 172: TM1640_diplayOFF();
  3502  012B  26D0               	fcall	_TM1640_diplayOFF
  3503                           
  3504                           ;main.c: 173: TM1640_LEDarray(0);
  3505  012C  3000               	movlw	0
  3506  012D  26E9               	fcall	_TM1640_LEDarray
  3507                           
  3508                           ;main.c: 178: struct interval_setting {;main.c: 179: unsigned int hour;;main.c: 180: uns
      +                          igned char digit_high;;main.c: 181: unsigned char digit_low;;main.c: 182: unsigned char 
      +                          dot;;main.c: 183: };;main.c: 184: const static struct interval_setting interval[]={;main
      +                          .c: 185: { 12, 0, 5, 1},;main.c: 186: { 24, 0, 1, 0},;main.c: 187: { 48, 0, 2, 0},;main.
      +                          c: 188: { 36, 0, 3, 0},;main.c: 189: {168, 0, 7, 0},;main.c: 190: {336, 1, 4, 0};main.c:
      +                           191: };;main.c: 192: TM1640_LEDarray(3);
  3509  012E  3003               	movlw	3
  3510  012F  26E9               	fcall	_TM1640_LEDarray
  3511                           
  3512                           ;main.c: 193: PIR0bits.TMR0IF=0;
  3513  0130  0020               	movlb	0	; select bank0
  3514  0131  1290               	bcf	16,5	;volatile
  3515                           
  3516                           ;main.c: 194: char index=0;
  3517  0132  01D3               	clrf	main@index
  3518                           
  3519                           ;main.c: 195: TM1640_dispDEC(interval[index].digit_high,interval[index].digit_low,interv
      +                          al[index].dot);
  3520  0133  0853               	movf	main@index,w
  3521  0134  00AE               	movwf	??_main
  3522  0135  01AF               	clrf	??_main+1
  3523  0136  082E               	movf	??_main,w
  3524  0137  00F6               	movwf	___wmul@multiplier
  3525  0138  082F               	movf	??_main+1,w
  3526  0139  00F7               	movwf	___wmul@multiplier+1
  3527  013A  3005               	movlw	5
  3528  013B  00F8               	movwf	___wmul@multiplicand
  3529  013C  3000               	movlw	0
  3530  013D  00F9               	movwf	___wmul@multiplicand+1
  3531  013E  2662               	fcall	___wmul
  3532  013F  0877               	movf	?___wmul+1,w
  3533  0140  0085               	movwf	5
  3534  0141  0876               	movf	?___wmul,w
  3535  0142  0084               	movwf	4
  3536  0143  3047               	movlw	low ((main@interval+3)| (0+32768))
  3537  0144  0784               	addwf	4,f
  3538  0145  3086               	movlw	high ((main@interval+3)| (0+32768))
  3539  0146  3D85               	addwfc	5,f
  3540  0147  0800               	movf	0,w	;code access
  3541  0148  00B0               	movwf	??_main+2
  3542  0149  0830               	movf	??_main+2,w
  3543  014A  00A2               	movwf	TM1640_dispDEC@digit_low
  3544  014B  0853               	movf	main@index,w
  3545  014C  00B1               	movwf	??_main+3
  3546  014D  01B2               	clrf	??_main+4
  3547  014E  0831               	movf	??_main+3,w
  3548  014F  00F6               	movwf	___wmul@multiplier
  3549  0150  0832               	movf	??_main+4,w
  3550  0151  00F7               	movwf	___wmul@multiplier+1
  3551  0152  3005               	movlw	5
  3552  0153  00F8               	movwf	___wmul@multiplicand
  3553  0154  3000               	movlw	0
  3554  0155  00F9               	movwf	___wmul@multiplicand+1
  3555  0156  2662               	fcall	___wmul
  3556  0157  0877               	movf	?___wmul+1,w
  3557  0158  0085               	movwf	5
  3558  0159  0876               	movf	?___wmul,w
  3559  015A  0084               	movwf	4
  3560  015B  3048               	movlw	low ((main@interval+4)| (0+32768))
  3561  015C  0784               	addwf	4,f
  3562  015D  3086               	movlw	high ((main@interval+4)| (0+32768))
  3563  015E  3D85               	addwfc	5,f
  3564  015F  0800               	movf	0,w	;code access
  3565  0160  00B3               	movwf	??_main+5
  3566  0161  0833               	movf	??_main+5,w
  3567  0162  00A3               	movwf	TM1640_dispDEC@dot
  3568  0163  0853               	movf	main@index,w
  3569  0164  00B4               	movwf	??_main+6
  3570  0165  01B5               	clrf	??_main+7
  3571  0166  0834               	movf	??_main+6,w
  3572  0167  00F6               	movwf	___wmul@multiplier
  3573  0168  0835               	movf	??_main+7,w
  3574  0169  00F7               	movwf	___wmul@multiplier+1
  3575  016A  3005               	movlw	5
  3576  016B  00F8               	movwf	___wmul@multiplicand
  3577  016C  3000               	movlw	0
  3578  016D  00F9               	movwf	___wmul@multiplicand+1
  3579  016E  2662               	fcall	___wmul
  3580  016F  0877               	movf	?___wmul+1,w
  3581  0170  0085               	movwf	5
  3582  0171  0876               	movf	?___wmul,w
  3583  0172  0084               	movwf	4
  3584  0173  3046               	movlw	low ((main@interval+2)| (0+32768))
  3585  0174  0784               	addwf	4,f
  3586  0175  3086               	movlw	high ((main@interval+2)| (0+32768))
  3587  0176  3D85               	addwfc	5,f
  3588  0177  0800               	movf	0,w	;code access
  3589  0178  2503               	fcall	_TM1640_dispDEC
  3590  0179                     l2670:
  3591                           
  3592                           ;main.c: 198: if (PORTAbits.RA1 + PORTAbits.RA1 + PORTAbits.RA1==0){
  3593  0179  0020               	movlb	0	; select bank0
  3594  017A  0C0C               	rrf	12,w	;volatile
  3595  017B  3901               	andlw	1
  3596  017C  00AE               	movwf	??_main
  3597  017D  01AF               	clrf	??_main+1
  3598  017E  0C0C               	rrf	12,w	;volatile
  3599  017F  3901               	andlw	1
  3600  0180  00B0               	movwf	??_main+2
  3601  0181  0C0C               	rrf	12,w	;volatile
  3602  0182  3901               	andlw	1
  3603  0183  0730               	addwf	??_main+2,w
  3604  0184  00B1               	movwf	??_main+3
  3605  0185  01B2               	clrf	??_main+4
  3606  0186  0DB2               	rlf	??_main+4,f
  3607  0187  082E               	movf	??_main,w
  3608  0188  0731               	addwf	??_main+3,w
  3609  0189  00B3               	movwf	??_main+5
  3610  018A  082F               	movf	??_main+1,w
  3611  018B  3D32               	addwfc	??_main+4,w
  3612  018C  00B4               	movwf	??_main+6
  3613  018D  0833               	movf	??_main+5,w
  3614  018E  0434               	iorwf	??_main+6,w
  3615  018F  1D03               	btfss	3,2
  3616  0190  29EB               	goto	l2684
  3617                           
  3618                           ;main.c: 199: if (index < 5) {
  3619  0191  3005               	movlw	5
  3620  0192  0253               	subwf	main@index,w
  3621  0193  1803               	skipnc
  3622  0194  299A               	goto	l2678
  3623                           
  3624                           ;main.c: 200: index++;
  3625  0195  3001               	movlw	1
  3626  0196  00AE               	movwf	??_main
  3627  0197  082E               	movf	??_main,w
  3628  0198  07D3               	addwf	main@index,f
  3629                           
  3630                           ;main.c: 202: } else {
  3631  0199  299B               	goto	l2676
  3632  019A                     l2678:
  3633                           
  3634                           ;main.c: 203: index=0;
  3635  019A  01D3               	clrf	main@index
  3636  019B                     l2676:
  3637                           
  3638                           ;main.c: 201: _delay((unsigned long)((200)*(1000000/4000.0)));
  3639  019B  3041               	movlw	65
  3640  019C  0020               	movlb	0	; select bank0
  3641  019D  00AE               	movwf	??_main
  3642  019E  30EE               	movlw	238
  3643  019F                     u1847:
  3644  019F  0B89               	decfsz	9,f
  3645  01A0  299F               	goto	u1847
  3646  01A1  0BAE               	decfsz	??_main,f
  3647  01A2  299F               	goto	u1847
  3648  01A3  0000               	nop
  3649                           
  3650                           ;main.c: 205: };main.c: 206: TM1640_dispDEC(interval[index].digit_high,interval[index].d
      +                          igit_low,interval[index].dot);
  3651  01A4  0020               	movlb	0	; select bank0
  3652  01A5  0853               	movf	main@index,w
  3653  01A6  00AE               	movwf	??_main
  3654  01A7  01AF               	clrf	??_main+1
  3655  01A8  082E               	movf	??_main,w
  3656  01A9  00F6               	movwf	___wmul@multiplier
  3657  01AA  082F               	movf	??_main+1,w
  3658  01AB  00F7               	movwf	___wmul@multiplier+1
  3659  01AC  3005               	movlw	5
  3660  01AD  00F8               	movwf	___wmul@multiplicand
  3661  01AE  3000               	movlw	0
  3662  01AF  00F9               	movwf	___wmul@multiplicand+1
  3663  01B0  2662               	fcall	___wmul
  3664  01B1  0877               	movf	?___wmul+1,w
  3665  01B2  0085               	movwf	5
  3666  01B3  0876               	movf	?___wmul,w
  3667  01B4  0084               	movwf	4
  3668  01B5  3047               	movlw	low ((main@interval+3)| (0+32768))
  3669  01B6  0784               	addwf	4,f
  3670  01B7  3086               	movlw	high ((main@interval+3)| (0+32768))
  3671  01B8  3D85               	addwfc	5,f
  3672  01B9  0800               	movf	0,w	;code access
  3673  01BA  00B0               	movwf	??_main+2
  3674  01BB  0830               	movf	??_main+2,w
  3675  01BC  00A2               	movwf	TM1640_dispDEC@digit_low
  3676  01BD  0853               	movf	main@index,w
  3677  01BE  00B1               	movwf	??_main+3
  3678  01BF  01B2               	clrf	??_main+4
  3679  01C0  0831               	movf	??_main+3,w
  3680  01C1  00F6               	movwf	___wmul@multiplier
  3681  01C2  0832               	movf	??_main+4,w
  3682  01C3  00F7               	movwf	___wmul@multiplier+1
  3683  01C4  3005               	movlw	5
  3684  01C5  00F8               	movwf	___wmul@multiplicand
  3685  01C6  3000               	movlw	0
  3686  01C7  00F9               	movwf	___wmul@multiplicand+1
  3687  01C8  2662               	fcall	___wmul
  3688  01C9  0877               	movf	?___wmul+1,w
  3689  01CA  0085               	movwf	5
  3690  01CB  0876               	movf	?___wmul,w
  3691  01CC  0084               	movwf	4
  3692  01CD  3048               	movlw	low ((main@interval+4)| (0+32768))
  3693  01CE  0784               	addwf	4,f
  3694  01CF  3086               	movlw	high ((main@interval+4)| (0+32768))
  3695  01D0  3D85               	addwfc	5,f
  3696  01D1  0800               	movf	0,w	;code access
  3697  01D2  00B3               	movwf	??_main+5
  3698  01D3  0833               	movf	??_main+5,w
  3699  01D4  00A3               	movwf	TM1640_dispDEC@dot
  3700  01D5  0853               	movf	main@index,w
  3701  01D6  00B4               	movwf	??_main+6
  3702  01D7  01B5               	clrf	??_main+7
  3703  01D8  0834               	movf	??_main+6,w
  3704  01D9  00F6               	movwf	___wmul@multiplier
  3705  01DA  0835               	movf	??_main+7,w
  3706  01DB  00F7               	movwf	___wmul@multiplier+1
  3707  01DC  3005               	movlw	5
  3708  01DD  00F8               	movwf	___wmul@multiplicand
  3709  01DE  3000               	movlw	0
  3710  01DF  00F9               	movwf	___wmul@multiplicand+1
  3711  01E0  2662               	fcall	___wmul
  3712  01E1  0877               	movf	?___wmul+1,w
  3713  01E2  0085               	movwf	5
  3714  01E3  0876               	movf	?___wmul,w
  3715  01E4  0084               	movwf	4
  3716  01E5  3046               	movlw	low ((main@interval+2)| (0+32768))
  3717  01E6  0784               	addwf	4,f
  3718  01E7  3086               	movlw	high ((main@interval+2)| (0+32768))
  3719  01E8  3D85               	addwfc	5,f
  3720  01E9  0800               	movf	0,w	;code access
  3721  01EA  2503               	fcall	_TM1640_dispDEC
  3722  01EB                     l2684:
  3723                           
  3724                           ;main.c: 207: };main.c: 209: if (PORTAbits.RA2 + PORTAbits.RA2 + PORTAbits.RA2==0) {
  3725  01EB  0020               	movlb	0	; select bank0
  3726  01EC  0C0C               	rrf	12,w	;volatile
  3727  01ED  0C89               	rrf	9,f
  3728  01EE  3901               	andlw	1
  3729  01EF  00AE               	movwf	??_main
  3730  01F0  01AF               	clrf	??_main+1
  3731  01F1  0C0C               	rrf	12,w	;volatile
  3732  01F2  0C89               	rrf	9,f
  3733  01F3  3901               	andlw	1
  3734  01F4  00B0               	movwf	??_main+2
  3735  01F5  0C0C               	rrf	12,w	;volatile
  3736  01F6  0C89               	rrf	9,f
  3737  01F7  3901               	andlw	1
  3738  01F8  0730               	addwf	??_main+2,w
  3739  01F9  00B1               	movwf	??_main+3
  3740  01FA  01B2               	clrf	??_main+4
  3741  01FB  0DB2               	rlf	??_main+4,f
  3742  01FC  082E               	movf	??_main,w
  3743  01FD  0731               	addwf	??_main+3,w
  3744  01FE  00B3               	movwf	??_main+5
  3745  01FF  082F               	movf	??_main+1,w
  3746  0200  3D32               	addwfc	??_main+4,w
  3747  0201  00B4               	movwf	??_main+6
  3748  0202  0833               	movf	??_main+5,w
  3749  0203  0434               	iorwf	??_main+6,w
  3750  0204  1D03               	btfss	3,2
  3751  0205  2979               	goto	l2670
  3752                           
  3753                           ;main.c: 210: target_count=(unsigned long)(interval[index].hour*timeUnitH);
  3754  0206  3005               	movlw	5
  3755  0207  00F8               	movwf	___wmul@multiplicand
  3756  0208  3000               	movlw	0
  3757  0209  00F9               	movwf	___wmul@multiplicand+1
  3758  020A  0853               	movf	main@index,w
  3759  020B  00AE               	movwf	??_main
  3760  020C  01AF               	clrf	??_main+1
  3761  020D  082E               	movf	??_main,w
  3762  020E  00F6               	movwf	___wmul@multiplier
  3763  020F  082F               	movf	??_main+1,w
  3764  0210  00F7               	movwf	___wmul@multiplier+1
  3765  0211  2662               	fcall	___wmul
  3766  0212  0877               	movf	?___wmul+1,w
  3767  0213  0085               	movwf	5
  3768  0214  0876               	movf	?___wmul,w
  3769  0215  0084               	movwf	4
  3770  0216  3044               	movlw	low (main@interval| (0+32768))
  3771  0217  0784               	addwf	4,f
  3772  0218  3086               	movlw	high (main@interval| (0+32768))
  3773  0219  3D85               	addwfc	5,f
  3774  021A  3F00               	moviw [0]fsr0
  3775  021B  00B0               	movwf	??_main+2
  3776  021C  3F01               	moviw [1]fsr0
  3777  021D  00B1               	movwf	??_main+3
  3778  021E  01B2               	clrf	??_main+4
  3779  021F  01B3               	clrf	??_main+5
  3780  0220  0833               	movf	??_main+5,w
  3781  0221  00A5               	movwf	___lmul@multiplier+3
  3782  0222  0832               	movf	??_main+4,w
  3783  0223  00A4               	movwf	___lmul@multiplier+2
  3784  0224  0831               	movf	??_main+3,w
  3785  0225  00A3               	movwf	___lmul@multiplier+1
  3786  0226  0830               	movf	??_main+2,w
  3787  0227  00A2               	movwf	___lmul@multiplier
  3788  0228  3000               	movlw	0
  3789  0229  00A9               	movwf	___lmul@multiplicand+3
  3790  022A  3000               	movlw	0
  3791  022B  00A8               	movwf	___lmul@multiplicand+2
  3792  022C  300E               	movlw	14
  3793  022D  00A7               	movwf	___lmul@multiplicand+1
  3794  022E  3010               	movlw	16
  3795  022F  00A6               	movwf	___lmul@multiplicand
  3796  0230  25A4               	fcall	___lmul
  3797  0231  0825               	movf	?___lmul+3,w
  3798  0232  00D7               	movwf	_target_count+3
  3799  0233  0824               	movf	?___lmul+2,w
  3800  0234  00D6               	movwf	_target_count+2
  3801  0235  0823               	movf	?___lmul+1,w
  3802  0236  00D5               	movwf	_target_count+1
  3803  0237  0822               	movf	?___lmul,w
  3804  0238  00D4               	movwf	_target_count
  3805                           
  3806                           ;main.c: 211: _delay((unsigned long)((300)*(1000000/4000.0)));
  3807  0239  3062               	movlw	98
  3808  023A  0020               	movlb	0	; select bank0
  3809  023B  00AE               	movwf	??_main
  3810  023C  3065               	movlw	101
  3811  023D                     u1857:
  3812  023D  0B89               	decfsz	9,f
  3813  023E  2A3D               	goto	u1857
  3814  023F  0BAE               	decfsz	??_main,f
  3815  0240  2A3D               	goto	u1857
  3816  0241  3200               	nop2
  3817                           
  3818                           ;main.c: 213: };main.c: 214: };main.c: 215: TM1640_diplayOFF();
  3819                           
  3820                           ;main.c: 212: break;
  3821  0242  26D0               	fcall	_TM1640_diplayOFF
  3822                           
  3823                           ;main.c: 216: TM1640_LEDarray(0);
  3824  0243  3000               	movlw	0
  3825  0244  26E9               	fcall	_TM1640_LEDarray
  3826                           
  3827                           ;main.c: 221: TM1640_LEDarray(4);
  3828  0245  3004               	movlw	4
  3829  0246  26E9               	fcall	_TM1640_LEDarray
  3830                           
  3831                           ;main.c: 222: TM1640_dispINT(0);
  3832  0247  3000               	movlw	0
  3833  0248  0020               	movlb	0	; select bank0
  3834  0249  00A0               	movwf	TM1640_dispINT@value
  3835  024A  00A1               	movwf	TM1640_dispINT@value+1
  3836  024B  24BD               	fcall	_TM1640_dispINT
  3837  024C  2AD9               	goto	l2692
  3838  024D                     l2694:
  3839                           
  3840                           ;main.c: 227: TMR0_Reload();
  3841  024D  27BB               	fcall	_TMR0_Reload
  3842                           
  3843                           ;main.c: 228: TMR0_StartTimer();
  3844  024E  27D5               	fcall	_TMR0_StartTimer
  3845  024F                     l2698:
  3846                           
  3847                           ;main.c: 231: if (PIR0bits.TMR0IF) {
  3848  024F  1E90               	btfss	16,5	;volatile
  3849  0250  2A9F               	goto	l2728
  3850                           
  3851                           ;main.c: 232: PIR0bits.TMR0IF=0;
  3852  0251  1290               	bcf	16,5	;volatile
  3853                           
  3854                           ;main.c: 233: delay_counts++;
  3855  0252  3001               	movlw	1
  3856  0253  07D1               	addwf	main@delay_counts,f
  3857  0254  3000               	movlw	0
  3858  0255  3DD2               	addwfc	main@delay_counts+1,f
  3859                           
  3860                           ;main.c: 234: if (delay_counts > 24) delay_counts=0;
  3861  0256  3000               	movlw	0
  3862  0257  0252               	subwf	main@delay_counts+1,w
  3863  0258  3019               	movlw	25
  3864  0259  1903               	skipnz
  3865  025A  0251               	subwf	main@delay_counts,w
  3866  025B  1C03               	skipc
  3867  025C  2A5F               	goto	l2706
  3868  025D  01D1               	clrf	main@delay_counts
  3869  025E  01D2               	clrf	main@delay_counts+1
  3870  025F                     l2706:
  3871                           
  3872                           ;main.c: 235: TM1640_dispINT(delay_counts);
  3873  025F  0852               	movf	main@delay_counts+1,w
  3874  0260  00A1               	movwf	TM1640_dispINT@value+1
  3875  0261  0851               	movf	main@delay_counts,w
  3876  0262  00A0               	movwf	TM1640_dispINT@value
  3877  0263  24BD               	fcall	_TM1640_dispINT
  3878                           
  3879                           ;main.c: 236: TMR0_WriteTimer(timer0ReloadVal16bit2);
  3880  0264  0020               	movlb	0	; select bank0
  3881  0265  0839               	movf	main@timer0ReloadVal16bit2+1,w
  3882  0266  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  3883  0267  0838               	movf	main@timer0ReloadVal16bit2,w
  3884  0268  00F2               	movwf	TMR0_WriteTimer@timerVal
  3885  0269  27B6               	fcall	_TMR0_WriteTimer
  3886  026A                     l2710:
  3887                           
  3888                           ;main.c: 238: if(PIR0bits.TMR0IF){
  3889  026A  1E90               	btfss	16,5	;volatile
  3890  026B  2A84               	goto	l2724
  3891                           
  3892                           ;main.c: 239: PIR0bits.TMR0IF=0;
  3893  026C  1290               	bcf	16,5	;volatile
  3894                           
  3895                           ;main.c: 240: TMR0_WriteTimer(timer0ReloadVal16bit3);
  3896  026D  0850               	movf	main@timer0ReloadVal16bit3+1,w
  3897  026E  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  3898  026F  084F               	movf	main@timer0ReloadVal16bit3,w
  3899  0270  00F2               	movwf	TMR0_WriteTimer@timerVal
  3900  0271  27B6               	fcall	_TMR0_WriteTimer
  3901                           
  3902                           ;main.c: 241: delay_counts++;
  3903  0272  3001               	movlw	1
  3904  0273  07D1               	addwf	main@delay_counts,f
  3905  0274  3000               	movlw	0
  3906  0275  3DD2               	addwfc	main@delay_counts+1,f
  3907                           
  3908                           ;main.c: 242: if (delay_counts > 24) delay_counts=0;
  3909  0276  3000               	movlw	0
  3910  0277  0252               	subwf	main@delay_counts+1,w
  3911  0278  3019               	movlw	25
  3912  0279  1903               	skipnz
  3913  027A  0251               	subwf	main@delay_counts,w
  3914  027B  1C03               	skipc
  3915  027C  2A7F               	goto	l2722
  3916  027D  01D1               	clrf	main@delay_counts
  3917  027E  01D2               	clrf	main@delay_counts+1
  3918  027F                     l2722:
  3919                           
  3920                           ;main.c: 243: TM1640_dispINT(delay_counts);
  3921  027F  0852               	movf	main@delay_counts+1,w
  3922  0280  00A1               	movwf	TM1640_dispINT@value+1
  3923  0281  0851               	movf	main@delay_counts,w
  3924  0282  00A0               	movwf	TM1640_dispINT@value
  3925  0283  24BD               	fcall	_TM1640_dispINT
  3926  0284                     l2724:
  3927                           
  3928                           ;main.c: 244: };main.c: 245: if(PORTAbits.RA1+PORTAbits.RA1+PORTAbits.RA1==3){
  3929  0284  0020               	movlb	0	; select bank0
  3930  0285  0C0C               	rrf	12,w	;volatile
  3931  0286  3901               	andlw	1
  3932  0287  00AE               	movwf	??_main
  3933  0288  01AF               	clrf	??_main+1
  3934  0289  0C0C               	rrf	12,w	;volatile
  3935  028A  3901               	andlw	1
  3936  028B  00B0               	movwf	??_main+2
  3937  028C  0C0C               	rrf	12,w	;volatile
  3938  028D  3901               	andlw	1
  3939  028E  0730               	addwf	??_main+2,w
  3940  028F  00B1               	movwf	??_main+3
  3941  0290  01B2               	clrf	??_main+4
  3942  0291  0DB2               	rlf	??_main+4,f
  3943  0292  082E               	movf	??_main,w
  3944  0293  0731               	addwf	??_main+3,w
  3945  0294  00B3               	movwf	??_main+5
  3946  0295  082F               	movf	??_main+1,w
  3947  0296  3D32               	addwfc	??_main+4,w
  3948  0297  00B4               	movwf	??_main+6
  3949  0298  3003               	movlw	3
  3950  0299  0633               	xorwf	??_main+5,w
  3951  029A  0434               	iorwf	??_main+6,w
  3952  029B  1D03               	btfss	3,2
  3953  029C  2A6A               	goto	l2710
  3954                           
  3955                           ;main.c: 246: TMR0_StopTimer();
  3956  029D  27D2               	fcall	_TMR0_StopTimer
  3957                           
  3958                           ;main.c: 247: goto BEGIN;
  3959  029E  2AD9               	goto	l2692
  3960  029F                     l2728:
  3961                           
  3962                           ;main.c: 248: };main.c: 249: };main.c: 250: };main.c: 252: if (PORTAbits.RA1+ PORTAbits.
      +                          RA1+ PORTAbits.RA1==0){
  3963  029F  0C0C               	rrf	12,w	;volatile
  3964  02A0  3901               	andlw	1
  3965  02A1  00AE               	movwf	??_main
  3966  02A2  01AF               	clrf	??_main+1
  3967  02A3  0C0C               	rrf	12,w	;volatile
  3968  02A4  3901               	andlw	1
  3969  02A5  00B0               	movwf	??_main+2
  3970  02A6  0C0C               	rrf	12,w	;volatile
  3971  02A7  3901               	andlw	1
  3972  02A8  0730               	addwf	??_main+2,w
  3973  02A9  00B1               	movwf	??_main+3
  3974  02AA  01B2               	clrf	??_main+4
  3975  02AB  0DB2               	rlf	??_main+4,f
  3976  02AC  082E               	movf	??_main,w
  3977  02AD  0731               	addwf	??_main+3,w
  3978  02AE  00B3               	movwf	??_main+5
  3979  02AF  082F               	movf	??_main+1,w
  3980  02B0  3D32               	addwfc	??_main+4,w
  3981  02B1  00B4               	movwf	??_main+6
  3982  02B2  0833               	movf	??_main+5,w
  3983  02B3  0434               	iorwf	??_main+6,w
  3984  02B4  1D03               	btfss	3,2
  3985  02B5  2A4F               	goto	l2698
  3986                           
  3987                           ;main.c: 253: _delay((unsigned long)((200)*(1000000/4000.0)));
  3988  02B6  3041               	movlw	65
  3989  02B7  0020               	movlb	0	; select bank0
  3990  02B8  00AE               	movwf	??_main
  3991  02B9  30EE               	movlw	238
  3992  02BA                     u1867:
  3993  02BA  0B89               	decfsz	9,f
  3994  02BB  2ABA               	goto	u1867
  3995  02BC  0BAE               	decfsz	??_main,f
  3996  02BD  2ABA               	goto	u1867
  3997  02BE  0000               	nop
  3998                           
  3999                           ;main.c: 254: delay_counts++;
  4000  02BF  3001               	movlw	1
  4001  02C0  0020               	movlb	0	; select bank0
  4002  02C1  07D1               	addwf	main@delay_counts,f
  4003  02C2  3000               	movlw	0
  4004  02C3  3DD2               	addwfc	main@delay_counts+1,f
  4005                           
  4006                           ;main.c: 255: if (delay_counts > 24) delay_counts=0;
  4007  02C4  3000               	movlw	0
  4008  02C5  0252               	subwf	main@delay_counts+1,w
  4009  02C6  3019               	movlw	25
  4010  02C7  1903               	skipnz
  4011  02C8  0251               	subwf	main@delay_counts,w
  4012  02C9  1C03               	skipc
  4013  02CA  2ACD               	goto	l2734
  4014  02CB  01D1               	clrf	main@delay_counts
  4015  02CC  01D2               	clrf	main@delay_counts+1
  4016  02CD                     l2734:
  4017                           
  4018                           ;main.c: 256: TM1640_dispINT(delay_counts);
  4019  02CD  0852               	movf	main@delay_counts+1,w
  4020  02CE  00A1               	movwf	TM1640_dispINT@value+1
  4021  02CF  0851               	movf	main@delay_counts,w
  4022  02D0  00A0               	movwf	TM1640_dispINT@value
  4023  02D1  24BD               	fcall	_TM1640_dispINT
  4024                           
  4025                           ;main.c: 257: TMR0_StopTimer();
  4026  02D2  27D2               	fcall	_TMR0_StopTimer
  4027                           
  4028                           ;main.c: 258: PIR0bits.TMR0IF=0;
  4029  02D3  1290               	bcf	16,5	;volatile
  4030                           
  4031                           ;main.c: 259: TMR0_WriteTimer(timer0ReloadVal16bit3);
  4032  02D4  0850               	movf	main@timer0ReloadVal16bit3+1,w
  4033  02D5  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  4034  02D6  084F               	movf	main@timer0ReloadVal16bit3,w
  4035  02D7  00F2               	movwf	TMR0_WriteTimer@timerVal
  4036  02D8  27B6               	fcall	_TMR0_WriteTimer
  4037  02D9                     l2692:	
  4038                           ;main.c: 260: goto BEGIN;
  4039                           
  4040                           
  4041                           ;main.c: 226: if (PORTAbits.RA1 + PORTAbits.RA1 + PORTAbits.RA1==0){
  4042  02D9  0020               	movlb	0	; select bank0
  4043  02DA  0C0C               	rrf	12,w	;volatile
  4044  02DB  3901               	andlw	1
  4045  02DC  00AE               	movwf	??_main
  4046  02DD  01AF               	clrf	??_main+1
  4047  02DE  0C0C               	rrf	12,w	;volatile
  4048  02DF  3901               	andlw	1
  4049  02E0  00B0               	movwf	??_main+2
  4050  02E1  0C0C               	rrf	12,w	;volatile
  4051  02E2  3901               	andlw	1
  4052  02E3  0730               	addwf	??_main+2,w
  4053  02E4  00B1               	movwf	??_main+3
  4054  02E5  01B2               	clrf	??_main+4
  4055  02E6  0DB2               	rlf	??_main+4,f
  4056  02E7  082E               	movf	??_main,w
  4057  02E8  0731               	addwf	??_main+3,w
  4058  02E9  00B3               	movwf	??_main+5
  4059  02EA  082F               	movf	??_main+1,w
  4060  02EB  3D32               	addwfc	??_main+4,w
  4061  02EC  00B4               	movwf	??_main+6
  4062  02ED  0833               	movf	??_main+5,w
  4063  02EE  0434               	iorwf	??_main+6,w
  4064  02EF  1903               	btfsc	3,2
  4065  02F0  2A4D               	goto	l2694
  4066                           
  4067                           ;main.c: 261: };main.c: 262: };main.c: 263: };main.c: 265: if (PORTAbits.RA2+ PORTAbits.
      +                          RA2+ PORTAbits.RA2==0) {
  4068  02F1  0C0C               	rrf	12,w	;volatile
  4069  02F2  0C89               	rrf	9,f
  4070  02F3  3901               	andlw	1
  4071  02F4  00AE               	movwf	??_main
  4072  02F5  01AF               	clrf	??_main+1
  4073  02F6  0C0C               	rrf	12,w	;volatile
  4074  02F7  0C89               	rrf	9,f
  4075  02F8  3901               	andlw	1
  4076  02F9  00B0               	movwf	??_main+2
  4077  02FA  0C0C               	rrf	12,w	;volatile
  4078  02FB  0C89               	rrf	9,f
  4079  02FC  3901               	andlw	1
  4080  02FD  0730               	addwf	??_main+2,w
  4081  02FE  00B1               	movwf	??_main+3
  4082  02FF  01B2               	clrf	??_main+4
  4083  0300  0DB2               	rlf	??_main+4,f
  4084  0301  082E               	movf	??_main,w
  4085  0302  0731               	addwf	??_main+3,w
  4086  0303  00B3               	movwf	??_main+5
  4087  0304  082F               	movf	??_main+1,w
  4088  0305  3D32               	addwfc	??_main+4,w
  4089  0306  00B4               	movwf	??_main+6
  4090  0307  0833               	movf	??_main+5,w
  4091  0308  0434               	iorwf	??_main+6,w
  4092  0309  1D03               	btfss	3,2
  4093  030A  2AD9               	goto	l2692
  4094                           
  4095                           ;main.c: 266: _delay((unsigned long)((300)*(1000000/4000.0)));
  4096  030B  3062               	movlw	98
  4097  030C  0020               	movlb	0	; select bank0
  4098  030D  00AE               	movwf	??_main
  4099  030E  3065               	movlw	101
  4100  030F                     u1877:
  4101  030F  0B89               	decfsz	9,f
  4102  0310  2B0F               	goto	u1877
  4103  0311  0BAE               	decfsz	??_main,f
  4104  0312  2B0F               	goto	u1877
  4105  0313  3200               	nop2
  4106                           
  4107                           ;main.c: 268: };main.c: 269: };main.c: 270: TMR0_StopTimer();
  4108                           
  4109                           ;main.c: 267: break;
  4110  0314  27D2               	fcall	_TMR0_StopTimer
  4111                           
  4112                           ;main.c: 271: waitTimeCounter=target_count - (unsigned long)(delay_counts*timeUnitH);
  4113  0315  0851               	movf	main@delay_counts,w
  4114  0316  00A2               	movwf	___lmul@multiplier
  4115  0317  0852               	movf	main@delay_counts+1,w
  4116  0318  00A3               	movwf	___lmul@multiplier+1
  4117  0319  01A4               	clrf	___lmul@multiplier+2
  4118  031A  01A5               	clrf	___lmul@multiplier+3
  4119  031B  30FF               	movlw	255
  4120  031C  00A9               	movwf	___lmul@multiplicand+3
  4121  031D  30FF               	movlw	255
  4122  031E  00A8               	movwf	___lmul@multiplicand+2
  4123  031F  30F1               	movlw	241
  4124  0320  00A7               	movwf	___lmul@multiplicand+1
  4125  0321  30F0               	movlw	240
  4126  0322  00A6               	movwf	___lmul@multiplicand
  4127  0323  25A4               	fcall	___lmul
  4128  0324  0822               	movf	?___lmul,w
  4129  0325  0754               	addwf	_target_count,w
  4130  0326  00AE               	movwf	??_main
  4131  0327  0823               	movf	?___lmul+1,w
  4132  0328  3D55               	addwfc	_target_count+1,w
  4133  0329  00AF               	movwf	??_main+1
  4134  032A  0824               	movf	?___lmul+2,w
  4135  032B  3D56               	addwfc	_target_count+2,w
  4136  032C  00B0               	movwf	??_main+2
  4137  032D  0825               	movf	?___lmul+3,w
  4138  032E  3D57               	addwfc	_target_count+3,w
  4139  032F  00B1               	movwf	??_main+3
  4140  0330  0831               	movf	??_main+3,w
  4141  0331  00DB               	movwf	_waitTimeCounter+3
  4142  0332  0830               	movf	??_main+2,w
  4143  0333  00DA               	movwf	_waitTimeCounter+2
  4144  0334  082F               	movf	??_main+1,w
  4145  0335  00D9               	movwf	_waitTimeCounter+1
  4146  0336  082E               	movf	??_main,w
  4147  0337  00D8               	movwf	_waitTimeCounter
  4148                           
  4149                           ;main.c: 272: TM1640_diplayOFF();
  4150  0338  26D0               	fcall	_TM1640_diplayOFF
  4151                           
  4152                           ;main.c: 273: TM1640_LEDarray(0);
  4153  0339  3000               	movlw	0
  4154  033A  26E9               	fcall	_TM1640_LEDarray
  4155                           
  4156                           ;main.c: 278: TM1640_LEDarray(5);
  4157  033B  3005               	movlw	5
  4158  033C  26E9               	fcall	_TM1640_LEDarray
  4159                           
  4160                           ;main.c: 279: PIR0bits.TMR0IF=1;
  4161  033D  0020               	movlb	0	; select bank0
  4162  033E  1690               	bsf	16,5	;volatile
  4163                           
  4164                           ;main.c: 280: unsigned char parity=0;
  4165  033F  01BE               	clrf	main@parity
  4166                           
  4167                           ;main.c: 281: TMR0_WriteTimer(timer0ReloadVal16bit3);
  4168  0340  0850               	movf	main@timer0ReloadVal16bit3+1,w
  4169  0341  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  4170  0342  084F               	movf	main@timer0ReloadVal16bit3,w
  4171  0343  00F2               	movwf	TMR0_WriteTimer@timerVal
  4172  0344  27B6               	fcall	_TMR0_WriteTimer
  4173                           
  4174                           ;main.c: 282: TMR0_StartTimer();
  4175  0345  27D5               	fcall	_TMR0_StartTimer
  4176  0346                     l2764:
  4177                           
  4178                           ;main.c: 284: if (PIR0bits.TMR0IF){
  4179  0346  1E90               	btfss	16,5	;volatile
  4180  0347  2B57               	goto	l2780
  4181                           
  4182                           ;main.c: 285: if (parity) {
  4183  0348  083E               	movf	main@parity,w
  4184  0349  1903               	btfsc	3,2
  4185  034A  2B4D               	goto	l2770
  4186                           
  4187                           ;main.c: 286: TM1640_LEDarray(0);
  4188  034B  3000               	movlw	0
  4189  034C  2B4E               	goto	L1
  4190  034D                     l2770:	
  4191                           ;main.c: 287: } else {
  4192                           
  4193                           
  4194                           ;main.c: 288: TM1640_LEDarray(5);
  4195  034D  3005               	movlw	5
  4196  034E                     L1:
  4197  034E  26E9               	fcall	_TM1640_LEDarray
  4198                           
  4199                           ;main.c: 289: };main.c: 290: parity ^= 1;
  4200  034F  3001               	movlw	1
  4201  0350  0020               	movlb	0	; select bank0
  4202  0351  00AE               	movwf	??_main
  4203  0352  082E               	movf	??_main,w
  4204  0353  06BE               	xorwf	main@parity,f
  4205                           
  4206                           ;main.c: 291: TMR0_Reload();
  4207  0354  27BB               	fcall	_TMR0_Reload
  4208                           
  4209                           ;main.c: 292: TMR0_StartTimer();
  4210  0355  27D5               	fcall	_TMR0_StartTimer
  4211                           
  4212                           ;main.c: 293: PIR0bits.TMR0IF=0;
  4213  0356  1290               	bcf	16,5	;volatile
  4214  0357                     l2780:
  4215                           
  4216                           ;main.c: 294: };main.c: 296: if (PORTAbits.RA2+ PORTAbits.RA2+ PORTAbits.RA2==0) {
  4217  0357  0C0C               	rrf	12,w	;volatile
  4218  0358  0C89               	rrf	9,f
  4219  0359  3901               	andlw	1
  4220  035A  00AE               	movwf	??_main
  4221  035B  01AF               	clrf	??_main+1
  4222  035C  0C0C               	rrf	12,w	;volatile
  4223  035D  0C89               	rrf	9,f
  4224  035E  3901               	andlw	1
  4225  035F  00B0               	movwf	??_main+2
  4226  0360  0C0C               	rrf	12,w	;volatile
  4227  0361  0C89               	rrf	9,f
  4228  0362  3901               	andlw	1
  4229  0363  0730               	addwf	??_main+2,w
  4230  0364  00B1               	movwf	??_main+3
  4231  0365  01B2               	clrf	??_main+4
  4232  0366  0DB2               	rlf	??_main+4,f
  4233  0367  082E               	movf	??_main,w
  4234  0368  0731               	addwf	??_main+3,w
  4235  0369  00B3               	movwf	??_main+5
  4236  036A  082F               	movf	??_main+1,w
  4237  036B  3D32               	addwfc	??_main+4,w
  4238  036C  00B4               	movwf	??_main+6
  4239  036D  0833               	movf	??_main+5,w
  4240  036E  0434               	iorwf	??_main+6,w
  4241  036F  1D03               	btfss	3,2
  4242  0370  2B46               	goto	l2764
  4243                           
  4244                           ;main.c: 297: _delay((unsigned long)((300)*(1000000/4000.0)));
  4245  0371  3062               	movlw	98
  4246  0372  0020               	movlb	0	; select bank0
  4247  0373  00AE               	movwf	??_main
  4248  0374  3065               	movlw	101
  4249  0375                     u1887:
  4250  0375  0B89               	decfsz	9,f
  4251  0376  2B75               	goto	u1887
  4252  0377  0BAE               	decfsz	??_main,f
  4253  0378  2B75               	goto	u1887
  4254  0379  3200               	nop2
  4255                           
  4256                           ;main.c: 299: };main.c: 300: };main.c: 301: PIR0bits.TMR0IF=0;
  4257                           
  4258                           ;main.c: 298: break;
  4259  037A  0020               	movlb	0	; select bank0
  4260  037B  1290               	bcf	16,5	;volatile
  4261                           
  4262                           ;main.c: 302: TMR0_StopTimer();
  4263  037C  27D2               	fcall	_TMR0_StopTimer
  4264                           
  4265                           ;main.c: 303: TM1640_diplayOFF();
  4266  037D  26D0               	fcall	_TM1640_diplayOFF
  4267                           
  4268                           ;main.c: 304: TM1640_LEDarray(0);
  4269  037E  3000               	movlw	0
  4270  037F  26E9               	fcall	_TM1640_LEDarray
  4271                           
  4272                           ;main.c: 311: (INTCONbits.GIE = 1);
  4273  0380  178B               	bsf	11,7	;volatile
  4274                           
  4275                           ;main.c: 314: (INTCONbits.PEIE = 1);
  4276  0381  170B               	bsf	11,6	;volatile
  4277                           
  4278                           ;main.c: 323: TMR1_StartTimer();
  4279  0382  27CF               	fcall	_TMR1_StartTimer
  4280                           
  4281                           ;main.c: 324: TMR1_Reload();
  4282  0383  27AA               	fcall	_TMR1_Reload
  4283                           
  4284                           ;main.c: 325: unsigned char level=0;
  4285  0384  01C4               	clrf	main@level
  4286                           
  4287                           ;main.c: 326: unsigned int vt=0;
  4288  0385  01C7               	clrf	main@vt
  4289  0386  01C8               	clrf	main@vt+1
  4290                           
  4291                           ;main.c: 328: level = voltage_index();
  4292  0387  2476               	fcall	_voltage_index
  4293  0388  00AE               	movwf	??_main
  4294  0389  082E               	movf	??_main,w
  4295  038A  00C4               	movwf	main@level
  4296  038B                     l366:	
  4297                           ;main.c: 329: while (1)
  4298                           
  4299  038B  0063               	sleep	;# 
  4300                           
  4301                           ;main.c: 332: if(batLowFlg) {
  4302  038C  0020               	movlb	0	; select bank0
  4303  038D  083F               	movf	main@batLowFlg,w
  4304  038E  1903               	btfsc	3,2
  4305  038F  2B92               	goto	l2806
  4306  0390                     l2804:
  4307                           
  4308                           ;main.c: 334: TM1640_dispLowBat();
  4309  0390  26B7               	fcall	_TM1640_dispLowBat
  4310  0391  2B90               	goto	l2804
  4311  0392                     l2806:
  4312                           
  4313                           ;main.c: 335: };main.c: 336: };main.c: 337: if(fireFlg){
  4314  0392  085C               	movf	_fireFlg,w
  4315  0393  1903               	btfsc	3,2
  4316  0394  2BFA               	goto	l2836
  4317                           
  4318                           ;main.c: 338: do { LATCbits.LATC5 = 1; } while(0);
  4319  0395  0022               	movlb	2	; select bank2
  4320  0396  168E               	bsf	14,5	;volatile
  4321                           
  4322                           ;main.c: 339: TMR0_WriteTimer(timer0ReloadVal16bit3);
  4323  0397  0020               	movlb	0	; select bank0
  4324  0398  0850               	movf	main@timer0ReloadVal16bit3+1,w
  4325  0399  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  4326  039A  084F               	movf	main@timer0ReloadVal16bit3,w
  4327  039B  00F2               	movwf	TMR0_WriteTimer@timerVal
  4328  039C  27B6               	fcall	_TMR0_WriteTimer
  4329                           
  4330                           ;main.c: 340: TMR0_StartTimer();
  4331  039D  27D5               	fcall	_TMR0_StartTimer
  4332                           
  4333                           ;main.c: 341: adc_integration=0;
  4334  039E  3000               	movlw	0
  4335  039F  00CC               	movwf	main@adc_integration+3
  4336  03A0  3000               	movlw	0
  4337  03A1  00CB               	movwf	main@adc_integration+2
  4338  03A2  3000               	movlw	0
  4339  03A3  00CA               	movwf	main@adc_integration+1
  4340  03A4  3000               	movlw	0
  4341  03A5  00C9               	movwf	main@adc_integration
  4342                           
  4343                           ;main.c: 342: PIR0bits.TMR0IF=1;
  4344  03A6  1690               	bsf	16,5	;volatile
  4345  03A7                     l2828:	
  4346                           ;main.c: 343: while(adc_integration < target_integration){
  4347                           
  4348  03A7  083D               	movf	main@target_integration+3,w
  4349  03A8  024C               	subwf	main@adc_integration+3,w
  4350  03A9  1D03               	skipz
  4351  03AA  2BB5               	goto	u1785
  4352  03AB  083C               	movf	main@target_integration+2,w
  4353  03AC  024B               	subwf	main@adc_integration+2,w
  4354  03AD  1D03               	skipz
  4355  03AE  2BB5               	goto	u1785
  4356  03AF  083B               	movf	main@target_integration+1,w
  4357  03B0  024A               	subwf	main@adc_integration+1,w
  4358  03B1  1D03               	skipz
  4359  03B2  2BB5               	goto	u1785
  4360  03B3  083A               	movf	main@target_integration,w
  4361  03B4  0249               	subwf	main@adc_integration,w
  4362  03B5                     u1785:
  4363  03B5  1803               	btfsc	3,0
  4364  03B6  2BF4               	goto	l379
  4365                           
  4366                           ;main.c: 344: if (PIR0bits.TMR0IF){
  4367  03B7  1E90               	btfss	16,5	;volatile
  4368  03B8  2BA7               	goto	l2828
  4369                           
  4370                           ;main.c: 345: adcCounts = ADC_GetConversion(ADC);
  4371  03B9  3014               	movlw	20
  4372  03BA  2702               	fcall	_ADC_GetConversion
  4373  03BB  0873               	movf	?_ADC_GetConversion+1,w
  4374  03BC  0020               	movlb	0	; select bank0
  4375  03BD  00CE               	movwf	main@adcCounts+1
  4376  03BE  0872               	movf	?_ADC_GetConversion,w
  4377  03BF  00CD               	movwf	main@adcCounts
  4378                           
  4379                           ;main.c: 346: adc_integration = adc_integration + adcCounts;
  4380  03C0  0849               	movf	main@adc_integration,w
  4381  03C1  00AE               	movwf	??_main
  4382  03C2  084A               	movf	main@adc_integration+1,w
  4383  03C3  00AF               	movwf	??_main+1
  4384  03C4  084B               	movf	main@adc_integration+2,w
  4385  03C5  00B0               	movwf	??_main+2
  4386  03C6  084C               	movf	main@adc_integration+3,w
  4387  03C7  00B1               	movwf	??_main+3
  4388  03C8  084D               	movf	main@adcCounts,w
  4389  03C9  00B2               	movwf	??_main+4
  4390  03CA  084E               	movf	main@adcCounts+1,w
  4391  03CB  00B3               	movwf	??_main+5
  4392  03CC  01B4               	clrf	??_main+6
  4393  03CD  01B5               	clrf	??_main+7
  4394  03CE  0832               	movf	??_main+4,w
  4395  03CF  07AE               	addwf	??_main,f
  4396  03D0  0833               	movf	??_main+5,w
  4397  03D1  3DAF               	addwfc	??_main+1,f
  4398  03D2  0834               	movf	??_main+6,w
  4399  03D3  3DB0               	addwfc	??_main+2,f
  4400  03D4  0835               	movf	??_main+7,w
  4401  03D5  3DB1               	addwfc	??_main+3,f
  4402  03D6  0831               	movf	??_main+3,w
  4403  03D7  00CC               	movwf	main@adc_integration+3
  4404  03D8  0830               	movf	??_main+2,w
  4405  03D9  00CB               	movwf	main@adc_integration+2
  4406  03DA  082F               	movf	??_main+1,w
  4407  03DB  00CA               	movwf	main@adc_integration+1
  4408  03DC  082E               	movf	??_main,w
  4409  03DD  00C9               	movwf	main@adc_integration
  4410                           
  4411                           ;main.c: 347: TM1640_dispVoltage(adcCounts);
  4412  03DE  084E               	movf	main@adcCounts+1,w
  4413  03DF  00A3               	movwf	TM1640_dispVoltage@value+1
  4414  03E0  084D               	movf	main@adcCounts,w
  4415  03E1  00A2               	movwf	TM1640_dispVoltage@value
  4416  03E2  241E               	fcall	_TM1640_dispVoltage
  4417                           
  4418                           ;main.c: 348: TMR0_WriteTimer(timer0ReloadVal16bit3);
  4419  03E3  0020               	movlb	0	; select bank0
  4420  03E4  0850               	movf	main@timer0ReloadVal16bit3+1,w
  4421  03E5  00F3               	movwf	TMR0_WriteTimer@timerVal+1
  4422  03E6  084F               	movf	main@timer0ReloadVal16bit3,w
  4423  03E7  00F2               	movwf	TMR0_WriteTimer@timerVal
  4424  03E8  27B6               	fcall	_TMR0_WriteTimer
  4425                           
  4426                           ;main.c: 349: PIR0bits.TMR0IF=0;
  4427  03E9  1290               	bcf	16,5	;volatile
  4428                           
  4429                           ;main.c: 350: if(adcCounts<613L) batLowFlg=1;
  4430  03EA  3002               	movlw	2
  4431  03EB  024E               	subwf	main@adcCounts+1,w
  4432  03EC  3065               	movlw	101
  4433  03ED  1903               	skipnz
  4434  03EE  024D               	subwf	main@adcCounts,w
  4435  03EF  1803               	skipnc
  4436  03F0  2BA7               	goto	l2828
  4437  03F1  01BF               	clrf	main@batLowFlg
  4438  03F2  0ABF               	incf	main@batLowFlg,f
  4439  03F3  2BA7               	goto	l2828
  4440  03F4                     l379:	
  4441                           ;main.c: 353: };main.c: 354: do { LATCbits.LATC5 = 0; } while(0);
  4442                           
  4443  03F4  0022               	movlb	2	; select bank2
  4444  03F5  128E               	bcf	14,5	;volatile
  4445                           
  4446                           ;main.c: 355: TMR0_StopTimer();
  4447  03F6  27D2               	fcall	_TMR0_StopTimer
  4448                           
  4449                           ;main.c: 356: TM1640_diplayOFF();
  4450  03F7  26D0               	fcall	_TM1640_diplayOFF
  4451                           
  4452                           ;main.c: 357: fireFlg=0;
  4453  03F8  0020               	movlb	0	; select bank0
  4454  03F9  01DC               	clrf	_fireFlg
  4455  03FA                     l2836:
  4456                           
  4457                           ;main.c: 358: };main.c: 360: if (vt > 3600) {
  4458  03FA  300E               	movlw	14
  4459  03FB  0248               	subwf	main@vt+1,w
  4460  03FC  3011               	movlw	17
  4461  03FD  1903               	skipnz
  4462  03FE  0247               	subwf	main@vt,w
  4463  03FF  1C03               	skipc
  4464  0400  2C0D               	goto	l2846
  4465                           
  4466                           ;main.c: 361: level = voltage_index();
  4467  0401  2476               	fcall	_voltage_index
  4468  0402  00AE               	movwf	??_main
  4469  0403  082E               	movf	??_main,w
  4470  0404  00C4               	movwf	main@level
  4471                           
  4472                           ;main.c: 362: if (level==0){
  4473  0405  0844               	movf	main@level,w
  4474  0406  1D03               	btfss	3,2
  4475  0407  2C0A               	goto	l2844
  4476                           
  4477                           ;main.c: 363: batLowFlg=1;
  4478  0408  01BF               	clrf	main@batLowFlg
  4479  0409  0ABF               	incf	main@batLowFlg,f
  4480  040A                     l2844:
  4481                           
  4482                           ;main.c: 364: };main.c: 365: vt = 0;
  4483  040A  01C7               	clrf	main@vt
  4484  040B  01C8               	clrf	main@vt+1
  4485                           
  4486                           ;main.c: 366: } else {
  4487  040C  2C13               	goto	l2848
  4488  040D                     l2846:
  4489                           
  4490                           ;main.c: 367: vt=vt+1;
  4491  040D  0847               	movf	main@vt,w
  4492  040E  3E01               	addlw	1
  4493  040F  00C7               	movwf	main@vt
  4494  0410  3000               	movlw	0
  4495  0411  3D48               	addwfc	main@vt+1,w
  4496  0412  00C8               	movwf	main@vt+1
  4497  0413                     l2848:
  4498                           
  4499                           ;main.c: 368: };main.c: 369: if (vt%2==0) {
  4500  0413  1847               	btfsc	main@vt,0
  4501  0414  2B8B               	goto	l366
  4502                           
  4503                           ;main.c: 370: TM1640_LEDarray(level);
  4504  0415  0844               	movf	main@level,w
  4505  0416  26E9               	fcall	_TM1640_LEDarray
  4506                           
  4507                           ;main.c: 372: _delay((unsigned long)((5)*(1000000/4000.0)));
  4508  0417  30FA               	movlw	250
  4509  0418                     u1897:
  4510  0418  3200               	nop2
  4511  0419  0B89               	decfsz	9,f
  4512  041A  2C18               	goto	u1897
  4513                           
  4514                           ;main.c: 373: TM1640_LEDarray(0);
  4515  041B  3000               	movlw	0
  4516  041C  26E9               	fcall	_TM1640_LEDarray
  4517  041D  2B8B               	goto	l366
  4518  041E                     __end_of_main:
  4519                           
  4520                           	psect	text1
  4521  0476                     __ptext1:	
  4522 ;; *************** function _voltage_index *****************
  4523 ;; Defined at:
  4524 ;;		line 59 in file "main.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;		None
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  voltage         2    4[BANK0 ] unsigned int 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  1    wreg      unsigned char 
  4531 ;; Registers used:
  4532 ;;		wreg, status,2, status,0, pclath, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 1F/0
  4535 ;;		On exit  : 1F/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4538 ;;      Params:         0       0       0       0
  4539 ;;      Locals:         0       2       0       0
  4540 ;;      Temps:          0       2       0       0
  4541 ;;      Totals:         0       4       0       0
  4542 ;;Total ram usage:        4 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    4
  4545 ;; This function calls:
  4546 ;;		_ADC_GetConversion
  4547 ;;		___wmul
  4548 ;; This function is called by:
  4549 ;;		_main
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           
  4554                           ;psect for function _voltage_index
  4555  0476                     _voltage_index:
  4556                           
  4557                           ;main.c: 60: unsigned int voltage = (unsigned int)(50U * ADC_GetConversion(ADC) / 1024U)
      +                           ;
  4558                           
  4559                           ;incstack = 0
  4560                           ; Regs used in _voltage_index: [wreg+status,2+status,0+pclath+cstack]
  4561  0476  3014               	movlw	20
  4562  0477  2702               	fcall	_ADC_GetConversion
  4563  0478  0873               	movf	?_ADC_GetConversion+1,w
  4564  0479  00F7               	movwf	___wmul@multiplier+1
  4565  047A  0872               	movf	?_ADC_GetConversion,w
  4566  047B  00F6               	movwf	___wmul@multiplier
  4567  047C  3032               	movlw	50
  4568  047D  00F8               	movwf	___wmul@multiplicand
  4569  047E  3000               	movlw	0
  4570  047F  00F9               	movwf	___wmul@multiplicand+1
  4571  0480  2662               	fcall	___wmul
  4572  0481  0876               	movf	?___wmul,w
  4573  0482  00A2               	movwf	??_voltage_index
  4574  0483  0877               	movf	?___wmul+1,w
  4575  0484  00A3               	movwf	??_voltage_index+1
  4576  0485  300A               	movlw	10
  4577  0486                     u1455:
  4578  0486  36A3               	lsrf	??_voltage_index+1,f
  4579  0487  0CA2               	rrf	??_voltage_index,f
  4580  0488  0B89               	decfsz	9,f
  4581  0489  2C86               	goto	u1455
  4582  048A  0822               	movf	??_voltage_index,w
  4583  048B  00A4               	movwf	voltage_index@voltage
  4584  048C  0823               	movf	??_voltage_index+1,w
  4585  048D  00A5               	movwf	voltage_index@voltage+1
  4586                           
  4587                           ;main.c: 61: if ( voltage >= 42 ) {
  4588  048E  3000               	movlw	0
  4589  048F  0225               	subwf	voltage_index@voltage+1,w
  4590  0490  302A               	movlw	42
  4591  0491  1903               	skipnz
  4592  0492  0224               	subwf	voltage_index@voltage,w
  4593  0493  1C03               	skipc
  4594  0494  2C97               	goto	l2498
  4595                           
  4596                           ;main.c: 62: return (1);
  4597  0495  3001               	movlw	1
  4598  0496  0008               	return
  4599  0497                     l2498:
  4600  0497  3000               	movlw	0
  4601  0498  0225               	subwf	voltage_index@voltage+1,w
  4602  0499  3027               	movlw	39
  4603  049A  1903               	skipnz
  4604  049B  0224               	subwf	voltage_index@voltage,w
  4605  049C  1C03               	skipc
  4606  049D  2CA0               	goto	l2506
  4607                           
  4608                           ;main.c: 64: return (2);
  4609  049E  3002               	movlw	2
  4610  049F  0008               	return
  4611  04A0                     l2506:
  4612  04A0  3000               	movlw	0
  4613  04A1  0225               	subwf	voltage_index@voltage+1,w
  4614  04A2  3024               	movlw	36
  4615  04A3  1903               	skipnz
  4616  04A4  0224               	subwf	voltage_index@voltage,w
  4617  04A5  1C03               	skipc
  4618  04A6  2CA9               	goto	l2514
  4619                           
  4620                           ;main.c: 66: return (3);
  4621  04A7  3003               	movlw	3
  4622  04A8  0008               	return
  4623  04A9                     l2514:
  4624  04A9  3000               	movlw	0
  4625  04AA  0225               	subwf	voltage_index@voltage+1,w
  4626  04AB  3021               	movlw	33
  4627  04AC  1903               	skipnz
  4628  04AD  0224               	subwf	voltage_index@voltage,w
  4629  04AE  1C03               	skipc
  4630  04AF  2CB2               	goto	l2522
  4631                           
  4632                           ;main.c: 68: return (4);
  4633  04B0  3004               	movlw	4
  4634  04B1  0008               	return
  4635  04B2                     l2522:
  4636  04B2  3000               	movlw	0
  4637  04B3  0225               	subwf	voltage_index@voltage+1,w
  4638  04B4  301E               	movlw	30
  4639  04B5  1903               	skipnz
  4640  04B6  0224               	subwf	voltage_index@voltage,w
  4641  04B7  1C03               	skipc
  4642  04B8  2CBB               	goto	l2530
  4643                           
  4644                           ;main.c: 70: return (5);
  4645  04B9  3005               	movlw	5
  4646  04BA  0008               	return
  4647  04BB                     l2530:
  4648                           
  4649                           ;main.c: 72: return (0);
  4650  04BB  3000               	movlw	0
  4651  04BC  0008               	return
  4652  04BD                     __end_of_voltage_index:
  4653                           
  4654                           	psect	text2
  4655  0702                     __ptext2:	
  4656 ;; *************** function _ADC_GetConversion *****************
  4657 ;; Defined at:
  4658 ;;		line 113 in file "mcc_generated_files/adc.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;  channel         1    wreg     enum E4690
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  channel         1    5[COMMON] enum E4690
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  2    2[COMMON] unsigned int 
  4665 ;; Registers used:
  4666 ;;		wreg, status,2, status,0
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 1F/1
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4672 ;;      Params:         2       0       0       0
  4673 ;;      Locals:         1       0       0       0
  4674 ;;      Temps:          1       0       0       0
  4675 ;;      Totals:         4       0       0       0
  4676 ;;Total ram usage:        4 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    3
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		_voltage_index
  4683 ;;		_main
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function _ADC_GetConversion
  4689  0702                     _ADC_GetConversion:
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4693                           ;ADC_GetConversion@channel stored from wreg
  4694  0702  00F5               	movwf	ADC_GetConversion@channel
  4695                           
  4696                           ;adc.c: 116: ADCON0bits.CHS = channel;
  4697  0703  0875               	movf	ADC_GetConversion@channel,w
  4698  0704  00F4               	movwf	??_ADC_GetConversion
  4699  0705  0DF4               	rlf	??_ADC_GetConversion,f
  4700  0706  0DF4               	rlf	??_ADC_GetConversion,f
  4701  0707  0021               	movlb	1	; select bank1
  4702  0708  081D               	movf	29,w	;volatile
  4703  0709  0674               	xorwf	??_ADC_GetConversion,w
  4704  070A  3903               	andlw	-253
  4705  070B  0674               	xorwf	??_ADC_GetConversion,w
  4706  070C  009D               	movwf	29	;volatile
  4707                           
  4708                           ;adc.c: 119: ADCON0bits.ADON = 1;
  4709  070D  141D               	bsf	29,0	;volatile
  4710                           
  4711                           ;adc.c: 122: _delay((unsigned long)((5)*(1000000/4000000.0)));
  4712  070E  0000               	nop
  4713                           
  4714                           ;adc.c: 125: ADCON0bits.ADGO = 1;
  4715  070F  0021               	movlb	1	; select bank1
  4716  0710  149D               	bsf	29,1	;volatile
  4717  0711                     l162:	
  4718                           ;adc.c: 129: {
  4719                           
  4720  0711  189D               	btfsc	29,1	;volatile
  4721  0712  2F11               	goto	l162
  4722                           
  4723                           ;adc.c: 130: };adc.c: 133: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4724  0713  081C               	movf	28,w	;volatile
  4725  0714  00F3               	movwf	?_ADC_GetConversion+1
  4726  0715  081B               	movf	27,w	;volatile
  4727  0716  00F2               	movwf	?_ADC_GetConversion
  4728  0717  0008               	return
  4729  0718                     __end_of_ADC_GetConversion:
  4730                           
  4731                           	psect	text3
  4732  05A4                     __ptext3:	
  4733 ;; *************** function ___lmul *****************
  4734 ;; Defined at:
  4735 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul32.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  multiplier      4    2[BANK0 ] unsigned long 
  4738 ;;  multiplicand    4    6[BANK0 ] unsigned long 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  product         4   10[BANK0 ] unsigned long 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  4    2[BANK0 ] unsigned long 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0
  4745 ;; Tracked objects:
  4746 ;;		On entry : 1F/0
  4747 ;;		On exit  : 1F/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4750 ;;      Params:         0       8       0       0
  4751 ;;      Locals:         0       4       0       0
  4752 ;;      Temps:          0       0       0       0
  4753 ;;      Totals:         0      12       0       0
  4754 ;;Total ram usage:       12 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    3
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_main
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           
  4765                           ;psect for function ___lmul
  4766  05A4                     ___lmul:
  4767                           
  4768                           ;incstack = 0
  4769                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4770  05A4  3000               	movlw	0
  4771  05A5  00AD               	movwf	___lmul@product+3
  4772  05A6  3000               	movlw	0
  4773  05A7  00AC               	movwf	___lmul@product+2
  4774  05A8  3000               	movlw	0
  4775  05A9  00AB               	movwf	___lmul@product+1
  4776  05AA  3000               	movlw	0
  4777  05AB  00AA               	movwf	___lmul@product
  4778  05AC                     l2164:
  4779  05AC  1C22               	btfss	___lmul@multiplier,0
  4780  05AD  2DB6               	goto	l2168
  4781  05AE  0826               	movf	___lmul@multiplicand,w
  4782  05AF  07AA               	addwf	___lmul@product,f
  4783  05B0  0827               	movf	___lmul@multiplicand+1,w
  4784  05B1  3DAB               	addwfc	___lmul@product+1,f
  4785  05B2  0828               	movf	___lmul@multiplicand+2,w
  4786  05B3  3DAC               	addwfc	___lmul@product+2,f
  4787  05B4  0829               	movf	___lmul@multiplicand+3,w
  4788  05B5  3DAD               	addwfc	___lmul@product+3,f
  4789  05B6                     l2168:
  4790  05B6  3001               	movlw	1
  4791  05B7                     u1065:
  4792  05B7  35A6               	lslf	___lmul@multiplicand,f
  4793  05B8  0DA7               	rlf	___lmul@multiplicand+1,f
  4794  05B9  0DA8               	rlf	___lmul@multiplicand+2,f
  4795  05BA  0DA9               	rlf	___lmul@multiplicand+3,f
  4796  05BB  0B89               	decfsz	9,f
  4797  05BC  2DB7               	goto	u1065
  4798  05BD  3001               	movlw	1
  4799  05BE                     u1075:
  4800  05BE  36A5               	lsrf	___lmul@multiplier+3,f
  4801  05BF  0CA4               	rrf	___lmul@multiplier+2,f
  4802  05C0  0CA3               	rrf	___lmul@multiplier+1,f
  4803  05C1  0CA2               	rrf	___lmul@multiplier,f
  4804  05C2  0B89               	decfsz	9,f
  4805  05C3  2DBE               	goto	u1075
  4806  05C4  0825               	movf	___lmul@multiplier+3,w
  4807  05C5  0424               	iorwf	___lmul@multiplier+2,w
  4808  05C6  0423               	iorwf	___lmul@multiplier+1,w
  4809  05C7  0422               	iorwf	___lmul@multiplier,w
  4810  05C8  1D03               	skipz
  4811  05C9  2DAC               	goto	l2164
  4812  05CA  082D               	movf	___lmul@product+3,w
  4813  05CB  00A5               	movwf	?___lmul+3
  4814  05CC  082C               	movf	___lmul@product+2,w
  4815  05CD  00A4               	movwf	?___lmul+2
  4816  05CE  082B               	movf	___lmul@product+1,w
  4817  05CF  00A3               	movwf	?___lmul+1
  4818  05D0  082A               	movf	___lmul@product,w
  4819  05D1  00A2               	movwf	?___lmul
  4820  05D2  0008               	return
  4821  05D3                     __end_of___lmul:
  4822                           
  4823                           	psect	text4
  4824  07CF                     __ptext4:	
  4825 ;; *************** function _TMR1_StartTimer *****************
  4826 ;; Defined at:
  4827 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      void 
  4834 ;; Registers used:
  4835 ;;		None
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 1F/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4841 ;;      Params:         0       0       0       0
  4842 ;;      Locals:         0       0       0       0
  4843 ;;      Temps:          0       0       0       0
  4844 ;;      Totals:         0       0       0       0
  4845 ;;Total ram usage:        0 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    3
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_main
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           
  4856                           ;psect for function _TMR1_StartTimer
  4857  07CF                     _TMR1_StartTimer:
  4858                           
  4859                           ;tmr1.c: 96: T1CONbits.TMR1ON = 1;
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _TMR1_StartTimer: []
  4863  07CF  0020               	movlb	0	; select bank0
  4864  07D0  141B               	bsf	27,0	;volatile
  4865  07D1  0008               	return
  4866  07D2                     __end_of_TMR1_StartTimer:
  4867                           
  4868                           	psect	text5
  4869  07AA                     __ptext5:	
  4870 ;; *************** function _TMR1_Reload *****************
  4871 ;; Defined at:
  4872 ;;		line 142 in file "mcc_generated_files/tmr1.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;		None
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0, pclath, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 1F/0
  4883 ;;		On exit  : 1F/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4886 ;;      Params:         0       0       0       0
  4887 ;;      Locals:         0       0       0       0
  4888 ;;      Temps:          0       0       0       0
  4889 ;;      Totals:         0       0       0       0
  4890 ;;Total ram usage:        0 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    4
  4893 ;; This function calls:
  4894 ;;		_TMR1_WriteTimer
  4895 ;; This function is called by:
  4896 ;;		_main
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _TMR1_Reload
  4902  07AA                     _TMR1_Reload:
  4903                           
  4904                           ;tmr1.c: 144: TMR1_WriteTimer(timer1ReloadVal);
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _TMR1_Reload: [wreg+status,2+status,0+pclath+cstack]
  4908  07AA  0860               	movf	_timer1ReloadVal+1,w	;volatile
  4909  07AB  00F3               	movwf	TMR1_WriteTimer@timerVal+1
  4910  07AC  085F               	movf	_timer1ReloadVal,w	;volatile
  4911  07AD  00F2               	movwf	TMR1_WriteTimer@timerVal
  4912  07AE  274F               	fcall	_TMR1_WriteTimer
  4913  07AF  0008               	return
  4914  07B0                     __end_of_TMR1_Reload:
  4915                           
  4916                           	psect	text6
  4917  074F                     __ptext6:	
  4918 ;; *************** function _TMR1_WriteTimer *****************
  4919 ;; Defined at:
  4920 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  timerVal        2    2[COMMON] unsigned int 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;		None
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg
  4929 ;; Tracked objects:
  4930 ;;		On entry : 1F/0
  4931 ;;		On exit  : 1F/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4934 ;;      Params:         2       0       0       0
  4935 ;;      Locals:         0       0       0       0
  4936 ;;      Temps:          0       0       0       0
  4937 ;;      Totals:         2       0       0       0
  4938 ;;Total ram usage:        2 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    3
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_TMR1_Reload
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _TMR1_WriteTimer
  4950  074F                     _TMR1_WriteTimer:
  4951                           
  4952                           ;tmr1.c: 122: if (T1CONbits.T1SYNC == 1)
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _TMR1_WriteTimer: [wreg]
  4956  074F  1D1B               	btfss	27,2	;volatile
  4957  0750  2F58               	goto	l1878
  4958                           
  4959                           ;tmr1.c: 123: {;tmr1.c: 125: T1CONbits.TMR1ON = 0;
  4960  0751  101B               	bcf	27,0	;volatile
  4961                           
  4962                           ;tmr1.c: 128: TMR1H = (timerVal >> 8);
  4963  0752  0873               	movf	TMR1_WriteTimer@timerVal+1,w
  4964  0753  009A               	movwf	26	;volatile
  4965                           
  4966                           ;tmr1.c: 129: TMR1L = timerVal;
  4967  0754  0872               	movf	TMR1_WriteTimer@timerVal,w
  4968  0755  0099               	movwf	25	;volatile
  4969                           
  4970                           ;tmr1.c: 132: T1CONbits.TMR1ON =1;
  4971  0756  141B               	bsf	27,0	;volatile
  4972                           
  4973                           ;tmr1.c: 133: }
  4974  0757  0008               	return
  4975  0758                     l1878:
  4976                           
  4977                           ;tmr1.c: 134: else;tmr1.c: 135: {;tmr1.c: 137: TMR1H = (timerVal >> 8);
  4978  0758  0873               	movf	TMR1_WriteTimer@timerVal+1,w
  4979  0759  009A               	movwf	26	;volatile
  4980                           
  4981                           ;tmr1.c: 138: TMR1L = timerVal;
  4982  075A  0872               	movf	TMR1_WriteTimer@timerVal,w
  4983  075B  0099               	movwf	25	;volatile
  4984  075C  0008               	return
  4985  075D                     __end_of_TMR1_WriteTimer:
  4986                           
  4987                           	psect	text7
  4988  07B6                     __ptext7:	
  4989 ;; *************** function _TMR0_WriteTimer *****************
  4990 ;; Defined at:
  4991 ;;		line 113 in file "mcc_generated_files/tmr0.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  timerVal        2    2[COMMON] unsigned int 
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg
  5000 ;; Tracked objects:
  5001 ;;		On entry : 1F/0
  5002 ;;		On exit  : 1F/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5005 ;;      Params:         2       0       0       0
  5006 ;;      Locals:         0       0       0       0
  5007 ;;      Temps:          0       0       0       0
  5008 ;;      Totals:         2       0       0       0
  5009 ;;Total ram usage:        2 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    3
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_main
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           
  5020                           ;psect for function _TMR0_WriteTimer
  5021  07B6                     _TMR0_WriteTimer:
  5022                           
  5023                           ;tmr0.c: 116: TMR0H = timerVal >> 8;
  5024                           
  5025                           ;incstack = 0
  5026                           ; Regs used in _TMR0_WriteTimer: [wreg]
  5027  07B6  0873               	movf	TMR0_WriteTimer@timerVal+1,w
  5028  07B7  0096               	movwf	22	;volatile
  5029                           
  5030                           ;tmr0.c: 117: TMR0L = (uint8_t) timerVal;
  5031  07B8  0872               	movf	TMR0_WriteTimer@timerVal,w
  5032  07B9  0095               	movwf	21	;volatile
  5033  07BA  0008               	return
  5034  07BB                     __end_of_TMR0_WriteTimer:
  5035                           
  5036                           	psect	text8
  5037  07D2                     __ptext8:	
  5038 ;; *************** function _TMR0_StopTimer *****************
  5039 ;; Defined at:
  5040 ;;		line 94 in file "mcc_generated_files/tmr0.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;		None
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;		None
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      void 
  5047 ;; Registers used:
  5048 ;;		None
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 1F/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5054 ;;      Params:         0       0       0       0
  5055 ;;      Locals:         0       0       0       0
  5056 ;;      Temps:          0       0       0       0
  5057 ;;      Totals:         0       0       0       0
  5058 ;;Total ram usage:        0 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    3
  5061 ;; This function calls:
  5062 ;;		Nothing
  5063 ;; This function is called by:
  5064 ;;		_main
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           
  5069                           ;psect for function _TMR0_StopTimer
  5070  07D2                     _TMR0_StopTimer:
  5071                           
  5072                           ;tmr0.c: 97: T0CON0bits.T0EN = 0;
  5073                           
  5074                           ;incstack = 0
  5075                           ; Regs used in _TMR0_StopTimer: []
  5076  07D2  0020               	movlb	0	; select bank0
  5077  07D3  1397               	bcf	23,7	;volatile
  5078  07D4  0008               	return
  5079  07D5                     __end_of_TMR0_StopTimer:
  5080                           
  5081                           	psect	text9
  5082  07D5                     __ptext9:	
  5083 ;; *************** function _TMR0_StartTimer *****************
  5084 ;; Defined at:
  5085 ;;		line 88 in file "mcc_generated_files/tmr0.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;		None
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;		None
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  1    wreg      void 
  5092 ;; Registers used:
  5093 ;;		None
  5094 ;; Tracked objects:
  5095 ;;		On entry : 1F/0
  5096 ;;		On exit  : 1F/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5099 ;;      Params:         0       0       0       0
  5100 ;;      Locals:         0       0       0       0
  5101 ;;      Temps:          0       0       0       0
  5102 ;;      Totals:         0       0       0       0
  5103 ;;Total ram usage:        0 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    3
  5106 ;; This function calls:
  5107 ;;		Nothing
  5108 ;; This function is called by:
  5109 ;;		_main
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _TMR0_StartTimer
  5115  07D5                     _TMR0_StartTimer:
  5116                           
  5117                           ;tmr0.c: 91: T0CON0bits.T0EN = 1;
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in _TMR0_StartTimer: []
  5121  07D5  1797               	bsf	23,7	;volatile
  5122  07D6  0008               	return
  5123  07D7                     __end_of_TMR0_StartTimer:
  5124                           
  5125                           	psect	text10
  5126  07BB                     __ptext10:	
  5127 ;; *************** function _TMR0_Reload *****************
  5128 ;; Defined at:
  5129 ;;		line 120 in file "mcc_generated_files/tmr0.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg
  5138 ;; Tracked objects:
  5139 ;;		On entry : 1F/0
  5140 ;;		On exit  : 1F/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5143 ;;      Params:         0       0       0       0
  5144 ;;      Locals:         0       0       0       0
  5145 ;;      Temps:          0       0       0       0
  5146 ;;      Totals:         0       0       0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    3
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_main
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _TMR0_Reload
  5159  07BB                     _TMR0_Reload:
  5160                           
  5161                           ;tmr0.c: 123: TMR0H = timer0ReloadVal16bit >> 8;
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _TMR0_Reload: [wreg]
  5165  07BB  087B               	movf	_timer0ReloadVal16bit+1,w	;volatile
  5166  07BC  0096               	movwf	22	;volatile
  5167                           
  5168                           ;tmr0.c: 124: TMR0L = (uint8_t) timer0ReloadVal16bit;
  5169  07BD  087A               	movf	_timer0ReloadVal16bit,w	;volatile
  5170  07BE  0095               	movwf	21	;volatile
  5171  07BF  0008               	return
  5172  07C0                     __end_of_TMR0_Reload:
  5173                           
  5174                           	psect	text11
  5175  07C4                     __ptext11:	
  5176 ;; *************** function _TM1640_init *****************
  5177 ;; Defined at:
  5178 ;;		line 4 in file "TM1640.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  1    wreg      void 
  5185 ;; Registers used:
  5186 ;;		None
  5187 ;; Tracked objects:
  5188 ;;		On entry : 1F/0
  5189 ;;		On exit  : 1F/2
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5192 ;;      Params:         0       0       0       0
  5193 ;;      Locals:         0       0       0       0
  5194 ;;      Temps:          0       0       0       0
  5195 ;;      Totals:         0       0       0       0
  5196 ;;Total ram usage:        0 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    3
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _TM1640_init
  5208  07C4                     _TM1640_init:
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _TM1640_init: []
  5212                           ;TM1640.c: 5: do { LATCbits.LATC1 = 1; } while(0);
  5213  07C4  0022               	movlb	2	; select bank2
  5214  07C5  148E               	bsf	14,1	;volatile
  5215                           
  5216                           ;TM1640.c: 6: do { LATCbits.LATC0 = 1; } while(0);
  5217  07C6  140E               	bsf	14,0	;volatile
  5218  07C7  0008               	return
  5219  07C8                     __end_of_TM1640_init:
  5220                           
  5221                           	psect	text12
  5222  041E                     __ptext12:	
  5223 ;; *************** function _TM1640_dispVoltage *****************
  5224 ;; Defined at:
  5225 ;;		line 96 in file "TM1640.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  value           2    2[BANK0 ] unsigned int 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  voltage         2    9[BANK0 ] unsigned int 
  5230 ;;  data            1    8[BANK0 ] unsigned char 
  5231 ;;  digit_high      1    7[BANK0 ] unsigned char 
  5232 ;;  digit_low       1    6[BANK0 ] unsigned char 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  1    wreg      void 
  5235 ;; Registers used:
  5236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5237 ;; Tracked objects:
  5238 ;;		On entry : 1F/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5242 ;;      Params:         0       2       0       0
  5243 ;;      Locals:         0       5       0       0
  5244 ;;      Temps:          0       2       0       0
  5245 ;;      Totals:         0       9       0       0
  5246 ;;Total ram usage:        9 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    5
  5249 ;; This function calls:
  5250 ;;		_TM1640_sendAddress_and_Data
  5251 ;;		_TM1640_sendCommand
  5252 ;;		___lwdiv
  5253 ;;		___lwmod
  5254 ;;		___wmul
  5255 ;; This function is called by:
  5256 ;;		_main
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _TM1640_dispVoltage
  5262  041E                     _TM1640_dispVoltage:
  5263                           
  5264                           ;TM1640.c: 97: unsigned char digit_low, digit_high, data;;TM1640.c: 98: unsigned int vol
      +                          tage;;TM1640.c: 99: voltage = (unsigned int)(50U * value / 1024U) ;
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _TM1640_dispVoltage: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5268  041E  0823               	movf	TM1640_dispVoltage@value+1,w
  5269  041F  00F7               	movwf	___wmul@multiplier+1
  5270  0420  0822               	movf	TM1640_dispVoltage@value,w
  5271  0421  00F6               	movwf	___wmul@multiplier
  5272  0422  3032               	movlw	50
  5273  0423  00F8               	movwf	___wmul@multiplicand
  5274  0424  3000               	movlw	0
  5275  0425  00F9               	movwf	___wmul@multiplicand+1
  5276  0426  2662               	fcall	___wmul
  5277  0427  0876               	movf	?___wmul,w
  5278  0428  00A4               	movwf	??_TM1640_dispVoltage
  5279  0429  0877               	movf	?___wmul+1,w
  5280  042A  00A5               	movwf	??_TM1640_dispVoltage+1
  5281  042B  300A               	movlw	10
  5282  042C                     u1515:
  5283  042C  36A5               	lsrf	??_TM1640_dispVoltage+1,f
  5284  042D  0CA4               	rrf	??_TM1640_dispVoltage,f
  5285  042E  0B89               	decfsz	9,f
  5286  042F  2C2C               	goto	u1515
  5287  0430  0824               	movf	??_TM1640_dispVoltage,w
  5288  0431  00A9               	movwf	TM1640_dispVoltage@voltage
  5289  0432  0825               	movf	??_TM1640_dispVoltage+1,w
  5290  0433  00AA               	movwf	TM1640_dispVoltage@voltage+1
  5291                           
  5292                           ;TM1640.c: 100: digit_low = voltage % 10U;
  5293  0434  300A               	movlw	10
  5294  0435  00F2               	movwf	___lwmod@divisor
  5295  0436  3000               	movlw	0
  5296  0437  00F3               	movwf	___lwmod@divisor+1
  5297  0438  082A               	movf	TM1640_dispVoltage@voltage+1,w
  5298  0439  00F5               	movwf	___lwmod@dividend+1
  5299  043A  0829               	movf	TM1640_dispVoltage@voltage,w
  5300  043B  00F4               	movwf	___lwmod@dividend
  5301  043C  25D3               	fcall	___lwmod
  5302  043D  0872               	movf	?___lwmod,w
  5303  043E  00A4               	movwf	??_TM1640_dispVoltage
  5304  043F  0824               	movf	??_TM1640_dispVoltage,w
  5305  0440  00A6               	movwf	TM1640_dispVoltage@digit_low
  5306                           
  5307                           ;TM1640.c: 101: digit_high = voltage / 10U;
  5308  0441  300A               	movlw	10
  5309  0442  00F2               	movwf	___lwdiv@divisor
  5310  0443  3000               	movlw	0
  5311  0444  00F3               	movwf	___lwdiv@divisor+1
  5312  0445  082A               	movf	TM1640_dispVoltage@voltage+1,w
  5313  0446  00F5               	movwf	___lwdiv@dividend+1
  5314  0447  0829               	movf	TM1640_dispVoltage@voltage,w
  5315  0448  00F4               	movwf	___lwdiv@dividend
  5316  0449  253D               	fcall	___lwdiv
  5317  044A  0872               	movf	?___lwdiv,w
  5318  044B  00A4               	movwf	??_TM1640_dispVoltage
  5319  044C  0824               	movf	??_TM1640_dispVoltage,w
  5320  044D  00A7               	movwf	TM1640_dispVoltage@digit_high
  5321  044E  0827               	movf	TM1640_dispVoltage@digit_high,w
  5322  044F  3E79               	addlw	low (_NUMBER_FONT| (0+32768))
  5323  0450  0084               	movwf	4
  5324  0451  3087               	movlw	high (_NUMBER_FONT| (0+32768))
  5325  0452  1803               	skipnc
  5326  0453  3E01               	addlw	1
  5327  0454  0085               	movwf	5
  5328  0455  0800               	movf	0,w	;code access
  5329  0456  3880               	iorlw	128
  5330  0457  00A4               	movwf	??_TM1640_dispVoltage
  5331  0458  0824               	movf	??_TM1640_dispVoltage,w
  5332  0459  00A8               	movwf	TM1640_dispVoltage@data
  5333                           
  5334                           ;TM1640.c: 103: TM1640_sendCommand(0b01000100);
  5335  045A  3044               	movlw	68
  5336  045B  2680               	fcall	_TM1640_sendCommand
  5337                           
  5338                           ;TM1640.c: 104: TM1640_sendAddress_and_Data( 0b11000001, NUMBER_FONT[digit_low]);
  5339  045C  0020               	movlb	0	; select bank0
  5340  045D  0826               	movf	TM1640_dispVoltage@digit_low,w
  5341  045E  3E79               	addlw	low (_NUMBER_FONT| (0+32768))
  5342  045F  0084               	movwf	4
  5343  0460  3087               	movlw	high (_NUMBER_FONT| (0+32768))
  5344  0461  1803               	skipnc
  5345  0462  3E01               	addlw	1
  5346  0463  0085               	movwf	5
  5347  0464  0800               	movf	0,w	;code access
  5348  0465  00A4               	movwf	??_TM1640_dispVoltage
  5349  0466  0824               	movf	??_TM1640_dispVoltage,w
  5350  0467  00F5               	movwf	TM1640_sendAddress_and_Data@data
  5351  0468  30C1               	movlw	193
  5352  0469  2622               	fcall	_TM1640_sendAddress_and_Data
  5353                           
  5354                           ;TM1640.c: 105: TM1640_sendCommand(0b10001111);
  5355  046A  308F               	movlw	143
  5356  046B  2680               	fcall	_TM1640_sendCommand
  5357                           
  5358                           ;TM1640.c: 106: TM1640_sendCommand(0b01000100);
  5359  046C  3044               	movlw	68
  5360  046D  2680               	fcall	_TM1640_sendCommand
  5361                           
  5362                           ;TM1640.c: 107: TM1640_sendAddress_and_Data( 0b11000000, data);
  5363  046E  0020               	movlb	0	; select bank0
  5364  046F  0828               	movf	TM1640_dispVoltage@data,w
  5365  0470  00A4               	movwf	??_TM1640_dispVoltage
  5366  0471  0824               	movf	??_TM1640_dispVoltage,w
  5367  0472  00F5               	movwf	TM1640_sendAddress_and_Data@data
  5368  0473  30C0               	movlw	192
  5369  0474  2622               	fcall	_TM1640_sendAddress_and_Data
  5370  0475  0008               	return
  5371  0476                     __end_of_TM1640_dispVoltage:
  5372                           
  5373                           	psect	text13
  5374  0662                     __ptext13:	
  5375 ;; *************** function ___wmul *****************
  5376 ;; Defined at:
  5377 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  multiplier      2    6[COMMON] unsigned int 
  5380 ;;  multiplicand    2    8[COMMON] unsigned int 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  product         2    0[BANK0 ] unsigned int 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  2    6[COMMON] unsigned int 
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0
  5387 ;; Tracked objects:
  5388 ;;		On entry : 1E/0
  5389 ;;		On exit  : 1F/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5392 ;;      Params:         4       0       0       0
  5393 ;;      Locals:         0       2       0       0
  5394 ;;      Temps:          0       0       0       0
  5395 ;;      Totals:         4       2       0       0
  5396 ;;Total ram usage:        6 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    3
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_voltage_index
  5403 ;;		_main
  5404 ;;		_TM1640_dispVoltage
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function ___wmul
  5410  0662                     ___wmul:
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5414  0662  0020               	movlb	0	; select bank0
  5415  0663  01A0               	clrf	___wmul@product
  5416  0664  01A1               	clrf	___wmul@product+1
  5417  0665                     l2476:
  5418  0665  1C76               	btfss	___wmul@multiplier,0
  5419  0666  2E6C               	goto	l629
  5420  0667  0878               	movf	___wmul@multiplicand,w
  5421  0668  0020               	movlb	0	; select bank0
  5422  0669  07A0               	addwf	___wmul@product,f
  5423  066A  0879               	movf	___wmul@multiplicand+1,w
  5424  066B  3DA1               	addwfc	___wmul@product+1,f
  5425  066C                     l629:
  5426  066C  3001               	movlw	1
  5427  066D                     u1425:
  5428  066D  35F8               	lslf	___wmul@multiplicand,f
  5429  066E  0DF9               	rlf	___wmul@multiplicand+1,f
  5430  066F  0B89               	decfsz	9,f
  5431  0670  2E6D               	goto	u1425
  5432  0671  3001               	movlw	1
  5433  0672                     u1435:
  5434  0672  36F7               	lsrf	___wmul@multiplier+1,f
  5435  0673  0CF6               	rrf	___wmul@multiplier,f
  5436  0674  0B89               	decfsz	9,f
  5437  0675  2E72               	goto	u1435
  5438  0676  0876               	movf	___wmul@multiplier,w
  5439  0677  0477               	iorwf	___wmul@multiplier+1,w
  5440  0678  1D03               	btfss	3,2
  5441  0679  2E65               	goto	l2476
  5442  067A  0020               	movlb	0	; select bank0
  5443  067B  0821               	movf	___wmul@product+1,w
  5444  067C  00F7               	movwf	?___wmul+1
  5445  067D  0820               	movf	___wmul@product,w
  5446  067E  00F6               	movwf	?___wmul
  5447  067F  0008               	return
  5448  0680                     __end_of___wmul:
  5449                           
  5450                           	psect	text14
  5451  06B7                     __ptext14:	
  5452 ;; *************** function _TM1640_dispLowBat *****************
  5453 ;; Defined at:
  5454 ;;		line 110 in file "TM1640.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;		None
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;		None
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      void 
  5461 ;; Registers used:
  5462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5468 ;;      Params:         0       0       0       0
  5469 ;;      Locals:         0       0       0       0
  5470 ;;      Temps:          1       0       0       0
  5471 ;;      Totals:         1       0       0       0
  5472 ;;Total ram usage:        1 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    5
  5475 ;; This function calls:
  5476 ;;		_TM1640_sendAddress_and_Data
  5477 ;;		_TM1640_sendCommand
  5478 ;; This function is called by:
  5479 ;;		_main
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           
  5484                           ;psect for function _TM1640_dispLowBat
  5485  06B7                     _TM1640_dispLowBat:
  5486                           
  5487                           ;TM1640.c: 111: TM1640_sendCommand(0b01000100);
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in _TM1640_dispLowBat: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5491  06B7  3044               	movlw	68
  5492  06B8  2680               	fcall	_TM1640_sendCommand
  5493                           
  5494                           ;TM1640.c: 112: TM1640_sendAddress_and_Data( 0b11000001, LO_BAT[1]);
  5495  06B9  30CD               	movlw	low ((_LO_BAT+1)| (0+32768))
  5496  06BA  0084               	movwf	4
  5497  06BB  3087               	movlw	high ((_LO_BAT+1)| (0+32768))
  5498  06BC  0085               	movwf	5
  5499  06BD  0800               	movf	0,w	;code access
  5500  06BE  00F7               	movwf	??_TM1640_dispLowBat
  5501  06BF  0877               	movf	??_TM1640_dispLowBat,w
  5502  06C0  00F5               	movwf	TM1640_sendAddress_and_Data@data
  5503  06C1  30C1               	movlw	193
  5504  06C2  2622               	fcall	_TM1640_sendAddress_and_Data
  5505                           
  5506                           ;TM1640.c: 113: TM1640_sendAddress_and_Data( 0b11000000, LO_BAT[0]);
  5507  06C3  30CC               	movlw	low (_LO_BAT| (0+32768))
  5508  06C4  0084               	movwf	4
  5509  06C5  3087               	movlw	high (_LO_BAT| (0+32768))
  5510  06C6  0085               	movwf	5
  5511  06C7  0800               	movf	0,w	;code access
  5512  06C8  00F7               	movwf	??_TM1640_dispLowBat
  5513  06C9  0877               	movf	??_TM1640_dispLowBat,w
  5514  06CA  00F5               	movwf	TM1640_sendAddress_and_Data@data
  5515  06CB  30C0               	movlw	192
  5516  06CC  2622               	fcall	_TM1640_sendAddress_and_Data
  5517                           
  5518                           ;TM1640.c: 114: TM1640_sendCommand(0b10001111);
  5519  06CD  308F               	movlw	143
  5520  06CE  2680               	fcall	_TM1640_sendCommand
  5521  06CF  0008               	return
  5522  06D0                     __end_of_TM1640_dispLowBat:
  5523                           
  5524                           	psect	text15
  5525  04BD                     __ptext15:	
  5526 ;; *************** function _TM1640_dispINT *****************
  5527 ;; Defined at:
  5528 ;;		line 68 in file "TM1640.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  value           2    0[BANK0 ] unsigned int 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  digit_high      1    4[BANK0 ] unsigned char 
  5533 ;;  digit_low       1    3[BANK0 ] unsigned char 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 1F/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5543 ;;      Params:         0       2       0       0
  5544 ;;      Locals:         0       2       0       0
  5545 ;;      Temps:          0       1       0       0
  5546 ;;      Totals:         0       5       0       0
  5547 ;;Total ram usage:        5 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    5
  5550 ;; This function calls:
  5551 ;;		_TM1640_sendAddress_and_Data
  5552 ;;		_TM1640_sendCommand
  5553 ;;		___lwdiv
  5554 ;;		___lwmod
  5555 ;; This function is called by:
  5556 ;;		_main
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           
  5561                           ;psect for function _TM1640_dispINT
  5562  04BD                     _TM1640_dispINT:
  5563                           
  5564                           ;TM1640.c: 69: unsigned char digit_low, digit_high;;TM1640.c: 70: digit_low = value % 10
      +                          ;
  5565                           
  5566                           ;incstack = 0
  5567                           ; Regs used in _TM1640_dispINT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5568  04BD  300A               	movlw	10
  5569  04BE  00F2               	movwf	___lwmod@divisor
  5570  04BF  3000               	movlw	0
  5571  04C0  00F3               	movwf	___lwmod@divisor+1
  5572  04C1  0821               	movf	TM1640_dispINT@value+1,w
  5573  04C2  00F5               	movwf	___lwmod@dividend+1
  5574  04C3  0820               	movf	TM1640_dispINT@value,w
  5575  04C4  00F4               	movwf	___lwmod@dividend
  5576  04C5  25D3               	fcall	___lwmod
  5577  04C6  0872               	movf	?___lwmod,w
  5578  04C7  00A2               	movwf	??_TM1640_dispINT
  5579  04C8  0822               	movf	??_TM1640_dispINT,w
  5580  04C9  00A3               	movwf	TM1640_dispINT@digit_low
  5581                           
  5582                           ;TM1640.c: 71: digit_high = value / 10;
  5583  04CA  300A               	movlw	10
  5584  04CB  00F2               	movwf	___lwdiv@divisor
  5585  04CC  3000               	movlw	0
  5586  04CD  00F3               	movwf	___lwdiv@divisor+1
  5587  04CE  0821               	movf	TM1640_dispINT@value+1,w
  5588  04CF  00F5               	movwf	___lwdiv@dividend+1
  5589  04D0  0820               	movf	TM1640_dispINT@value,w
  5590  04D1  00F4               	movwf	___lwdiv@dividend
  5591  04D2  253D               	fcall	___lwdiv
  5592  04D3  0872               	movf	?___lwdiv,w
  5593  04D4  00A2               	movwf	??_TM1640_dispINT
  5594  04D5  0822               	movf	??_TM1640_dispINT,w
  5595  04D6  00A4               	movwf	TM1640_dispINT@digit_high
  5596                           
  5597                           ;TM1640.c: 72: if (digit_high==0) digit_high=10;
  5598  04D7  0824               	movf	TM1640_dispINT@digit_high,w
  5599  04D8  1D03               	btfss	3,2
  5600  04D9  2CDE               	goto	l2554
  5601  04DA  300A               	movlw	10
  5602  04DB  00A2               	movwf	??_TM1640_dispINT
  5603  04DC  0822               	movf	??_TM1640_dispINT,w
  5604  04DD  00A4               	movwf	TM1640_dispINT@digit_high
  5605  04DE                     l2554:
  5606                           
  5607                           ;TM1640.c: 73: TM1640_sendCommand(0b01000100);
  5608  04DE  3044               	movlw	68
  5609  04DF  2680               	fcall	_TM1640_sendCommand
  5610                           
  5611                           ;TM1640.c: 74: TM1640_sendAddress_and_Data( 0b11000001, NUMBER_FONT[digit_low]);
  5612  04E0  0020               	movlb	0	; select bank0
  5613  04E1  0823               	movf	TM1640_dispINT@digit_low,w
  5614  04E2  3E79               	addlw	low (_NUMBER_FONT| (0+32768))
  5615  04E3  0084               	movwf	4
  5616  04E4  3087               	movlw	high (_NUMBER_FONT| (0+32768))
  5617  04E5  1803               	skipnc
  5618  04E6  3E01               	addlw	1
  5619  04E7  0085               	movwf	5
  5620  04E8  0800               	movf	0,w	;code access
  5621  04E9  00A2               	movwf	??_TM1640_dispINT
  5622  04EA  0822               	movf	??_TM1640_dispINT,w
  5623  04EB  00F5               	movwf	TM1640_sendAddress_and_Data@data
  5624  04EC  30C1               	movlw	193
  5625  04ED  2622               	fcall	_TM1640_sendAddress_and_Data
  5626                           
  5627                           ;TM1640.c: 75: TM1640_sendCommand(0b01000100);
  5628  04EE  3044               	movlw	68
  5629  04EF  2680               	fcall	_TM1640_sendCommand
  5630                           
  5631                           ;TM1640.c: 76: TM1640_sendAddress_and_Data( 0b11000000, NUMBER_FONT[digit_high]);
  5632  04F0  0020               	movlb	0	; select bank0
  5633  04F1  0824               	movf	TM1640_dispINT@digit_high,w
  5634  04F2  3E79               	addlw	low (_NUMBER_FONT| (0+32768))
  5635  04F3  0084               	movwf	4
  5636  04F4  3087               	movlw	high (_NUMBER_FONT| (0+32768))
  5637  04F5  1803               	skipnc
  5638  04F6  3E01               	addlw	1
  5639  04F7  0085               	movwf	5
  5640  04F8  0800               	movf	0,w	;code access
  5641  04F9  00A2               	movwf	??_TM1640_dispINT
  5642  04FA  0822               	movf	??_TM1640_dispINT,w
  5643  04FB  00F5               	movwf	TM1640_sendAddress_and_Data@data
  5644  04FC  30C0               	movlw	192
  5645  04FD  2622               	fcall	_TM1640_sendAddress_and_Data
  5646                           
  5647                           ;TM1640.c: 77: TM1640_sendCommand(0b10001111);
  5648  04FE  308F               	movlw	143
  5649  04FF  2680               	fcall	_TM1640_sendCommand
  5650                           
  5651                           ;TM1640.c: 78: TM1640_sendCommand(0b10001111);
  5652  0500  308F               	movlw	143
  5653  0501  2680               	fcall	_TM1640_sendCommand
  5654  0502  0008               	return
  5655  0503                     __end_of_TM1640_dispINT:
  5656                           
  5657                           	psect	text16
  5658  05D3                     __ptext16:	
  5659 ;; *************** function ___lwmod *****************
  5660 ;; Defined at:
  5661 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  divisor         2    2[COMMON] unsigned int 
  5664 ;;  dividend        2    4[COMMON] unsigned int 
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;  counter         1    7[COMMON] unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  2    2[COMMON] unsigned int 
  5669 ;; Registers used:
  5670 ;;		wreg, status,2, status,0
  5671 ;; Tracked objects:
  5672 ;;		On entry : 1F/0
  5673 ;;		On exit  : 1F/0
  5674 ;;		Unchanged: 1F/0
  5675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5676 ;;      Params:         4       0       0       0
  5677 ;;      Locals:         1       0       0       0
  5678 ;;      Temps:          1       0       0       0
  5679 ;;      Totals:         6       0       0       0
  5680 ;;Total ram usage:        6 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    3
  5683 ;; This function calls:
  5684 ;;		Nothing
  5685 ;; This function is called by:
  5686 ;;		_TM1640_dispINT
  5687 ;;		_TM1640_dispVoltage
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           
  5692                           ;psect for function ___lwmod
  5693  05D3                     ___lwmod:
  5694                           
  5695                           ;incstack = 0
  5696                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5697  05D3  0872               	movf	___lwmod@divisor,w
  5698  05D4  0473               	iorwf	___lwmod@divisor+1,w
  5699  05D5  1903               	btfsc	3,2
  5700  05D6  2DFA               	goto	l1982
  5701  05D7  01F7               	clrf	___lwmod@counter
  5702  05D8  0AF7               	incf	___lwmod@counter,f
  5703  05D9                     l1972:
  5704  05D9  1BF3               	btfsc	___lwmod@divisor+1,7
  5705  05DA  2DE5               	goto	l1974
  5706  05DB  3001               	movlw	1
  5707  05DC                     u885:
  5708  05DC  35F2               	lslf	___lwmod@divisor,f
  5709  05DD  0DF3               	rlf	___lwmod@divisor+1,f
  5710  05DE  0B89               	decfsz	9,f
  5711  05DF  2DDC               	goto	u885
  5712  05E0  3001               	movlw	1
  5713  05E1  00F6               	movwf	??___lwmod
  5714  05E2  0876               	movf	??___lwmod,w
  5715  05E3  07F7               	addwf	___lwmod@counter,f
  5716  05E4  2DD9               	goto	l1972
  5717  05E5                     l1974:
  5718  05E5  0873               	movf	___lwmod@divisor+1,w
  5719  05E6  0275               	subwf	___lwmod@dividend+1,w
  5720  05E7  1D03               	skipz
  5721  05E8  2DEB               	goto	u905
  5722  05E9  0872               	movf	___lwmod@divisor,w
  5723  05EA  0274               	subwf	___lwmod@dividend,w
  5724  05EB                     u905:
  5725  05EB  1C03               	skipc
  5726  05EC  2DF1               	goto	l1978
  5727  05ED  0872               	movf	___lwmod@divisor,w
  5728  05EE  02F4               	subwf	___lwmod@dividend,f
  5729  05EF  0873               	movf	___lwmod@divisor+1,w
  5730  05F0  3BF5               	subwfb	___lwmod@dividend+1,f
  5731  05F1                     l1978:
  5732  05F1  3001               	movlw	1
  5733  05F2                     u915:
  5734  05F2  36F3               	lsrf	___lwmod@divisor+1,f
  5735  05F3  0CF2               	rrf	___lwmod@divisor,f
  5736  05F4  0B89               	decfsz	9,f
  5737  05F5  2DF2               	goto	u915
  5738  05F6  3001               	movlw	1
  5739  05F7  02F7               	subwf	___lwmod@counter,f
  5740  05F8  1D03               	btfss	3,2
  5741  05F9  2DE5               	goto	l1974
  5742  05FA                     l1982:
  5743  05FA  0875               	movf	___lwmod@dividend+1,w
  5744  05FB  00F3               	movwf	?___lwmod+1
  5745  05FC  0874               	movf	___lwmod@dividend,w
  5746  05FD  00F2               	movwf	?___lwmod
  5747  05FE  0008               	return
  5748  05FF                     __end_of___lwmod:
  5749                           
  5750                           	psect	text17
  5751  053D                     __ptext17:	
  5752 ;; *************** function ___lwdiv *****************
  5753 ;; Defined at:
  5754 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  divisor         2    2[COMMON] unsigned int 
  5757 ;;  dividend        2    4[COMMON] unsigned int 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  quotient        2    7[COMMON] unsigned int 
  5760 ;;  counter         1    9[COMMON] unsigned char 
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  2    2[COMMON] unsigned int 
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0
  5765 ;; Tracked objects:
  5766 ;;		On entry : 1F/0
  5767 ;;		On exit  : 1F/0
  5768 ;;		Unchanged: 1F/0
  5769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5770 ;;      Params:         4       0       0       0
  5771 ;;      Locals:         3       0       0       0
  5772 ;;      Temps:          1       0       0       0
  5773 ;;      Totals:         8       0       0       0
  5774 ;;Total ram usage:        8 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    3
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_TM1640_dispINT
  5781 ;;		_TM1640_dispVoltage
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function ___lwdiv
  5787  053D                     ___lwdiv:
  5788                           
  5789                           ;incstack = 0
  5790                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5791  053D  01F7               	clrf	___lwdiv@quotient
  5792  053E  01F8               	clrf	___lwdiv@quotient+1
  5793  053F  0872               	movf	___lwdiv@divisor,w
  5794  0540  0473               	iorwf	___lwdiv@divisor+1,w
  5795  0541  1903               	btfsc	3,2
  5796  0542  2D6C               	goto	l1960
  5797  0543  01F9               	clrf	___lwdiv@counter
  5798  0544  0AF9               	incf	___lwdiv@counter,f
  5799  0545                     l1948:
  5800  0545  1BF3               	btfsc	___lwdiv@divisor+1,7
  5801  0546  2D51               	goto	l1950
  5802  0547  3001               	movlw	1
  5803  0548                     u815:
  5804  0548  35F2               	lslf	___lwdiv@divisor,f
  5805  0549  0DF3               	rlf	___lwdiv@divisor+1,f
  5806  054A  0B89               	decfsz	9,f
  5807  054B  2D48               	goto	u815
  5808  054C  3001               	movlw	1
  5809  054D  00F6               	movwf	??___lwdiv
  5810  054E  0876               	movf	??___lwdiv,w
  5811  054F  07F9               	addwf	___lwdiv@counter,f
  5812  0550  2D45               	goto	l1948
  5813  0551                     l1950:
  5814  0551  3001               	movlw	1
  5815  0552                     u835:
  5816  0552  35F7               	lslf	___lwdiv@quotient,f
  5817  0553  0DF8               	rlf	___lwdiv@quotient+1,f
  5818  0554  0B89               	decfsz	9,f
  5819  0555  2D52               	goto	u835
  5820  0556  0873               	movf	___lwdiv@divisor+1,w
  5821  0557  0275               	subwf	___lwdiv@dividend+1,w
  5822  0558  1D03               	skipz
  5823  0559  2D5C               	goto	u845
  5824  055A  0872               	movf	___lwdiv@divisor,w
  5825  055B  0274               	subwf	___lwdiv@dividend,w
  5826  055C                     u845:
  5827  055C  1C03               	skipc
  5828  055D  2D63               	goto	l1956
  5829  055E  0872               	movf	___lwdiv@divisor,w
  5830  055F  02F4               	subwf	___lwdiv@dividend,f
  5831  0560  0873               	movf	___lwdiv@divisor+1,w
  5832  0561  3BF5               	subwfb	___lwdiv@dividend+1,f
  5833  0562  1477               	bsf	___lwdiv@quotient,0
  5834  0563                     l1956:
  5835  0563  3001               	movlw	1
  5836  0564                     u855:
  5837  0564  36F3               	lsrf	___lwdiv@divisor+1,f
  5838  0565  0CF2               	rrf	___lwdiv@divisor,f
  5839  0566  0B89               	decfsz	9,f
  5840  0567  2D64               	goto	u855
  5841  0568  3001               	movlw	1
  5842  0569  02F9               	subwf	___lwdiv@counter,f
  5843  056A  1D03               	btfss	3,2
  5844  056B  2D51               	goto	l1950
  5845  056C                     l1960:
  5846  056C  0878               	movf	___lwdiv@quotient+1,w
  5847  056D  00F3               	movwf	?___lwdiv+1
  5848  056E  0877               	movf	___lwdiv@quotient,w
  5849  056F  00F2               	movwf	?___lwdiv
  5850  0570  0008               	return
  5851  0571                     __end_of___lwdiv:
  5852                           
  5853                           	psect	text18
  5854  0503                     __ptext18:	
  5855 ;; *************** function _TM1640_dispDEC *****************
  5856 ;; Defined at:
  5857 ;;		line 81 in file "TM1640.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;  digit_high      1    wreg     unsigned char 
  5860 ;;  digit_low       1    2[BANK0 ] unsigned char 
  5861 ;;  dot             1    3[BANK0 ] unsigned char 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  digit_high      1    5[BANK0 ] unsigned char 
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 1F/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5873 ;;      Params:         0       2       0       0
  5874 ;;      Locals:         0       1       0       0
  5875 ;;      Temps:          0       1       0       0
  5876 ;;      Totals:         0       4       0       0
  5877 ;;Total ram usage:        4 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    5
  5880 ;; This function calls:
  5881 ;;		_TM1640_sendAddress_and_Data
  5882 ;;		_TM1640_sendCommand
  5883 ;; This function is called by:
  5884 ;;		_main
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           
  5889                           ;psect for function _TM1640_dispDEC
  5890  0503                     _TM1640_dispDEC:
  5891                           
  5892                           ;incstack = 0
  5893                           ; Regs used in _TM1640_dispDEC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5894                           ;TM1640_dispDEC@digit_high stored from wreg
  5895  0503  00A5               	movwf	TM1640_dispDEC@digit_high
  5896                           
  5897                           ;TM1640.c: 82: TM1640_sendCommand(0b01000100);
  5898  0504  3044               	movlw	68
  5899  0505  2680               	fcall	_TM1640_sendCommand
  5900                           
  5901                           ;TM1640.c: 83: TM1640_sendAddress_and_Data( 0b11000001, NUMBER_FONT[digit_low]);
  5902  0506  0020               	movlb	0	; select bank0
  5903  0507  0822               	movf	TM1640_dispDEC@digit_low,w
  5904  0508  3E79               	addlw	low (_NUMBER_FONT| (0+32768))
  5905  0509  0084               	movwf	4
  5906  050A  3087               	movlw	high (_NUMBER_FONT| (0+32768))
  5907  050B  1803               	skipnc
  5908  050C  3E01               	addlw	1
  5909  050D  0085               	movwf	5
  5910  050E  0800               	movf	0,w	;code access
  5911  050F  00A4               	movwf	??_TM1640_dispDEC
  5912  0510  0824               	movf	??_TM1640_dispDEC,w
  5913  0511  00F5               	movwf	TM1640_sendAddress_and_Data@data
  5914  0512  30C1               	movlw	193
  5915  0513  2622               	fcall	_TM1640_sendAddress_and_Data
  5916                           
  5917                           ;TM1640.c: 84: TM1640_sendCommand(0b01000100);
  5918  0514  3044               	movlw	68
  5919  0515  2680               	fcall	_TM1640_sendCommand
  5920                           
  5921                           ;TM1640.c: 85: if (dot) {
  5922  0516  0020               	movlb	0	; select bank0
  5923  0517  0823               	movf	TM1640_dispDEC@dot,w
  5924  0518  1903               	btfsc	3,2
  5925  0519  2D24               	goto	l2152
  5926  051A  0825               	movf	TM1640_dispDEC@digit_high,w
  5927  051B  3E79               	addlw	low (_NUMBER_FONT| (0+32768))
  5928  051C  0084               	movwf	4
  5929  051D  3087               	movlw	high (_NUMBER_FONT| (0+32768))
  5930  051E  1803               	skipnc
  5931  051F  3E01               	addlw	1
  5932  0520  0085               	movwf	5
  5933  0521  0800               	movf	0,w	;code access
  5934  0522  3880               	iorlw	128
  5935  0523  2D33               	goto	L2
  5936  0524                     l2152:	
  5937                           ;TM1640.c: 87: } else if (digit_high != 0) {
  5938                           
  5939  0524  0825               	movf	TM1640_dispDEC@digit_high,w
  5940  0525  1903               	btfsc	3,2
  5941  0526  2D2E               	goto	l2156
  5942                           
  5943                           ;TM1640.c: 88: TM1640_sendAddress_and_Data( 0b11000000, NUMBER_FONT[digit_high]);
  5944  0527  0825               	movf	TM1640_dispDEC@digit_high,w
  5945  0528  3E79               	addlw	low (_NUMBER_FONT| (0+32768))
  5946  0529  0084               	movwf	4
  5947  052A  3087               	movlw	high (_NUMBER_FONT| (0+32768))
  5948  052B  1803               	skipnc
  5949  052C  3E01               	addlw	1
  5950  052D  2D31               	goto	L3
  5951  052E                     l2156:	
  5952                           ;TM1640.c: 89: } else {
  5953                           
  5954                           
  5955                           ;TM1640.c: 90: TM1640_sendAddress_and_Data( 0b11000000, NUMBER_FONT[10]);
  5956  052E  3083               	movlw	low ((_NUMBER_FONT+10)| (0+32768))
  5957  052F  0084               	movwf	4
  5958  0530  3087               	movlw	high ((_NUMBER_FONT+10)| (0+32768))
  5959  0531                     L3:
  5960  0531  0085               	movwf	5
  5961  0532  0800               	movf	0,w	;code access
  5962  0533                     L2:
  5963  0533  00A4               	movwf	??_TM1640_dispDEC
  5964  0534  0824               	movf	??_TM1640_dispDEC,w
  5965  0535  00F5               	movwf	TM1640_sendAddress_and_Data@data
  5966  0536  30C0               	movlw	192
  5967  0537  2622               	fcall	_TM1640_sendAddress_and_Data
  5968                           
  5969                           ;TM1640.c: 91: };TM1640.c: 92: TM1640_sendCommand(0b10001111);
  5970  0538  308F               	movlw	143
  5971  0539  2680               	fcall	_TM1640_sendCommand
  5972                           
  5973                           ;TM1640.c: 93: TM1640_sendCommand(0b10001111);
  5974  053A  308F               	movlw	143
  5975  053B  2680               	fcall	_TM1640_sendCommand
  5976  053C  0008               	return
  5977  053D                     __end_of_TM1640_dispDEC:
  5978                           
  5979                           	psect	text19
  5980  06D0                     __ptext19:	
  5981 ;; *************** function _TM1640_diplayOFF *****************
  5982 ;; Defined at:
  5983 ;;		line 117 in file "TM1640.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  digit           1    8[COMMON] unsigned char 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      void 
  5990 ;; Registers used:
  5991 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/2
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5997 ;;      Params:         0       0       0       0
  5998 ;;      Locals:         1       0       0       0
  5999 ;;      Temps:          1       0       0       0
  6000 ;;      Totals:         2       0       0       0
  6001 ;;Total ram usage:        2 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    5
  6004 ;; This function calls:
  6005 ;;		_TM1640_sendAddress_and_Data
  6006 ;;		_TM1640_sendCommand
  6007 ;; This function is called by:
  6008 ;;		_main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _TM1640_diplayOFF
  6014  06D0                     _TM1640_diplayOFF:
  6015                           
  6016                           ;TM1640.c: 118: unsigned char digit;;TM1640.c: 119: digit=NUMBER_FONT[10];
  6017                           
  6018                           ;incstack = 0
  6019                           ; Regs used in _TM1640_diplayOFF: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6020  06D0  3083               	movlw	low ((_NUMBER_FONT+10)| (0+32768))
  6021  06D1  0084               	movwf	4
  6022  06D2  3087               	movlw	high ((_NUMBER_FONT+10)| (0+32768))
  6023  06D3  0085               	movwf	5
  6024  06D4  0800               	movf	0,w	;code access
  6025  06D5  00F7               	movwf	??_TM1640_diplayOFF
  6026  06D6  0877               	movf	??_TM1640_diplayOFF,w
  6027  06D7  00F8               	movwf	TM1640_diplayOFF@digit
  6028                           
  6029                           ;TM1640.c: 120: TM1640_sendCommand(0b01000100);
  6030  06D8  3044               	movlw	68
  6031  06D9  2680               	fcall	_TM1640_sendCommand
  6032                           
  6033                           ;TM1640.c: 121: TM1640_sendAddress_and_Data( 0b11000001, digit );
  6034  06DA  0878               	movf	TM1640_diplayOFF@digit,w
  6035  06DB  00F7               	movwf	??_TM1640_diplayOFF
  6036  06DC  0877               	movf	??_TM1640_diplayOFF,w
  6037  06DD  00F5               	movwf	TM1640_sendAddress_and_Data@data
  6038  06DE  30C1               	movlw	193
  6039  06DF  2622               	fcall	_TM1640_sendAddress_and_Data
  6040                           
  6041                           ;TM1640.c: 122: TM1640_sendAddress_and_Data( 0b11000000, digit );
  6042  06E0  0878               	movf	TM1640_diplayOFF@digit,w
  6043  06E1  00F7               	movwf	??_TM1640_diplayOFF
  6044  06E2  0877               	movf	??_TM1640_diplayOFF,w
  6045  06E3  00F5               	movwf	TM1640_sendAddress_and_Data@data
  6046  06E4  30C0               	movlw	192
  6047  06E5  2622               	fcall	_TM1640_sendAddress_and_Data
  6048                           
  6049                           ;TM1640.c: 123: TM1640_sendCommand(0b10000000);
  6050  06E6  3080               	movlw	128
  6051  06E7  2680               	fcall	_TM1640_sendCommand
  6052  06E8  0008               	return
  6053  06E9                     __end_of_TM1640_diplayOFF:
  6054                           
  6055                           	psect	text20
  6056  072C                     __ptext20:	
  6057 ;; *************** function _TM1640_LEDarrayOFF *****************
  6058 ;; Defined at:
  6059 ;;		line 135 in file "TM1640.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;		None
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  pattern         1    8[COMMON] unsigned char 
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      void 
  6066 ;; Registers used:
  6067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/2
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6073 ;;      Params:         0       0       0       0
  6074 ;;      Locals:         1       0       0       0
  6075 ;;      Temps:          1       0       0       0
  6076 ;;      Totals:         2       0       0       0
  6077 ;;Total ram usage:        2 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:    5
  6080 ;; This function calls:
  6081 ;;		_TM1640_sendAddress_and_Data
  6082 ;;		_TM1640_sendCommand
  6083 ;; This function is called by:
  6084 ;;		_main
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           
  6089                           ;psect for function _TM1640_LEDarrayOFF
  6090  072C                     _TM1640_LEDarrayOFF:
  6091                           
  6092                           ;TM1640.c: 136: unsigned char pattern;;TM1640.c: 137: pattern=LED_PATTERN[0];
  6093                           
  6094                           ;incstack = 0
  6095                           ; Regs used in _TM1640_LEDarrayOFF: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6096  072C  30A4               	movlw	low (_LED_PATTERN| (0+32768))
  6097  072D  0084               	movwf	4
  6098  072E  3087               	movlw	high (_LED_PATTERN| (0+32768))
  6099  072F  0085               	movwf	5
  6100  0730  0800               	movf	0,w	;code access
  6101  0731  00F7               	movwf	??_TM1640_LEDarrayOFF
  6102  0732  0877               	movf	??_TM1640_LEDarrayOFF,w
  6103  0733  00F8               	movwf	TM1640_LEDarrayOFF@pattern
  6104                           
  6105                           ;TM1640.c: 138: TM1640_sendCommand(0b01000100);
  6106  0734  3044               	movlw	68
  6107  0735  2680               	fcall	_TM1640_sendCommand
  6108                           
  6109                           ;TM1640.c: 139: TM1640_sendAddress_and_Data( 0b11000010, pattern);
  6110  0736  0878               	movf	TM1640_LEDarrayOFF@pattern,w
  6111  0737  00F7               	movwf	??_TM1640_LEDarrayOFF
  6112  0738  0877               	movf	??_TM1640_LEDarrayOFF,w
  6113  0739  00F5               	movwf	TM1640_sendAddress_and_Data@data
  6114  073A  30C2               	movlw	194
  6115  073B  2622               	fcall	_TM1640_sendAddress_and_Data
  6116                           
  6117                           ;TM1640.c: 140: TM1640_sendCommand(0b10000000);
  6118  073C  3080               	movlw	128
  6119  073D  2680               	fcall	_TM1640_sendCommand
  6120  073E  0008               	return
  6121  073F                     __end_of_TM1640_LEDarrayOFF:
  6122                           
  6123                           	psect	text21
  6124  06E9                     __ptext21:	
  6125 ;; *************** function _TM1640_LEDarray *****************
  6126 ;; Defined at:
  6127 ;;		line 126 in file "TM1640.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;  value           1    wreg     unsigned char 
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;  value           1    8[COMMON] unsigned char 
  6132 ;;  pattern         1    9[COMMON] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6142 ;;      Params:         0       0       0       0
  6143 ;;      Locals:         2       0       0       0
  6144 ;;      Temps:          1       0       0       0
  6145 ;;      Totals:         3       0       0       0
  6146 ;;Total ram usage:        3 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    5
  6149 ;; This function calls:
  6150 ;;		_TM1640_sendAddress_and_Data
  6151 ;;		_TM1640_sendCommand
  6152 ;; This function is called by:
  6153 ;;		_main
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           
  6158                           ;psect for function _TM1640_LEDarray
  6159  06E9                     _TM1640_LEDarray:
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in _TM1640_LEDarray: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6163                           ;TM1640_LEDarray@value stored from wreg
  6164  06E9  00F8               	movwf	TM1640_LEDarray@value
  6165                           
  6166                           ;TM1640.c: 127: unsigned char pattern;;TM1640.c: 128: pattern=LED_PATTERN[value];
  6167  06EA  0878               	movf	TM1640_LEDarray@value,w
  6168  06EB  3EA4               	addlw	low (_LED_PATTERN| (0+32768))
  6169  06EC  0084               	movwf	4
  6170  06ED  3087               	movlw	high (_LED_PATTERN| (0+32768))
  6171  06EE  1803               	skipnc
  6172  06EF  3E01               	addlw	1
  6173  06F0  0085               	movwf	5
  6174  06F1  0800               	movf	0,w	;code access
  6175  06F2  00F7               	movwf	??_TM1640_LEDarray
  6176  06F3  0877               	movf	??_TM1640_LEDarray,w
  6177  06F4  00F9               	movwf	TM1640_LEDarray@pattern
  6178                           
  6179                           ;TM1640.c: 129: TM1640_sendCommand(0b01000100);
  6180  06F5  3044               	movlw	68
  6181  06F6  2680               	fcall	_TM1640_sendCommand
  6182                           
  6183                           ;TM1640.c: 130: TM1640_sendAddress_and_Data( 0b11000010, pattern);
  6184  06F7  0879               	movf	TM1640_LEDarray@pattern,w
  6185  06F8  00F7               	movwf	??_TM1640_LEDarray
  6186  06F9  0877               	movf	??_TM1640_LEDarray,w
  6187  06FA  00F5               	movwf	TM1640_sendAddress_and_Data@data
  6188  06FB  30C2               	movlw	194
  6189  06FC  2622               	fcall	_TM1640_sendAddress_and_Data
  6190                           
  6191                           ;TM1640.c: 131: TM1640_sendCommand(0b10001000);
  6192  06FD  3088               	movlw	136
  6193  06FE  2680               	fcall	_TM1640_sendCommand
  6194                           
  6195                           ;TM1640.c: 132: TM1640_sendCommand(0b10001111);
  6196  06FF  308F               	movlw	143
  6197  0700  2680               	fcall	_TM1640_sendCommand
  6198  0701  0008               	return
  6199  0702                     __end_of_TM1640_LEDarray:
  6200                           
  6201                           	psect	text22
  6202  0680                     __ptext22:	
  6203 ;; *************** function _TM1640_sendCommand *****************
  6204 ;; Defined at:
  6205 ;;		line 30 in file "TM1640.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;  command         1    wreg     unsigned char 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  command         1    5[COMMON] unsigned char 
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		wreg, status,2, status,0, pclath, cstack
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6219 ;;      Params:         0       0       0       0
  6220 ;;      Locals:         1       0       0       0
  6221 ;;      Temps:          0       0       0       0
  6222 ;;      Totals:         1       0       0       0
  6223 ;;Total ram usage:        1 bytes
  6224 ;; Hardware stack levels used:    1
  6225 ;; Hardware stack levels required when called:    4
  6226 ;; This function calls:
  6227 ;;		_TM1640_sendByte
  6228 ;; This function is called by:
  6229 ;;		_TM1640_dispINT
  6230 ;;		_TM1640_dispDEC
  6231 ;;		_TM1640_dispVoltage
  6232 ;;		_TM1640_dispLowBat
  6233 ;;		_TM1640_diplayOFF
  6234 ;;		_TM1640_LEDarray
  6235 ;;		_TM1640_LEDarrayOFF
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           
  6240                           ;psect for function _TM1640_sendCommand
  6241  0680                     _TM1640_sendCommand:
  6242                           
  6243                           ;incstack = 0
  6244                           ; Regs used in _TM1640_sendCommand: [wreg+status,2+status,0+pclath+cstack]
  6245                           ;TM1640_sendCommand@command stored from wreg
  6246  0680  00F5               	movwf	TM1640_sendCommand@command
  6247                           
  6248                           ;TM1640.c: 32: do { LATCbits.LATC0 = 0; } while(0);
  6249  0681  0022               	movlb	2	; select bank2
  6250  0682  100E               	bcf	14,0	;volatile
  6251                           
  6252                           ;TM1640.c: 33: TM1640_sendByte(command);
  6253  0683  0875               	movf	TM1640_sendCommand@command,w
  6254  0684  2571               	fcall	_TM1640_sendByte
  6255  0685  0022               	movlb	2	; select bank2
  6256  0686  108E               	bcf	14,1	;volatile
  6257                           
  6258                           ;TM1640.c: 36: _delay((unsigned long)((150)*(1000000/4000000.0)));
  6259  0687  300C               	movlw	12
  6260  0688                     u1907:
  6261  0688  0B89               	decfsz	9,f
  6262  0689  2E88               	goto	u1907
  6263  068A  0000               	nop
  6264  068B  0022               	movlb	2	; select bank2
  6265  068C  100E               	bcf	14,0	;volatile
  6266                           
  6267                           ;TM1640.c: 38: _delay((unsigned long)((350)*(1000000/4000000.0)));
  6268  068D  301D               	movlw	29
  6269  068E                     u1917:
  6270  068E  0B89               	decfsz	9,f
  6271  068F  2E8E               	goto	u1917
  6272  0690  0022               	movlb	2	; select bank2
  6273  0691  148E               	bsf	14,1	;volatile
  6274                           
  6275                           ;TM1640.c: 40: _delay((unsigned long)((150)*(1000000/4000000.0)));
  6276  0692  300C               	movlw	12
  6277  0693                     u1927:
  6278  0693  0B89               	decfsz	9,f
  6279  0694  2E93               	goto	u1927
  6280  0695  0000               	nop
  6281  0696  0022               	movlb	2	; select bank2
  6282  0697  140E               	bsf	14,0	;volatile
  6283                           
  6284                           ;TM1640.c: 42: _delay((unsigned long)((350)*(1000000/4000000.0)));
  6285  0698  301D               	movlw	29
  6286  0699                     u1937:
  6287  0699  0B89               	decfsz	9,f
  6288  069A  2E99               	goto	u1937
  6289  069B  0008               	return
  6290  069C                     __end_of_TM1640_sendCommand:
  6291                           
  6292                           	psect	text23
  6293  0622                     __ptext23:	
  6294 ;; *************** function _TM1640_sendAddress_and_Data *****************
  6295 ;; Defined at:
  6296 ;;		line 45 in file "TM1640.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;  adress          1    wreg     unsigned char 
  6299 ;;  data            1    5[COMMON] unsigned char 
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;  adress          1    6[COMMON] unsigned char 
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg, status,2, status,0, pclath, cstack
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6311 ;;      Params:         1       0       0       0
  6312 ;;      Locals:         1       0       0       0
  6313 ;;      Temps:          0       0       0       0
  6314 ;;      Totals:         2       0       0       0
  6315 ;;Total ram usage:        2 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    4
  6318 ;; This function calls:
  6319 ;;		_TM1640_sendByte
  6320 ;; This function is called by:
  6321 ;;		_TM1640_dispINT
  6322 ;;		_TM1640_dispDEC
  6323 ;;		_TM1640_dispVoltage
  6324 ;;		_TM1640_dispLowBat
  6325 ;;		_TM1640_diplayOFF
  6326 ;;		_TM1640_LEDarray
  6327 ;;		_TM1640_LEDarrayOFF
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function _TM1640_sendAddress_and_Data
  6333  0622                     _TM1640_sendAddress_and_Data:
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in _TM1640_sendAddress_and_Data: [wreg+status,2+status,0+pclath+cstack]
  6337                           ;TM1640_sendAddress_and_Data@adress stored from wreg
  6338  0622  00F6               	movwf	TM1640_sendAddress_and_Data@adress
  6339                           
  6340                           ;TM1640.c: 47: do { LATCbits.LATC0 = 0; } while(0);
  6341  0623  0022               	movlb	2	; select bank2
  6342  0624  100E               	bcf	14,0	;volatile
  6343                           
  6344                           ;TM1640.c: 48: TM1640_sendByte(adress);
  6345  0625  0876               	movf	TM1640_sendAddress_and_Data@adress,w
  6346  0626  2571               	fcall	_TM1640_sendByte
  6347                           
  6348                           ;TM1640.c: 49: TM1640_sendByte(data);
  6349  0627  0875               	movf	TM1640_sendAddress_and_Data@data,w
  6350  0628  2571               	fcall	_TM1640_sendByte
  6351                           
  6352                           ;TM1640.c: 50: _delay((unsigned long)((150)*(1000000/4000000.0)));
  6353  0629  300C               	movlw	12
  6354  062A                     u1947:
  6355  062A  0B89               	decfsz	9,f
  6356  062B  2E2A               	goto	u1947
  6357  062C  0000               	nop
  6358  062D  0022               	movlb	2	; select bank2
  6359  062E  108E               	bcf	14,1	;volatile
  6360                           
  6361                           ;TM1640.c: 53: _delay((unsigned long)((150)*(1000000/4000000.0)));
  6362  062F  300C               	movlw	12
  6363  0630                     u1957:
  6364  0630  0B89               	decfsz	9,f
  6365  0631  2E30               	goto	u1957
  6366  0632  0000               	nop
  6367  0633  0022               	movlb	2	; select bank2
  6368  0634  100E               	bcf	14,0	;volatile
  6369                           
  6370                           ;TM1640.c: 55: _delay((unsigned long)((350)*(1000000/4000000.0)));
  6371  0635  301D               	movlw	29
  6372  0636                     u1967:
  6373  0636  0B89               	decfsz	9,f
  6374  0637  2E36               	goto	u1967
  6375  0638  0022               	movlb	2	; select bank2
  6376  0639  148E               	bsf	14,1	;volatile
  6377                           
  6378                           ;TM1640.c: 57: _delay((unsigned long)((150)*(1000000/4000000.0)));
  6379  063A  300C               	movlw	12
  6380  063B                     u1977:
  6381  063B  0B89               	decfsz	9,f
  6382  063C  2E3B               	goto	u1977
  6383  063D  0000               	nop
  6384  063E  0022               	movlb	2	; select bank2
  6385  063F  140E               	bsf	14,0	;volatile
  6386                           
  6387                           ;TM1640.c: 59: _delay((unsigned long)((350)*(1000000/4000000.0)));
  6388  0640  301D               	movlw	29
  6389  0641                     u1987:
  6390  0641  0B89               	decfsz	9,f
  6391  0642  2E41               	goto	u1987
  6392  0643  0008               	return
  6393  0644                     __end_of_TM1640_sendAddress_and_Data:
  6394                           
  6395                           	psect	text24
  6396  0571                     __ptext24:	
  6397 ;; *************** function _TM1640_sendByte *****************
  6398 ;; Defined at:
  6399 ;;		line 9 in file "TM1640.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  data            1    wreg     unsigned char 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;  data            1    3[COMMON] unsigned char 
  6404 ;;  i               1    4[COMMON] unsigned char 
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  1    wreg      void 
  6407 ;; Registers used:
  6408 ;;		wreg, status,2, status,0
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/2
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6414 ;;      Params:         0       0       0       0
  6415 ;;      Locals:         2       0       0       0
  6416 ;;      Temps:          1       0       0       0
  6417 ;;      Totals:         3       0       0       0
  6418 ;;Total ram usage:        3 bytes
  6419 ;; Hardware stack levels used:    1
  6420 ;; Hardware stack levels required when called:    3
  6421 ;; This function calls:
  6422 ;;		Nothing
  6423 ;; This function is called by:
  6424 ;;		_TM1640_sendCommand
  6425 ;;		_TM1640_sendAddress_and_Data
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           
  6430                           ;psect for function _TM1640_sendByte
  6431  0571                     _TM1640_sendByte:
  6432                           
  6433                           ;incstack = 0
  6434                           ; Regs used in _TM1640_sendByte: [wreg+status,2+status,0]
  6435                           ;TM1640_sendByte@data stored from wreg
  6436  0571  00F3               	movwf	TM1640_sendByte@data
  6437                           
  6438                           ;TM1640.c: 10: _delay((unsigned long)((500)*(1000000/4000000.0)));
  6439  0572  3029               	movlw	41
  6440  0573                     u1997:
  6441  0573  0B89               	decfsz	9,f
  6442  0574  2D73               	goto	u1997
  6443  0575  3200               	nop2
  6444                           
  6445                           ;TM1640.c: 11: for(char i=0;i<8;i++) {
  6446  0576  01F4               	clrf	TM1640_sendByte@i
  6447  0577                     l411:	
  6448                           ;TM1640.c: 12: do { LATCbits.LATC1 = 0; } while(0);
  6449                           
  6450  0577  0022               	movlb	2	; select bank2
  6451  0578  108E               	bcf	14,1	;volatile
  6452                           
  6453                           ;TM1640.c: 13: _delay((unsigned long)((150)*(1000000/4000000.0)));
  6454  0579  300C               	movlw	12
  6455  057A                     u2007:
  6456  057A  0B89               	decfsz	9,f
  6457  057B  2D7A               	goto	u2007
  6458  057C  0000               	nop
  6459                           
  6460                           ;TM1640.c: 14: if (data&1) {
  6461  057D  1C73               	btfss	TM1640_sendByte@data,0
  6462  057E  2D82               	goto	l417
  6463                           
  6464                           ;TM1640.c: 15: do { LATCbits.LATC0 = 1; } while(0);
  6465  057F  0022               	movlb	2	; select bank2
  6466  0580  140E               	bsf	14,0	;volatile
  6467  0581  2D84               	goto	l1790
  6468  0582                     l417:	
  6469                           ;TM1640.c: 17: do { LATCbits.LATC0 = 0; } while(0);
  6470                           
  6471  0582  0022               	movlb	2	; select bank2
  6472  0583  100E               	bcf	14,0	;volatile
  6473  0584                     l1790:
  6474                           
  6475                           ;TM1640.c: 18: };TM1640.c: 19: _delay((unsigned long)((350)*(1000000/4000000.0)));
  6476  0584  301D               	movlw	29
  6477  0585                     u2017:
  6478  0585  0B89               	decfsz	9,f
  6479  0586  2D85               	goto	u2017
  6480  0587  0022               	movlb	2	; select bank2
  6481  0588  148E               	bsf	14,1	;volatile
  6482                           
  6483                           ;TM1640.c: 21: data >>=1;
  6484  0589  1003               	clrc
  6485  058A  0CF3               	rrf	TM1640_sendByte@data,f
  6486                           
  6487                           ;TM1640.c: 22: _delay((unsigned long)((500)*(1000000/4000000.0)));
  6488  058B  3029               	movlw	41
  6489  058C                     u2027:
  6490  058C  0B89               	decfsz	9,f
  6491  058D  2D8C               	goto	u2027
  6492  058E  3200               	nop2
  6493  058F  3001               	movlw	1
  6494  0590  00F2               	movwf	??_TM1640_sendByte
  6495  0591  0872               	movf	??_TM1640_sendByte,w
  6496  0592  07F4               	addwf	TM1640_sendByte@i,f
  6497  0593  3008               	movlw	8
  6498  0594  0274               	subwf	TM1640_sendByte@i,w
  6499  0595  1C03               	skipc
  6500  0596  2D77               	goto	l411
  6501                           
  6502                           ;TM1640.c: 23: };TM1640.c: 24: do { LATCbits.LATC1 = 0; } while(0);
  6503  0597  0022               	movlb	2	; select bank2
  6504  0598  108E               	bcf	14,1	;volatile
  6505                           
  6506                           ;TM1640.c: 25: _delay((unsigned long)((150)*(1000000/4000000.0)));
  6507  0599  300C               	movlw	12
  6508  059A                     u2037:
  6509  059A  0B89               	decfsz	9,f
  6510  059B  2D9A               	goto	u2037
  6511  059C  0000               	nop
  6512  059D  0022               	movlb	2	; select bank2
  6513  059E  100E               	bcf	14,0	;volatile
  6514                           
  6515                           ;TM1640.c: 27: _delay((unsigned long)((500)*(1000000/4000000.0)));
  6516  059F  3029               	movlw	41
  6517  05A0                     u2047:
  6518  05A0  0B89               	decfsz	9,f
  6519  05A1  2DA0               	goto	u2047
  6520  05A2  3200               	nop2
  6521  05A3  0008               	return
  6522  05A4                     __end_of_TM1640_sendByte:
  6523                           
  6524                           	psect	text25
  6525  0784                     __ptext25:	
  6526 ;; *************** function _SYSTEM_Initialize *****************
  6527 ;; Defined at:
  6528 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      void 
  6535 ;; Registers used:
  6536 ;;		wreg, status,2, status,0, pclath, cstack
  6537 ;; Tracked objects:
  6538 ;;		On entry : 1F/0
  6539 ;;		On exit  : 1F/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6542 ;;      Params:         0       0       0       0
  6543 ;;      Locals:         0       0       0       0
  6544 ;;      Temps:          0       0       0       0
  6545 ;;      Totals:         0       0       0       0
  6546 ;;Total ram usage:        0 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    5
  6549 ;; This function calls:
  6550 ;;		_ADC_Initialize
  6551 ;;		_OSCILLATOR_Initialize
  6552 ;;		_PIN_MANAGER_Initialize
  6553 ;;		_PMD_Initialize
  6554 ;;		_TMR0_Initialize
  6555 ;;		_TMR1_Initialize
  6556 ;;		_WDT_Initialize
  6557 ;; This function is called by:
  6558 ;;		_main
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function _SYSTEM_Initialize
  6564  0784                     _SYSTEM_Initialize:
  6565                           
  6566                           ;mcc.c: 53: PMD_Initialize();
  6567                           
  6568                           ;incstack = 0
  6569                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6570  0784  278C               	fcall	_PMD_Initialize
  6571                           
  6572                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  6573  0785  269C               	fcall	_PIN_MANAGER_Initialize
  6574                           
  6575                           ;mcc.c: 55: OSCILLATOR_Initialize();
  6576  0786  2794               	fcall	_OSCILLATOR_Initialize
  6577                           
  6578                           ;mcc.c: 56: WDT_Initialize();
  6579  0787  27C8               	fcall	_WDT_Initialize
  6580                           
  6581                           ;mcc.c: 57: ADC_Initialize();
  6582  0788  279C               	fcall	_ADC_Initialize
  6583                           
  6584                           ;mcc.c: 58: TMR1_Initialize();
  6585  0789  2718               	fcall	_TMR1_Initialize
  6586                           
  6587                           ;mcc.c: 59: TMR0_Initialize();
  6588  078A  275D               	fcall	_TMR0_Initialize
  6589  078B  0008               	return
  6590  078C                     __end_of_SYSTEM_Initialize:
  6591                           
  6592                           	psect	text26
  6593  07C8                     __ptext26:	
  6594 ;; *************** function _WDT_Initialize *****************
  6595 ;; Defined at:
  6596 ;;		line 76 in file "mcc_generated_files/mcc.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;		None
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;		None
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  1    wreg      void 
  6603 ;; Registers used:
  6604 ;;		wreg
  6605 ;; Tracked objects:
  6606 ;;		On entry : 1F/12
  6607 ;;		On exit  : 1F/1
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6610 ;;      Params:         0       0       0       0
  6611 ;;      Locals:         0       0       0       0
  6612 ;;      Temps:          0       0       0       0
  6613 ;;      Totals:         0       0       0       0
  6614 ;;Total ram usage:        0 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    3
  6617 ;; This function calls:
  6618 ;;		Nothing
  6619 ;; This function is called by:
  6620 ;;		_SYSTEM_Initialize
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           
  6625                           ;psect for function _WDT_Initialize
  6626  07C8                     _WDT_Initialize:
  6627                           
  6628                           ;mcc.c: 79: WDTCON = 0x16;
  6629                           
  6630                           ;incstack = 0
  6631                           ; Regs used in _WDT_Initialize: [wreg]
  6632  07C8  3016               	movlw	22
  6633  07C9  0021               	movlb	1	; select bank1
  6634  07CA  0097               	movwf	23	;volatile
  6635  07CB  0008               	return
  6636  07CC                     __end_of_WDT_Initialize:
  6637                           
  6638                           	psect	text27
  6639  0718                     __ptext27:	
  6640 ;; *************** function _TMR1_Initialize *****************
  6641 ;; Defined at:
  6642 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg, status,2, status,0, pclath, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 1F/1
  6653 ;;		On exit  : 1F/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6656 ;;      Params:         0       0       0       0
  6657 ;;      Locals:         0       0       0       0
  6658 ;;      Temps:          0       0       0       0
  6659 ;;      Totals:         0       0       0       0
  6660 ;;Total ram usage:        0 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    4
  6663 ;; This function calls:
  6664 ;;		_TMR1_SetInterruptHandler
  6665 ;; This function is called by:
  6666 ;;		_SYSTEM_Initialize
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           
  6671                           ;psect for function _TMR1_Initialize
  6672  0718                     _TMR1_Initialize:
  6673                           
  6674                           ;tmr1.c: 69: T1GCON = 0x00;
  6675                           
  6676                           ;incstack = 0
  6677                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6678  0718  0020               	movlb	0	; select bank0
  6679  0719  019C               	clrf	28	;volatile
  6680                           
  6681                           ;tmr1.c: 72: TMR1H = 0xF0;
  6682  071A  30F0               	movlw	240
  6683  071B  009A               	movwf	26	;volatile
  6684                           
  6685                           ;tmr1.c: 75: TMR1L = 0x00;
  6686  071C  0199               	clrf	25	;volatile
  6687                           
  6688                           ;tmr1.c: 78: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  6689  071D  081A               	movf	26,w	;volatile
  6690  071E  00E0               	movwf	_timer1ReloadVal+1	;volatile
  6691  071F  0819               	movf	25,w	;volatile
  6692  0720  00DF               	movwf	_timer1ReloadVal	;volatile
  6693                           
  6694                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  6695  0721  1011               	bcf	17,0	;volatile
  6696                           
  6697                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
  6698  0722  0021               	movlb	1	; select bank1
  6699  0723  1411               	bsf	17,0	;volatile
  6700                           
  6701                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  6702  0724  30D8               	movlw	low _TMR1_DefaultInterruptHandler
  6703  0725  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6704  0726  3007               	movlw	high _TMR1_DefaultInterruptHandler
  6705  0727  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6706  0728  27B0               	fcall	_TMR1_SetInterruptHandler
  6707                           
  6708                           ;tmr1.c: 90: T1CON = 0xBD;
  6709  0729  30BD               	movlw	189
  6710  072A  009B               	movwf	27	;volatile
  6711  072B  0008               	return
  6712  072C                     __end_of_TMR1_Initialize:
  6713                           
  6714                           	psect	text28
  6715  07B0                     __ptext28:	
  6716 ;; *************** function _TMR1_SetInterruptHandler *****************
  6717 ;; Defined at:
  6718 ;;		line 171 in file "mcc_generated_files/tmr1.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  6721 ;;		 -> TimeCheck_ISR(1), TMR1_DefaultInterruptHandler(1), 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;		None
  6724 ;; Return value:  Size  Location     Type
  6725 ;;                  1    wreg      void 
  6726 ;; Registers used:
  6727 ;;		wreg
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/2
  6730 ;;		On exit  : 1F/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6733 ;;      Params:         2       0       0       0
  6734 ;;      Locals:         0       0       0       0
  6735 ;;      Temps:          0       0       0       0
  6736 ;;      Totals:         2       0       0       0
  6737 ;;Total ram usage:        2 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; Hardware stack levels required when called:    3
  6740 ;; This function calls:
  6741 ;;		Nothing
  6742 ;; This function is called by:
  6743 ;;		_TMR1_Initialize
  6744 ;;		_main
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function _TMR1_SetInterruptHandler
  6750  07B0                     _TMR1_SetInterruptHandler:
  6751                           
  6752                           ;tmr1.c: 172: TMR1_InterruptHandler = InterruptHandler;
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6756  07B0  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  6757  07B1  0020               	movlb	0	; select bank0
  6758  07B2  00DE               	movwf	_TMR1_InterruptHandler+1
  6759  07B3  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  6760  07B4  00DD               	movwf	_TMR1_InterruptHandler
  6761  07B5  0008               	return
  6762  07B6                     __end_of_TMR1_SetInterruptHandler:
  6763                           
  6764                           	psect	text29
  6765  075D                     __ptext29:	
  6766 ;; *************** function _TMR0_Initialize *****************
  6767 ;; Defined at:
  6768 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;		None
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;		None
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  1    wreg      void 
  6775 ;; Registers used:
  6776 ;;		wreg
  6777 ;; Tracked objects:
  6778 ;;		On entry : 1F/0
  6779 ;;		On exit  : 1F/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6782 ;;      Params:         0       0       0       0
  6783 ;;      Locals:         0       0       0       0
  6784 ;;      Temps:          0       0       0       0
  6785 ;;      Totals:         0       0       0       0
  6786 ;;Total ram usage:        0 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    3
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		_SYSTEM_Initialize
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           
  6797                           ;psect for function _TMR0_Initialize
  6798  075D                     _TMR0_Initialize:
  6799                           
  6800                           ;tmr0.c: 70: T0CON1 = 0x58;
  6801                           
  6802                           ;incstack = 0
  6803                           ; Regs used in _TMR0_Initialize: [wreg]
  6804  075D  3058               	movlw	88
  6805  075E  0098               	movwf	24	;volatile
  6806                           
  6807                           ;tmr0.c: 73: TMR0H = 0xFE;
  6808  075F  30FE               	movlw	254
  6809  0760  0096               	movwf	22	;volatile
  6810                           
  6811                           ;tmr0.c: 76: TMR0L = 0x18;
  6812  0761  3018               	movlw	24
  6813  0762  0095               	movwf	21	;volatile
  6814                           
  6815                           ;tmr0.c: 79: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  6816  0763  0816               	movf	22,w	;volatile
  6817  0764  00FB               	movwf	_timer0ReloadVal16bit+1	;volatile
  6818  0765  0815               	movf	21,w	;volatile
  6819  0766  00FA               	movwf	_timer0ReloadVal16bit	;volatile
  6820                           
  6821                           ;tmr0.c: 82: PIR0bits.TMR0IF = 0;
  6822  0767  1290               	bcf	16,5	;volatile
  6823                           
  6824                           ;tmr0.c: 85: T0CON0 = 0x90;
  6825  0768  3090               	movlw	144
  6826  0769  0097               	movwf	23	;volatile
  6827  076A  0008               	return
  6828  076B                     __end_of_TMR0_Initialize:
  6829                           
  6830                           	psect	text30
  6831  078C                     __ptext30:	
  6832 ;; *************** function _PMD_Initialize *****************
  6833 ;; Defined at:
  6834 ;;		line 82 in file "mcc_generated_files/mcc.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;		None
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1    wreg      void 
  6841 ;; Registers used:
  6842 ;;		status,2
  6843 ;; Tracked objects:
  6844 ;;		On entry : 1F/0
  6845 ;;		On exit  : 1F/12
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6848 ;;      Params:         0       0       0       0
  6849 ;;      Locals:         0       0       0       0
  6850 ;;      Temps:          0       0       0       0
  6851 ;;      Totals:         0       0       0       0
  6852 ;;Total ram usage:        0 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    3
  6855 ;; This function calls:
  6856 ;;		Nothing
  6857 ;; This function is called by:
  6858 ;;		_SYSTEM_Initialize
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           
  6863                           ;psect for function _PMD_Initialize
  6864  078C                     _PMD_Initialize:
  6865                           
  6866                           ;mcc.c: 85: PMD0 = 0x00;
  6867                           
  6868                           ;incstack = 0
  6869                           ; Regs used in _PMD_Initialize: [status,2]
  6870  078C  0032               	movlb	18	; select bank18
  6871  078D  0191               	clrf	17	;volatile
  6872                           
  6873                           ;mcc.c: 87: PMD1 = 0x00;
  6874  078E  0192               	clrf	18	;volatile
  6875                           
  6876                           ;mcc.c: 89: PMD2 = 0x00;
  6877  078F  0193               	clrf	19	;volatile
  6878                           
  6879                           ;mcc.c: 91: PMD3 = 0x00;
  6880  0790  0194               	clrf	20	;volatile
  6881                           
  6882                           ;mcc.c: 93: PMD4 = 0x00;
  6883  0791  0195               	clrf	21	;volatile
  6884                           
  6885                           ;mcc.c: 95: PMD5 = 0x00;
  6886  0792  0196               	clrf	22	;volatile
  6887  0793  0008               	return
  6888  0794                     __end_of_PMD_Initialize:
  6889                           
  6890                           	psect	text31
  6891  069C                     __ptext31:	
  6892 ;; *************** function _PIN_MANAGER_Initialize *****************
  6893 ;; Defined at:
  6894 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0
  6903 ;; Tracked objects:
  6904 ;;		On entry : 1F/12
  6905 ;;		On exit  : 1F/1C
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6908 ;;      Params:         0       0       0       0
  6909 ;;      Locals:         0       0       0       0
  6910 ;;      Temps:          0       0       0       0
  6911 ;;      Totals:         0       0       0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    3
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		_SYSTEM_Initialize
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _PIN_MANAGER_Initialize
  6924  069C                     _PIN_MANAGER_Initialize:
  6925                           
  6926                           ;pin_manager.c: 62: LATA = 0x00;
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  6930  069C  0022               	movlb	2	; select bank2
  6931  069D  018C               	clrf	12	;volatile
  6932                           
  6933                           ;pin_manager.c: 63: LATC = 0x00;
  6934  069E  018E               	clrf	14	;volatile
  6935                           
  6936                           ;pin_manager.c: 68: TRISA = 0x37;
  6937  069F  3037               	movlw	55
  6938  06A0  0021               	movlb	1	; select bank1
  6939  06A1  008C               	movwf	12	;volatile
  6940                           
  6941                           ;pin_manager.c: 69: TRISC = 0x10;
  6942  06A2  3010               	movlw	16
  6943  06A3  008E               	movwf	14	;volatile
  6944                           
  6945                           ;pin_manager.c: 74: ANSELC = 0x10;
  6946  06A4  3010               	movlw	16
  6947  06A5  0023               	movlb	3	; select bank3
  6948  06A6  008E               	movwf	14	;volatile
  6949                           
  6950                           ;pin_manager.c: 75: ANSELA = 0x21;
  6951  06A7  3021               	movlw	33
  6952  06A8  008C               	movwf	12	;volatile
  6953                           
  6954                           ;pin_manager.c: 80: WPUA = 0x07;
  6955  06A9  3007               	movlw	7
  6956  06AA  0024               	movlb	4	; select bank4
  6957  06AB  008C               	movwf	12	;volatile
  6958                           
  6959                           ;pin_manager.c: 81: WPUC = 0x03;
  6960  06AC  3003               	movlw	3
  6961  06AD  008E               	movwf	14	;volatile
  6962                           
  6963                           ;pin_manager.c: 86: ODCONA = 0x00;
  6964  06AE  0025               	movlb	5	; select bank5
  6965  06AF  018C               	clrf	12	;volatile
  6966                           
  6967                           ;pin_manager.c: 87: ODCONC = 0x00;
  6968  06B0  018E               	clrf	14	;volatile
  6969                           
  6970                           ;pin_manager.c: 96: T1CKIPPSbits.T1CKIPPS = 0x04;
  6971  06B1  003C               	movlb	28	; select bank28
  6972  06B2  0812               	movf	18,w	;volatile
  6973  06B3  39E0               	andlw	-32
  6974  06B4  3804               	iorlw	4
  6975  06B5  0092               	movwf	18	;volatile
  6976  06B6  0008               	return
  6977  06B7                     __end_of_PIN_MANAGER_Initialize:
  6978                           
  6979                           	psect	text32
  6980  0794                     __ptext32:	
  6981 ;; *************** function _OSCILLATOR_Initialize *****************
  6982 ;; Defined at:
  6983 ;;		line 62 in file "mcc_generated_files/mcc.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;		None
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;		None
  6988 ;; Return value:  Size  Location     Type
  6989 ;;                  1    wreg      void 
  6990 ;; Registers used:
  6991 ;;		wreg, status,2
  6992 ;; Tracked objects:
  6993 ;;		On entry : 1F/1C
  6994 ;;		On exit  : 1F/12
  6995 ;;		Unchanged: 0/0
  6996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6997 ;;      Params:         0       0       0       0
  6998 ;;      Locals:         0       0       0       0
  6999 ;;      Temps:          0       0       0       0
  7000 ;;      Totals:         0       0       0       0
  7001 ;;Total ram usage:        0 bytes
  7002 ;; Hardware stack levels used:    1
  7003 ;; Hardware stack levels required when called:    3
  7004 ;; This function calls:
  7005 ;;		Nothing
  7006 ;; This function is called by:
  7007 ;;		_SYSTEM_Initialize
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           
  7012                           ;psect for function _OSCILLATOR_Initialize
  7013  0794                     _OSCILLATOR_Initialize:
  7014                           
  7015                           ;mcc.c: 65: OSCCON1 = 0x60;
  7016                           
  7017                           ;incstack = 0
  7018                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7019  0794  3060               	movlw	96
  7020  0795  0032               	movlb	18	; select bank18
  7021  0796  0099               	movwf	25	;volatile
  7022                           
  7023                           ;mcc.c: 67: OSCCON3 = 0x00;
  7024  0797  019B               	clrf	27	;volatile
  7025                           
  7026                           ;mcc.c: 69: OSCEN = 0x00;
  7027  0798  019D               	clrf	29	;volatile
  7028                           
  7029                           ;mcc.c: 71: OSCFRQ = 0x00;
  7030  0799  019F               	clrf	31	;volatile
  7031                           
  7032                           ;mcc.c: 73: OSCTUNE = 0x00;
  7033  079A  019E               	clrf	30	;volatile
  7034  079B  0008               	return
  7035  079C                     __end_of_OSCILLATOR_Initialize:
  7036                           
  7037                           	psect	text33
  7038  079C                     __ptext33:	
  7039 ;; *************** function _ADC_Initialize *****************
  7040 ;; Defined at:
  7041 ;;		line 65 in file "mcc_generated_files/adc.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;		None
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;		None
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      void 
  7048 ;; Registers used:
  7049 ;;		wreg, status,2
  7050 ;; Tracked objects:
  7051 ;;		On entry : 1F/1
  7052 ;;		On exit  : 1F/1
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7055 ;;      Params:         0       0       0       0
  7056 ;;      Locals:         0       0       0       0
  7057 ;;      Temps:          0       0       0       0
  7058 ;;      Totals:         0       0       0       0
  7059 ;;Total ram usage:        0 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:    3
  7062 ;; This function calls:
  7063 ;;		Nothing
  7064 ;; This function is called by:
  7065 ;;		_SYSTEM_Initialize
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           
  7070                           ;psect for function _ADC_Initialize
  7071  079C                     _ADC_Initialize:
  7072                           
  7073                           ;adc.c: 70: ADCON0 = 0x01;
  7074                           
  7075                           ;incstack = 0
  7076                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7077  079C  3001               	movlw	1
  7078  079D  009D               	movwf	29	;volatile
  7079                           
  7080                           ;adc.c: 73: ADCON1 = 0xC0;
  7081  079E  30C0               	movlw	192
  7082  079F  009E               	movwf	30	;volatile
  7083                           
  7084                           ;adc.c: 76: ADACT = 0x00;
  7085  07A0  019F               	clrf	31	;volatile
  7086                           
  7087                           ;adc.c: 79: ADRESL = 0x00;
  7088  07A1  019B               	clrf	27	;volatile
  7089                           
  7090                           ;adc.c: 82: ADRESH = 0x00;
  7091  07A2  019C               	clrf	28	;volatile
  7092  07A3  0008               	return
  7093  07A4                     __end_of_ADC_Initialize:
  7094                           
  7095                           	psect	intentry
  7096  0004                     __pintentry:	
  7097 ;; *************** function _INTERRUPT_InterruptManager *****************
  7098 ;; Defined at:
  7099 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7100 ;; Parameters:    Size  Location     Type
  7101 ;;		None
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;		None
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  1    wreg      void 
  7106 ;; Registers used:
  7107 ;;		wreg, status,2, status,0, pclath, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7113 ;;      Params:         0       0       0       0
  7114 ;;      Locals:         0       0       0       0
  7115 ;;      Temps:          0       0       0       0
  7116 ;;      Totals:         0       0       0       0
  7117 ;;Total ram usage:        0 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    2
  7120 ;; This function calls:
  7121 ;;		_TMR1_ISR
  7122 ;; This function is called by:
  7123 ;;		Interrupt level 1
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127  0004                     _INTERRUPT_InterruptManager:
  7128                           
  7129                           ;incstack = 0
  7130  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7131                           
  7132                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  7133  0005  3180               	pagesel	$
  7134                           
  7135                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  7136  0006  1F0B               	btfss	11,6	;volatile
  7137  0007  280F               	goto	i1l95
  7138                           
  7139                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: if(PIE1bits.TMR1IE == 1 && PIR1bits
      +                          .TMR1IF == 1)
  7140  0008  0021               	movlb	1	; select bank1
  7141  0009  1C11               	btfss	17,0	;volatile
  7142  000A  280F               	goto	i1l95
  7143  000B  0020               	movlb	0	; select bank0
  7144  000C  1C11               	btfss	17,0	;volatile
  7145  000D  280F               	goto	i1l95
  7146                           
  7147                           ;interrupt_manager.c: 58: {;interrupt_manager.c: 59: TMR1_ISR();
  7148  000E  273F               	fcall	_TMR1_ISR
  7149  000F                     i1l95:	
  7150                           ;interrupt_manager.c: 60: }
  7151                           
  7152  000F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7153  0010  0009               	retfie
  7154  0011                     __end_of_INTERRUPT_InterruptManager:
  7155                           
  7156                           	psect	text35
  7157  073F                     __ptext35:	
  7158 ;; *************** function _TMR1_ISR *****************
  7159 ;; Defined at:
  7160 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;		None
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;		None
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  1    wreg      void 
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0, pclath, cstack
  7169 ;; Tracked objects:
  7170 ;;		On entry : 1F/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7174 ;;      Params:         0       0       0       0
  7175 ;;      Locals:         0       0       0       0
  7176 ;;      Temps:          0       0       0       0
  7177 ;;      Totals:         0       0       0       0
  7178 ;;Total ram usage:        0 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:    1
  7181 ;; This function calls:
  7182 ;;		Absolute function
  7183 ;;		_TMR1_DefaultInterruptHandler
  7184 ;;		_TimeCheck_ISR
  7185 ;;		i1_TMR1_WriteTimer
  7186 ;; This function is called by:
  7187 ;;		_INTERRUPT_InterruptManager
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function _TMR1_ISR
  7193  073F                     _TMR1_ISR:
  7194                           
  7195                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
  7196                           
  7197                           ;incstack = 0
  7198                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  7199  073F  1011               	bcf	17,0	;volatile
  7200                           
  7201                           ;tmr1.c: 162: TMR1_WriteTimer(timer1ReloadVal);
  7202  0740  0860               	movf	_timer1ReloadVal+1,w	;volatile
  7203  0741  00F1               	movwf	i1TMR1_WriteTimer@timerVal+1
  7204  0742  085F               	movf	_timer1ReloadVal,w	;volatile
  7205  0743  00F0               	movwf	i1TMR1_WriteTimer@timerVal
  7206  0744  276B               	fcall	i1_TMR1_WriteTimer
  7207                           
  7208                           ;tmr1.c: 164: if(TMR1_InterruptHandler)
  7209  0745  085D               	movf	_TMR1_InterruptHandler,w
  7210  0746  045E               	iorwf	_TMR1_InterruptHandler+1,w
  7211  0747  1903               	btfsc	3,2
  7212  0748  0008               	return
  7213                           
  7214                           ;tmr1.c: 165: {;tmr1.c: 166: TMR1_InterruptHandler();
  7215  0749  085E               	movf	_TMR1_InterruptHandler+1,w
  7216  074A  008A               	movwf	10
  7217  074B  085D               	movf	_TMR1_InterruptHandler,w
  7218  074C  000A               	callw
  7219  074D  3187               	pagesel	$
  7220  074E  0008               	return
  7221  074F                     __end_of_TMR1_ISR:
  7222                           
  7223                           	psect	text36
  7224  076B                     __ptext36:	
  7225 ;; *************** function i1_TMR1_WriteTimer *****************
  7226 ;; Defined at:
  7227 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  timerVal        2    0[COMMON] unsigned int 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		wreg
  7236 ;; Tracked objects:
  7237 ;;		On entry : 1F/0
  7238 ;;		On exit  : 1F/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7241 ;;      Params:         2       0       0       0
  7242 ;;      Locals:         0       0       0       0
  7243 ;;      Temps:          0       0       0       0
  7244 ;;      Totals:         2       0       0       0
  7245 ;;Total ram usage:        2 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; This function calls:
  7248 ;;		Nothing
  7249 ;; This function is called by:
  7250 ;;		_TMR1_ISR
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           
  7255                           ;psect for function i1_TMR1_WriteTimer
  7256  076B                     i1_TMR1_WriteTimer:
  7257                           
  7258                           ;tmr1.c: 122: if (T1CONbits.T1SYNC == 1)
  7259                           
  7260                           ;incstack = 0
  7261                           ; Regs used in i1_TMR1_WriteTimer: [wreg]
  7262  076B  1D1B               	btfss	27,2	;volatile
  7263  076C  2F74               	goto	i1l1994
  7264                           
  7265                           ;tmr1.c: 123: {;tmr1.c: 125: T1CONbits.TMR1ON = 0;
  7266  076D  101B               	bcf	27,0	;volatile
  7267                           
  7268                           ;tmr1.c: 128: TMR1H = (timerVal >> 8);
  7269  076E  0871               	movf	i1TMR1_WriteTimer@timerVal+1,w
  7270  076F  009A               	movwf	26	;volatile
  7271                           
  7272                           ;tmr1.c: 129: TMR1L = timerVal;
  7273  0770  0870               	movf	i1TMR1_WriteTimer@timerVal,w
  7274  0771  0099               	movwf	25	;volatile
  7275                           
  7276                           ;tmr1.c: 132: T1CONbits.TMR1ON =1;
  7277  0772  141B               	bsf	27,0	;volatile
  7278                           
  7279                           ;tmr1.c: 133: }
  7280  0773  0008               	return
  7281  0774                     i1l1994:
  7282                           
  7283                           ;tmr1.c: 134: else;tmr1.c: 135: {;tmr1.c: 137: TMR1H = (timerVal >> 8);
  7284  0774  0871               	movf	i1TMR1_WriteTimer@timerVal+1,w
  7285  0775  009A               	movwf	26	;volatile
  7286                           
  7287                           ;tmr1.c: 138: TMR1L = timerVal;
  7288  0776  0870               	movf	i1TMR1_WriteTimer@timerVal,w
  7289  0777  0099               	movwf	25	;volatile
  7290  0778  0008               	return
  7291  0779                     __end_ofi1_TMR1_WriteTimer:
  7292                           
  7293                           	psect	text37
  7294  07D8                     __ptext37:	
  7295 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7296 ;; Defined at:
  7297 ;;		line 175 in file "mcc_generated_files/tmr1.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;		None
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;		None
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      void 
  7304 ;; Registers used:
  7305 ;;		None
  7306 ;; Tracked objects:
  7307 ;;		On entry : 1F/0
  7308 ;;		On exit  : 1F/0
  7309 ;;		Unchanged: 1F/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7311 ;;      Params:         0       0       0       0
  7312 ;;      Locals:         0       0       0       0
  7313 ;;      Temps:          0       0       0       0
  7314 ;;      Totals:         0       0       0       0
  7315 ;;Total ram usage:        0 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; This function calls:
  7318 ;;		Nothing
  7319 ;; This function is called by:
  7320 ;;		_TMR1_Initialize
  7321 ;;		_TMR1_ISR
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           
  7326                           ;psect for function _TMR1_DefaultInterruptHandler
  7327  07D8                     _TMR1_DefaultInterruptHandler:
  7328                           
  7329                           ;incstack = 0
  7330                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  7331  07D8  0008               	return
  7332  07D9                     __end_of_TMR1_DefaultInterruptHandler:
  7333                           
  7334                           	psect	text38
  7335  05FF                     __ptext38:	
  7336 ;; *************** function _TimeCheck_ISR *****************
  7337 ;; Defined at:
  7338 ;;		line 76 in file "main.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;		None
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;		None
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      void 
  7345 ;; Registers used:
  7346 ;;		wreg
  7347 ;; Tracked objects:
  7348 ;;		On entry : 1F/0
  7349 ;;		On exit  : 1F/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7352 ;;      Params:         0       0       0       0
  7353 ;;      Locals:         0       0       0       0
  7354 ;;      Temps:          0       0       0       0
  7355 ;;      Totals:         0       0       0       0
  7356 ;;Total ram usage:        0 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; This function calls:
  7359 ;;		Nothing
  7360 ;; This function is called by:
  7361 ;;		_main
  7362 ;;		_TMR1_ISR
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           
  7367                           ;psect for function _TimeCheck_ISR
  7368  05FF                     _TimeCheck_ISR:
  7369                           
  7370                           ;main.c: 77: waitTimeCounter++;
  7371                           
  7372                           ;incstack = 0
  7373                           ; Regs used in _TimeCheck_ISR: [wreg]
  7374  05FF  3001               	movlw	1
  7375  0600  07D8               	addwf	_waitTimeCounter,f
  7376  0601  3000               	movlw	0
  7377  0602  3DD9               	addwfc	_waitTimeCounter+1,f
  7378  0603  3000               	movlw	0
  7379  0604  3DDA               	addwfc	_waitTimeCounter+2,f
  7380  0605  3000               	movlw	0
  7381  0606  3DDB               	addwfc	_waitTimeCounter+3,f
  7382                           
  7383                           ;main.c: 78: if( waitTimeCounter >= target_count ){
  7384  0607  0857               	movf	_target_count+3,w
  7385  0608  025B               	subwf	_waitTimeCounter+3,w
  7386  0609  1D03               	skipz
  7387  060A  2E15               	goto	u75_25
  7388  060B  0856               	movf	_target_count+2,w
  7389  060C  025A               	subwf	_waitTimeCounter+2,w
  7390  060D  1D03               	skipz
  7391  060E  2E15               	goto	u75_25
  7392  060F  0855               	movf	_target_count+1,w
  7393  0610  0259               	subwf	_waitTimeCounter+1,w
  7394  0611  1D03               	skipz
  7395  0612  2E15               	goto	u75_25
  7396  0613  0854               	movf	_target_count,w
  7397  0614  0258               	subwf	_waitTimeCounter,w
  7398  0615                     u75_25:
  7399  0615  1C03               	skipc
  7400  0616  0008               	return
  7401                           
  7402                           ;main.c: 79: waitTimeCounter=0;
  7403  0617  3000               	movlw	0
  7404  0618  00DB               	movwf	_waitTimeCounter+3
  7405  0619  3000               	movlw	0
  7406  061A  00DA               	movwf	_waitTimeCounter+2
  7407  061B  3000               	movlw	0
  7408  061C  00D9               	movwf	_waitTimeCounter+1
  7409  061D  3000               	movlw	0
  7410  061E  00D8               	movwf	_waitTimeCounter
  7411                           
  7412                           ;main.c: 80: fireFlg=1;
  7413  061F  01DC               	clrf	_fireFlg
  7414  0620  0ADC               	incf	_fireFlg,f
  7415  0621  0008               	return
  7416  0622                     __end_of_TimeCheck_ISR:
  7417  007E                     btemp	set	126	;btemp
  7418  007E                     int$flags	set	126
  7419  007E                     wtemp0	set	126
  7420                           
  7421                           	psect	config
  7422                           
  7423                           ;Config register CONFIG1 @ 0x8007
  7424                           ;	FEXTOSC External Oscillator mode Selection bits
  7425                           ;	FEXTOSC = OFF, Oscillator not enabled
  7426                           ;	Power-up default value for COSC bits
  7427                           ;	RSTOSC = HFINT1, HFINTOSC (1MHz)
  7428                           ;	Clock Out Enable bit
  7429                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; I/O or oscillator function on OSC2
  7430                           ;	Clock Switch Enable bit
  7431                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  7432                           ;	Fail-Safe Clock Monitor Enable
  7433                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7434  8007                     	org	32775
  7435  8007  3FEC               	dw	16364
  7436                           
  7437                           ;Config register CONFIG2 @ 0x8008
  7438                           ;	Master Clear Enable bit
  7439                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR; Weak pull-up enabled
  7440                           ;	Power-up Timer Enable bit
  7441                           ;	PWRTE = OFF, PWRT disabled
  7442                           ;	Watchdog Timer Enable bits
  7443                           ;	WDTE = OFF, WDT disabled; SWDTEN is ignored
  7444                           ;	Low-power BOR enable bit
  7445                           ;	LPBOREN = OFF, ULPBOR disabled
  7446                           ;	Brown-out Reset Enable bits
  7447                           ;	BOREN = ON, Brown-out Reset enabled, SBOREN bit ignored
  7448                           ;	Brown-out Reset Voltage selection bit
  7449                           ;	BORV = LOW, Brown-out voltage (Vbor) set to 2.45V
  7450                           ;	PPSLOCK bit One-Way Set Enable bit
  7451                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once; PPS registers remain l
      +                          ocked after one clear/set cycle
  7452                           ;	Stack Overflow/Underflow Reset Enable bit
  7453                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7454                           ;	Debugger enable bit
  7455                           ;	DEBUG = OFF, Background debugger disabled
  7456  8008                     	org	32776
  7457  8008  3FF3               	dw	16371
  7458                           
  7459                           ;Config register CONFIG3 @ 0x8009
  7460                           ;	User NVM self-write protection bits
  7461                           ;	WRT = OFF, Write protection off
  7462                           ;	Low Voltage Programming Enable bit
  7463                           ;	LVP = OFF, High Voltage on MCLR/VPP must be used for programming.
  7464  8009                     	org	32777
  7465  8009  1FFF               	dw	8191
  7466                           
  7467                           ;Config register CONFIG4 @ 0x800A
  7468                           ;	User NVM Program Memory Code Protection bit
  7469                           ;	CP = OFF, User NVM code protection disabled
  7470                           ;	Data NVM Memory Code Protection bit
  7471                           ;	CPD = OFF, Data NVM code protection disabled
  7472  800A                     	org	32778
  7473  800A  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         9
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     52      65
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimeCheck_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TimeCheck_ISR(), Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_TM1640_LEDarray
    _main->___wmul
    _voltage_index->___wmul
    ___lmul->___wmul
    _TMR1_Reload->_TMR1_WriteTimer
    _TM1640_dispVoltage->___lwdiv
    _TM1640_dispVoltage->___wmul
    ___wmul->_ADC_GetConversion
    _TM1640_dispLowBat->_TM1640_sendAddress_and_Data
    _TM1640_dispINT->___lwdiv
    _TM1640_dispDEC->___wmul
    _TM1640_diplayOFF->_TM1640_sendAddress_and_Data
    _TM1640_LEDarrayOFF->_TM1640_sendAddress_and_Data
    _TM1640_LEDarray->_TM1640_sendAddress_and_Data
    _TM1640_sendCommand->_TM1640_sendByte
    _TM1640_sendAddress_and_Data->_TM1640_sendByte
    _TMR1_Initialize->_TMR1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->i1_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _main->___lmul
    _voltage_index->___wmul
    ___lmul->___wmul
    _TM1640_dispVoltage->___wmul
    _TM1640_dispDEC->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                38    38      0   19295
                                             14 BANK0     38    38      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                    _TM1640_LEDarray
                 _TM1640_LEDarrayOFF
                   _TM1640_diplayOFF
                     _TM1640_dispDEC
                     _TM1640_dispINT
                  _TM1640_dispLowBat
                 _TM1640_dispVoltage
                        _TM1640_init
                        _TMR0_Reload
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                    _TMR0_WriteTimer
                        _TMR1_Reload
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
                             ___lmul
                             ___wmul
                      _voltage_index
 ---------------------------------------------------------------------------------
 (1) _voltage_index                                        4     4      0    1856
                                              2 BANK0      4     4      0
                  _ADC_GetConversion
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      22
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     348
                                              2 BANK0     12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_Reload                                          0     0      0     192
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_WriteTimer                                      2     0      2     192
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR0_WriteTimer                                      2     0      2     621
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TM1640_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TM1640_dispVoltage                                   9     7      2    3961
                                              2 BANK0      9     7      2
        _TM1640_sendAddress_and_Data
                 _TM1640_sendCommand
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1676
                                              6 COMMON     4     0      4
                                              0 BANK0      2     2      0
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _TM1640_dispLowBat                                    1     1      0    1100
                                              7 COMMON     1     1      0
        _TM1640_sendAddress_and_Data
                 _TM1640_sendCommand
 ---------------------------------------------------------------------------------
 (1) _TM1640_dispINT                                       5     3      2    2636
                                              0 BANK0      5     3      2
        _TM1640_sendAddress_and_Data
                 _TM1640_sendCommand
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     415
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _TM1640_dispDEC                                       4     2      2    1466
                                              2 BANK0      4     2      2
        _TM1640_sendAddress_and_Data
                 _TM1640_sendCommand
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TM1640_diplayOFF                                     2     2      0    1145
                                              7 COMMON     2     2      0
        _TM1640_sendAddress_and_Data
                 _TM1640_sendCommand
 ---------------------------------------------------------------------------------
 (1) _TM1640_LEDarrayOFF                                   2     2      0    1123
                                              7 COMMON     2     2      0
        _TM1640_sendAddress_and_Data
                 _TM1640_sendCommand
 ---------------------------------------------------------------------------------
 (1) _TM1640_LEDarray                                      3     3      0    1145
                                              7 COMMON     3     3      0
        _TM1640_sendAddress_and_Data
                 _TM1640_sendCommand
 ---------------------------------------------------------------------------------
 (2) _TM1640_sendCommand                                   1     1      0      91
                                              5 COMMON     1     1      0
                    _TM1640_sendByte
 ---------------------------------------------------------------------------------
 (2) _TM1640_sendAddress_and_Data                          2     1      1    1009
                                              5 COMMON     2     1      1
                    _TM1640_sendByte
 ---------------------------------------------------------------------------------
 (3) _TM1640_sendByte                                      3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     150
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     150
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0     116
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0     116
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                      _TimeCheck_ISR *
                  i1_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) i1_TMR1_WriteTimer                                    2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _TimeCheck_ISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   _TM1640_LEDarray
     _TM1640_sendAddress_and_Data
       _TM1640_sendByte
     _TM1640_sendCommand
       _TM1640_sendByte
   _TM1640_LEDarrayOFF
     _TM1640_sendAddress_and_Data
       _TM1640_sendByte
     _TM1640_sendCommand
       _TM1640_sendByte
   _TM1640_diplayOFF
     _TM1640_sendAddress_and_Data
       _TM1640_sendByte
     _TM1640_sendCommand
       _TM1640_sendByte
   _TM1640_dispDEC
     _TM1640_sendAddress_and_Data
       _TM1640_sendByte
     _TM1640_sendCommand
       _TM1640_sendByte
     ___wmul (ARG)
       _ADC_GetConversion (ARG)
   _TM1640_dispINT
     _TM1640_sendAddress_and_Data
       _TM1640_sendByte
     _TM1640_sendCommand
       _TM1640_sendByte
     ___lwdiv
     ___lwmod
   _TM1640_dispLowBat
     _TM1640_sendAddress_and_Data
       _TM1640_sendByte
     _TM1640_sendCommand
       _TM1640_sendByte
   _TM1640_dispVoltage
     _TM1640_sendAddress_and_Data
       _TM1640_sendByte
     _TM1640_sendCommand
       _TM1640_sendByte
     ___lwdiv
     ___lwmod
     ___wmul
       _ADC_GetConversion (ARG)
   _TM1640_init
   _TMR0_Reload
   _TMR0_StartTimer
   _TMR0_StopTimer
   _TMR0_WriteTimer
   _TMR1_Reload
     _TMR1_WriteTimer
   _TMR1_SetInterruptHandler
   _TMR1_StartTimer
   ___lmul
     ___wmul (ARG)
       _ADC_GetConversion (ARG)
   ___wmul
     _ADC_GetConversion (ARG)
   _voltage_index
     _ADC_GetConversion
     ___wmul
       _ADC_GetConversion (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TimeCheck_ISR *
     i1_TMR1_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     34      41       6       81.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      4D      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Aug 17 19:41:05 2021

                  __end_of_TM1640_dispDEC 053D                              ?_TM1640_init 0070  
                  __end_of_TM1640_dispINT 0503                       ___wmul@multiplicand 0078  
                                     l162 0711                                       l411 0577  
                                     l326 00F5                                       l417 0582  
                                     l366 038B                                       l379 03F4  
                                     l629 066C                                       _DOT 07D7  
                                     u815 0548                                       u905 05EB  
                                     u835 0552                                       u915 05F2  
                                     u845 055C                                       u855 0564  
                                     u885 05DC                           _timer1ReloadVal 005F  
         TM1640_sendAddress_and_Data@data 0075                   __size_of_PMD_Initialize 0008  
                                     wreg 0009                           _waitTimeCounter 0058  
                                    l2152 0524                                      l2156 052E  
                                    l2164 05AC                                      l2168 05B6  
                                    l2530 04BB                                      l2522 04B2  
                                    l2514 04A9                                      l2506 04A0  
                                    l2602 0072                                      l2604 0074  
                                    l2710 026A                                      l2622 0099  
                                    l2554 04DE                                      l2722 027F  
                                    l2706 025F                                      l2476 0665  
                                    l2804 0390                                      l2724 0284  
                                    l2644 00AC                                      l2652 00FF  
                                    l1790 0584                                      l1950 0551  
                                    l2806 0392                                      l2734 02CD  
                                    l2670 0179                                      l1960 056C  
                                    l2728 029F                                      l2498 0497  
                                    l2770 034D                                      l1956 0563  
                                    l1948 0545                                      l1972 05D9  
                                    l2844 040A                                      l2828 03A7  
                                    l2836 03FA                                      l2780 0357  
                                    l2764 0346                                      l2692 02D9  
                                    l2676 019B                                      l2684 01EB  
                                    l1974 05E5                                      l1982 05FA  
                                    l1878 0758                                      l2846 040D  
                                    l2694 024D                                      l2678 019A  
                                    l2848 0413                                      l1978 05F1  
                                    l2698 024F                                      u2007 057A  
                                    u2017 0585                                      u1065 05B7  
                                    u2027 058C                                      u1075 05BE  
                                    u2037 059A                                      _LATA 010C  
                                    u2047 05A0                                      _LATC 010E  
                                    u1425 066D                                      u1435 0672  
                                    u1515 042C                                      u1455 0486  
                                    u1565 00DE                                      u1907 0688  
                                    u1827 007A                                      u1917 068E  
                                    u1837 011D                                      u1927 0693  
                                    u1847 019F                                      u1937 0699  
                                    u1785 03B5                                      u1857 023D  
                                    u1947 062A                                      u1867 02BA  
                                    _PMD0 0911                                      u1957 0630  
                                    u1877 030F                                      _PMD1 0912  
                                    _PMD2 0913                                      u1967 0636  
                                    u1887 0375                                      _PMD3 0914  
                                    _PMD4 0915                                      u1977 063B  
                                    u1897 0418                                      _PMD5 0916  
                                    u1987 0641                                      u1997 0573  
                                    i1l95 000F                                      _WPUA 020C  
                                    _WPUC 020E                   __end_of_TM1640_sendByte 05A4  
                        ?_TM1640_LEDarray 0070                     __end_of_TimeCheck_ISR 0622  
                __end_of_TM1640_diplayOFF 06E9                                      _main 001F  
                         _TMR0_StartTimer 07D5                                      fsr0h 0005  
                                    indf0 0000                                      fsr0l 0004  
                                    btemp 007E                                      start 0011  
              ??_TMR1_SetInterruptHandler 0074                       TM1640_sendByte@data 0073  
                         ?_TM1640_dispDEC 0022                   __end_of_TMR0_Initialize 076B  
                         ?_TM1640_dispINT 0020            __size_of_OSCILLATOR_Initialize 0008  
              __end_of_TM1640_LEDarrayOFF 073F             __end_of_OSCILLATOR_Initialize 079C  
                                   _ADACT 009F                                     ?_main 0070  
                         _TMR1_StartTimer 07CF                                     _T1CON 001B  
                         __end_of___lwdiv 0571                           __end_of___lwmod 05FF  
                         _TMR0_WriteTimer 07B6                                     _OSCEN 091D  
                                   _TMR0H 0016                                     _TMR1H 001A  
                                   _TMR0L 0015                                     _TMR1L 0019  
                                   _TRISA 008C                                     _TRISC 008E  
                                   u75_25 0615                       ___lmul@multiplicand 0026  
                            main@interval 0644                          __end_of_TMR1_ISR 074F  
                          _WDT_Initialize 07C8                             main@adcCounts 004D  
                 __end_of_TMR1_Initialize 072C                                     pclath 000A  
                                   status 0003                                     wtemp0 007E  
                         _TMR1_WriteTimer 074F                             main@batLowFlg 003F  
                         __initialization 0012                              __end_of_main 041E  
                    voltage_index@voltage 0024               TM1640_dispVoltage@digit_low 0026  
             ?_INTERRUPT_InterruptManager 0070                __end_of_TM1640_sendCommand 069C  
                                  ??_main 002E                    __end_of_WDT_Initialize 07CC  
                  __size_of_voltage_index 0047                   __end_of_TMR0_StartTimer 07D7  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _ANSELA 018C                                    _ANSELC 018E  
                                  _T0CON0 0017                                    _T0CON1 0018  
                                  _T1GCON 001C                   TM1640_dispVoltage@value 0022  
                 TMR1_WriteTimer@timerVal 0072                                    _ODCONA 028C  
                                  _ODCONC 028E                                    i1l1994 0774  
                        ?_TM1640_sendByte 0070                                    _OSCFRQ 091F  
                                  _LO_BAT 07CC                                    _WDTCON 0097  
                        main@delay_counts 0051      __end_of_TMR1_DefaultInterruptHandler 07D9  
   __size_of_TMR1_DefaultInterruptHandler 0001              _TMR1_DefaultInterruptHandler 07D8  
                            ?_TMR0_Reload 0070                 i1TMR1_WriteTimer@timerVal 0070  
                                  ___lmul 05A4                   __end_of_TMR1_StartTimer 07D2  
                            ?_TMR1_Reload 0070                                    ___wmul 0662  
                 __end_of_TMR0_WriteTimer 07BB                                 ??___lwdiv 0076  
                               ??___lwmod 0076                          ?_TMR0_Initialize 0070  
            ?_TM1640_sendAddress_and_Data 0075                             main@timeUnitH 07C0  
                    __size_of_TM1640_init 0004                                    main@vt 0047  
                          _PMD_Initialize 078C                           ?_WDT_Initialize 0070  
                ADC_GetConversion@channel 0075  TMR1_SetInterruptHandler@InterruptHandler 0072  
                 __end_of_TMR1_WriteTimer 075D                          ?_TMR1_Initialize 0070  
                       _SYSTEM_Initialize 0784                   __end_of__initialization 001C  
                      ?_SYSTEM_Initialize 0070                             _voltage_index 0476  
                          __pcstackCOMMON 0070                       ??_SYSTEM_Initialize 0074  
                               ?_TMR1_ISR 0070             ?_TMR1_DefaultInterruptHandler 0070  
                     TM1640_dispINT@value 0020                    __end_of_PMD_Initialize 0794  
       TM1640_sendAddress_and_Data@adress 0076             ??_TM1640_sendAddress_and_Data 0076  
                      _TM1640_dispVoltage 041E                          ?_TMR0_StartTimer 0070  
                     ?_TM1640_dispVoltage 0022                 __end_of_SYSTEM_Initialize 078C  
               TM1640_dispVoltage@voltage 0029                                __pbssBANK0 0054  
                            _T1CKIPPSbits 0E12                                __pnvCOMMON 007A  
                       ?_TM1640_diplayOFF 0070                            ?_voltage_index 0070  
                      ??_TM1640_diplayOFF 0077                          ??_TM1640_dispDEC 0024  
                        ??_TM1640_dispINT 0022                                __pmaintext 001F  
                  TM1640_LEDarray@pattern 0079                   __size_of_TMR0_StopTimer 0003  
                                 ?___lmul 0022                      ??_TM1640_dispVoltage 0024  
                                 ?___wmul 0076                          ?_TMR1_StartTimer 0070  
                              ??_TMR1_ISR 0072                                __pintentry 0004  
                        ?_TMR0_WriteTimer 0072                            ___lmul@product 002A  
                         ?_PMD_Initialize 0070                   __size_of_ADC_Initialize 0008  
                                 _OSCCON1 0919                                   _OSCCON3 091B  
                                 _OSCTUNE 091E                   TM1640_dispINT@digit_low 0023  
                      _TM1640_LEDarrayOFF 072C                          ?_TMR1_WriteTimer 0072  
    __size_of_TM1640_sendAddress_and_Data 0022                       ?_TM1640_LEDarrayOFF 0070  
                __size_of_TM1640_LEDarray 0019                           __size_of___lmul 002F  
                         __size_of___wmul 001E                                   ___lwdiv 053D  
                                 ___lwmod 05D3                      __size_of_TMR0_Reload 0005  
                    __size_of_TMR1_Reload 0006                                   __ptext1 0476  
                                 __ptext2 0702                                   __ptext3 05A4  
                                 __ptext4 07CF                                   __ptext5 07AA  
                                 __ptext6 074F                                   __ptext7 07B6  
                                 __ptext8 07D2                                   __ptext9 07D5  
                                 _fireFlg 005C            ??_TMR1_DefaultInterruptHandler 0070  
                  __size_of_TimeCheck_ISR 0023                      ??_TM1640_LEDarrayOFF 0077  
                               _T1CONbits 001B                     _OSCILLATOR_Initialize 0794  
       __size_of_TMR1_SetInterruptHandler 0006                  ??_PIN_MANAGER_Initialize 0072  
               ?_TMR1_SetInterruptHandler 0072                __size_of_SYSTEM_Initialize 0008  
                                 main@sec 0042                   TM1640_dispDEC@digit_low 0022  
                    end_of_initialization 001C                        _TM1640_sendCommand 0680  
               TM1640_sendCommand@command 0075                           ??_voltage_index 0022  
                     ?_TM1640_sendCommand 0070                     TM1640_diplayOFF@digit 0078  
                        ??_WDT_Initialize 0072                            main@vol_counts 0036  
                               _PORTAbits 000C                      ??_TM1640_sendCommand 0075  
                           _TimeCheck_ISR 05FF                          main@T0ReloadVal1 0045  
                          __end_of_LO_BAT 07CF                                main@parity 003E  
                    _timer0ReloadVal16bit 007A                            _TMR0_StopTimer 07D2  
                  main@target_integration 003A                  __size_of_TM1640_sendByte 0033  
                           ??_TM1640_init 0072                            __end_of___lmul 05D3  
                          __end_of___wmul 0680                         __size_of_TMR1_ISR 0010  
                          _ADC_Initialize 079C                         ??_TM1640_LEDarray 0077  
                  ?_OSCILLATOR_Initialize 0070                         TM1640_dispDEC@dot 0023  
                     start_initialization 0012                               __end_of_DOT 07D8  
                __size_of_TMR0_Initialize 000E           __size_of_PIN_MANAGER_Initialize 001B  
                          ?_TimeCheck_ISR 0070                      TM1640_LEDarray@value 0078  
                  TM1640_dispVoltage@data 0028                    __end_of_TMR0_StopTimer 07D5  
                __size_of_TMR1_Initialize 0014                          ??_PMD_Initialize 0072  
                                ??___lmul 007A                                  ??___wmul 007A  
                  __end_of_ADC_Initialize 07A4                 __size_of_TM1640_diplayOFF 0019  
                     __end_of_LED_PATTERN 07AA                       __end_of_TM1640_init 07C8  
                               ___latbits 0000                             __pcstackBANK0 0020  
                       _TM1640_dispLowBat 06B7                        ?_TM1640_dispLowBat 0070  
                               __pnvBANK0 005D                  __size_of_TMR0_StartTimer 0002  
                         ?_TMR0_StopTimer 0070                       ??_TM1640_dispLowBat 0077  
                        ___lwdiv@dividend 0074                    _PIN_MANAGER_Initialize 069C  
        __end_of_TMR1_SetInterruptHandler 07B6               __size_of_TM1640_dispVoltage 0058  
                                ?___lwdiv 0072                                  ?___lwmod 0072  
                         ?_ADC_Initialize 0070       __end_of_TM1640_sendAddress_and_Data 0644  
             _TM1640_sendAddress_and_Data 0622              ??_INTERRUPT_InterruptManager 0072  
                       ??_TM1640_sendByte 0072                  __size_of_TMR1_StartTimer 0003  
                __size_of_TMR0_WriteTimer 0005                 __end_of_TM1640_dispLowBat 06D0  
                        ___lwdiv@quotient 0077                           ??_TimeCheck_ISR 0070  
                       i1_TMR1_WriteTimer 076B                         ??_TMR0_Initialize 0072  
                          ___wmul@product 0020                                  _LATCbits 010E  
                      ?i1_TMR1_WriteTimer 0070                                  _PIE1bits 0091  
                __size_of_TMR1_WriteTimer 000E       __size_of_INTERRUPT_InterruptManager 000D  
                                _PIR0bits 0010                                  _PIR1bits 0011  
                           ??_TMR0_Reload 0072                             ??_TMR1_Reload 0074  
                             _LED_PATTERN 07A4                       ??i1_TMR1_WriteTimer 0072  
                                _TMR1_ISR 073F                               _TM1640_init 07C4  
                TM1640_dispINT@digit_high 0024                     __end_ofmain@timeUnitH 07C4  
                       ??_TMR1_Initialize 0074                                _ADCON0bits 009D  
                       ___wmul@multiplier 0076                   __size_of_TM1640_dispDEC 003A  
                     main@adc_integration 0049                   __size_of_TM1640_dispINT 0046  
             __size_of_TM1640_LEDarrayOFF 0013                                 main@delta 0040  
                               main@index 0053                                 main@level 0044  
                     __end_of_NUMBER_FONT 0784                 __end_ofi1_TMR1_WriteTimer 0779  
                       ___lmul@multiplier 0022                     __end_of_voltage_index 04BD  
                         _TM1640_LEDarray 06E9                         _ADC_GetConversion 0702  
                 ??_OSCILLATOR_Initialize 0072                        ?_ADC_GetConversion 0072  
                       ??_TMR0_StartTimer 0072                          __size_of___lwdiv 0034  
                        __size_of___lwmod 002C                          _TM1640_diplayOFF 06D0  
                _TMR1_SetInterruptHandler 07B0                       __end_of_TMR0_Reload 07C0  
                     __end_of_TMR1_Reload 07B0                     _TMR1_InterruptHandler 005D  
                     ??_ADC_GetConversion 0074               __size_of_TM1640_sendCommand 001C  
                              _T0CON0bits 0017                __size_of_TM1640_dispLowBat 0019  
               main@timer0ReloadVal16bit2 0038                 main@timer0ReloadVal16bit3 004F  
                         ___lwdiv@divisor 0072                           ___lwdiv@counter 0079  
                                __ptext10 07BB                                  __ptext11 07C4  
                                __ptext20 072C                                  __ptext12 041E  
                                __ptext21 06E9                                  __ptext13 0662  
                                __ptext30 078C                                  __ptext22 0680  
                                __ptext14 06B7                                  __ptext31 069C  
                                __ptext23 0622                                  __ptext15 04BD  
                                __ptext32 0794                                  __ptext24 0571  
                                __ptext16 05D3                                  __ptext33 079C  
                                __ptext25 0784                                  __ptext17 053D  
                                __ptext26 07C8                                  __ptext18 0503  
                                __ptext35 073F                                  __ptext27 0718  
                                __ptext19 06D0                                  __ptext36 076B  
                                __ptext28 07B0                                  __ptext37 07D8  
                                __ptext29 075D                                  __ptext38 05FF  
                       ??_TMR1_StartTimer 0072                              _target_count 0054  
                 TMR0_WriteTimer@timerVal 0072                         ??_TMR0_WriteTimer 0074  
                           __size_of_main 03FF                 __end_of_ADC_GetConversion 0718  
                    __end_ofmain@interval 0662                                  int$flags 007E  
            TM1640_dispVoltage@digit_high 0027        __end_of_INTERRUPT_InterruptManager 0011  
              _INTERRUPT_InterruptManager 0004                         ??_TMR1_WriteTimer 0074  
                             _NUMBER_FONT 0779                          TM1640_sendByte@i 0074  
                TM1640_dispDEC@digit_high 0025                                _INTCONbits 000B  
                         main@waterCounts 0043                __size_ofi1_TMR1_WriteTimer 000E  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                        ??_TMR0_StopTimer 0072                   __end_of_TM1640_LEDarray 0702  
                        ___lwmod@dividend 0074                   ?_PIN_MANAGER_Initialize 0070  
                        ??_ADC_Initialize 0072                           _TM1640_sendByte 0571  
                             _TMR0_Reload 07BB                               _TMR1_Reload 07AA  
               TM1640_LEDarrayOFF@pattern 0078                             __pstringtext1 0644  
                           __pstringtext2 0779                             __pstringtext3 07A4  
                           __pstringtext4 07C0                             __pstringtext5 07CC  
                           __pstringtext6 07D7                            _TM1640_dispDEC 0503  
                          _TM1640_dispINT 04BD                           ___lwmod@divisor 0072  
                         _TMR0_Initialize 075D                           ___lwmod@counter 0077  
          __end_of_PIN_MANAGER_Initialize 06B7                __size_of_ADC_GetConversion 0016  
                         _TMR1_Initialize 0718                __end_of_TM1640_dispVoltage 0476  
